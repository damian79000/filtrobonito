class Panel {
    constructor() {
        this.subscription = {};
        this.storage = {};
        this.balance = {};
        this.appStart().then(() => {
            $("title").html(`${this.translation("title.panel")} v${this.storage.app.version}`);
            $("footer .desc-affiliate").html(this.translation("description.descAffiliate"));
            $("footer .desc-company").html(`\u00a9 2019 &mdash; ${moment().format("YYYY")} forexbinaryrobot&trade;`);
            this.configuration.appVersion && this.configuration.appVersion != this.storage.app.version && this.notification(this.translation("notification.title.updateApp"),
                this.translation("notification.topic.updateApp", {
                    version: this.configuration.appVersion
                }), 6E4, "updateApp");
            this.affiliate = this.storage.configuration.affiliateData.affiliates.find(L => L.id == this.storage.app.affiliate) || this.storage.configuration.affiliateData.affiliates.find(L => 0 == L.id);
            chrome.storage.onChanged.addListener(async (L, Y) => {
                this.storage[Object.keys(L)[0]] = L[Object.keys(L)[0]].newValue;
                switch (Object.keys(L)[0]) {
                    case "runningStrategies":
                        let ja = this.storage.runningStrategies;
                        this.storage.strategies.forEach(Z => {
                            ja.includes(Z.id) || this.runEvent(`status_${Z.id}`, "off")
                        });
                        break;
                    case "lastTimeNotification":
                        this.runEvent("addedNotification", !0);
                        this.notification(this.translation("notification.title.newNotification"), this.translation("notification.topic.newNotification"), 2E4);
                        break;
                    case "events":
                        this.storage.events.forEach(Z => {
                            this.runEvent(`new${Z.id}`, Z.data.length)
                        });
                        break;
                    case "recoveryExpertData":
                        this.storage.recoveryExpertData.forEach(Z => this.getTradeResult(Z.id));
                        break;
                    case "platform":
                        this.storage.runningStrategies.forEach(Z =>
                            this.getTradeResult(Z))
                }
            });
            chrome.runtime.onMessage.addListener((L, Y, ja) => {
                switch (L.event) {
                    case "makeHistory":
                        this.runEvent("updateDealHistory", L.data);
                        ja(!0);
                        break;
                    case "logsBookNewDate":
                        this.runEvent("logsBookNewDate", !0), ja(!0)
                }
                return !0
            });
            chrome.runtime.onConnectExternal.addListener(L => {
                this.ports[L.name] = L;
                this.runEvent("connectTronLinkBridge", L);
                this.ports[L.name].onMessage.addListener(Y => {
                    this.runEvent(Y.event, {
                        port: L,
                        data: Y
                    })
                })
            });
            chrome.runtime.onMessageExternal.addListener((L, Y, ja) => {
                switch (L.type) {
                    case "translation":
                        ja(L.marks.mark.map(Z =>
                            this.translation(Z, L.marks.parms)).join());
                        break;
                    case "affiliateContacts":
                        try {
                            ja(this.affiliate.contacts.map(Z => ({
                                icon: Z.icon,
                                url: Z.url,
                                title: Z.title.marks.map(la => this.translation(la, Z.title.parms)).join()
                            })))
                        } catch {
                            ja([])
                        }
                        break;
                    case "runEvent":
                        this.runEvent(L.data[0], L.data[1]);
                        ja(!0);
                        break;
                    default:
                        chrome.runtime.sendMessage(L).then(ja).catch(ja)
                }
                return !0
            });
            this.panelView().then().catch(console.log)
        }).catch(console.log)
    }
    on(L, Y, ja) {
        "undefined" == typeof this.subscription[L] && (this.subscription[L] = {});
        this.subscription[L][Y] = ja;
        return !0
    }
    runEvent(L, Y) {
        for (let ja in this.subscription[L]) this.subscription[L][ja](Y), "unique" == ja && delete this.subscription[L]
    }
    async appStart() {
        await chrome.runtime.sendMessage({
            event: "updateMainConfiguration"
        });
        this.storage = await chrome.storage.local.get();
        this.ports = {};
        this.configuration = this.storage.configuration;
        this.tutorialData = await this.get("../json/tutorialData.json");
        this.choseLanguageData = this.configuration.availableLanguages.find(L => L.id == this.storage.app.language);
        this.tronResours = {
            dateUpdate: 0,
            value: null
        };
        this.tronChainParameters = {
            dateUpdate: 0,
            value: null
        };
        this.coinRateDollar = {
            usdt: {
                price_in_usd: 1,
                time: 0
            }
        };
        this.updateRateDollar("usdt").then().catch(console.log);
        if (void 0 == this.choseLanguageData) throw "err farm choseLanguageData";
        try {
            this.textTranslation = this.storage.languages[this.storage.app.language] || this.storage.languages.ru
        } catch (L) {
            this.textTranslation = this.storage.languages.ru
        }
        this.tronWeb = new nativeTronWeb({
            fullHost: this.configuration.tronApp.fullHost
        });
        this.tronWeb.setHeader({
            "TRON-PRO-API-KEY": "a0a491f2-bb39-42af-b5b6-a63cba586dc3"
        });
        this.crypto = native\u0421rypto
    }
    async openPlatform() {
        try {
            let L = (await chrome.cookies.getAll({
                name: "ci_session"
            })).map(Z => Z.domain.replace(/^\./gm, "")).concat((await chrome.cookies.getAll({
                name: "af_message"
            })).map(Z => Z.domain.replace(/^\./gm, "")));
            L = [...(new Set(L))];
            let Y = [];
            L.forEach(Z => {
                Y.includes(`https://${Z}`) || Y.push(`https://${Z}`)
            });
            let ja = (await chrome.windows.getAll({
                populate: !0
            })).reduce((Z, la) => [...Z, ...la.tabs.filter(Ca =>
                Y.find(Ra => Ca.url.indexOf(Ra) + 1 && Ca.id != this.storage.platform\u0421onnection.tabId)).map(Ca => Ca.id)], []);
            0 < ja.length && await chrome.tabs.remove(ja);
            try {
                if (!this.storage.platform\u0421onnection.tabId) throw !0;
                await chrome.tabs.update(this.storage.platform\u0421onnection.tabId, {
                    active: !0
                });
                try {
                    let Z = (await chrome.windows.getAll({
                        populate: !0
                    })).find(la => la.tabs.find(Ca => Ca.id == this.storage.platform\u0421onnection.tabId)).id;
                    await chrome.windows.update(Z, {
                        focused: !0
                    })
                } catch {}
            } catch (Z) {
                await chrome.runtime.sendMessage({
                    sender: "panell",
                    event: "openTab",
                    url: this.storage.platform\u0421onnection.url || this.configuration.appData.redirectionPlatformDomain
                })
            }
        } catch (L) {
            this.notification(this.translation("errors.error"), this.translation("errors.somethingWrong"), 3E3, "error", "error")
        }
    }
    async get(L, Y = {}) {
        L = await fetch(L, {
            headers: Object.assign({
                Accept: "application/json",
                "Content-Type": "application/json"
            }, Y)
        });
        if (200 != L.status) throw Error("Incorrect server response");
        return await L.json()
    }
    async post(L, Y, ja = {}) {
        L = await fetch(L, {
            method: "post",
            headers: Object.assign({
                Accept: "application/json",
                "Content-Type": "application/json"
            }, ja),
            body: JSON.stringify(Y)
        });
        if (200 != L.status) throw Error("Incorrect server response ");
        return await L.json()
    }
    async serverPing() {
        for (let L = 0; 5 > L; L++) try {
            let Y = Date.now();
            if ("pong" == (await this.post(this.configuration.appData.myTetherApiServer, {
                    type: "ping"
                })).data) return Date.now() - Y + 1;
            throw "respon no 'pong'";
        } catch (Y) {
            await new Promise((ja, Z) => {
                setTimeout(ja, 1E3)
            })
        }
        return !1
    }
    async robotServerPing() {
        return new Promise(async (L, Y) => {
            try {
                L("pong" == (await this.post(this.configuration.appData.robotApiServer, {
                    type: "ping"
                })).data)
            } catch {
                L(!1)
            }
        })
    }
    async consoleLang(L) {
        let Y = await this.get("../json/languages/ru.json");
        var ja = await this.get(`../json/languages/${L}.json`);
        L = [];
        var Z = [];
        for (let Ca = 0; 1E3 > Ca; Ca++) {
            for (var la in ja)
                if ("path" != la)
                    if ("object" == typeof ja[la] && null != ja[la] && void 0 == ja[la].length) Z.push(Object.assign(ja[la], {
                        path: `${void 0==ja.path?"":`${ja.path}->`}${la}`
                    }));
                    else {
                        let Ra = [],
                            b = "undefined" != typeof ja.path ? ja.path.split("->") : [];
                        for (let vb = 0; vb < b.length; vb++) Ra.push(b[vb]);
                        Ra.push(la);
                        L.push({
                            path: Ra,
                            val: ja[la]
                        })
                    } if (0 == Z.length) break;
            ja = Z.shift()
        }
        for (la = 0; la < L.length; la++) {
            ja = 0;
            Z = Y;
            try {
                for (; ja + 1 < L[la].path.length; ja++) "undefined" == typeof Z[L[la].path[ja]] ? Z[L[la].path[ja]] = {} : null, Z = Z[L[la].path[ja]];
                "undefined" != typeof Z[L[la].path[ja]] && (Z[L[la].path[ja]] = L[la].val)
            } catch (Ca) {}
        }
        return JSON.stringify(Y)
    }
    numberFormat(L, Y, ja, Z) {
        if ("" === L) return "";
        if (0 == L) return "0";
        let la = (L + "").split(".");
        L = la[0];
        L = (L + "").replace(/[^0-9+\-Ee.]/g, "");
        L = isFinite(+L) ? +L : 0;
        Y = isFinite(+Y) ? Math.abs(Y) :
            0;
        Z = "undefined" === typeof Z ? " " : Z;
        ja = "undefined" === typeof ja ? "." : ja;
        if (Y) {
            let Ca = Math.pow(10, Y);
            L = "" + Math.round(L * Ca) / Ca
        } else L = "" + Math.round(L);
        L = L.split(".");
        3 < L[0].length && (L[0] = L[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, Z));
        (L[1] || "").length < Y && (L[1] = L[1] || "", L[1] += Array(Y - L[1].length + 1).join("0"));
        return L.join(ja) + (void 0 == la[1] ? "" : `.${la[1]}`)
    }
    getTradeResult(L) {
        let Y = ["0.00", "0.00"];
        this.storage.recoveryExpertData.filter(ja => ja.id == L && this.storage.runningStrategiesSession.find(Z => Z.strategyId ==
            L && Z.session == ja.session)).forEach(ja => {
            try {
                let Z = JSON.parse(ja.iso);
                Y[ja.isDemo] = Z.tradingResult.toFixed(2)
            } catch {}
        });
        this.runEvent(`tradeResult_${L}`, Y);
        return !0
    }
    objectAssign(L, Y, ja = !1) {
        var Z = Y;
        Y = [];
        var la = [];
        for (let Ra = 0; 1E3 > Ra; Ra++) {
            for (var Ca in Z)
                if ("path" != Ca)
                    if ("object" == typeof Z[Ca] && null != Z[Ca] && void 0 == Z[Ca].length) la.push(Object.assign(Z[Ca], {
                        path: `${void 0==Z.path?"":`${Z.path}->`}${Ca}`
                    }));
                    else {
                        let b = [],
                            vb = "undefined" != typeof Z.path ? Z.path.split("->") : [];
                        for (let rb = 0; rb < vb.length; rb++) b.push(vb[rb]);
                        b.push(Ca);
                        Y.push({
                            path: b,
                            val: Z[Ca]
                        })
                    } if (0 == la.length) break;
            Z = la.shift()
        }
        for (Ca = 0; Ca < Y.length; Ca++) {
            Z = 0;
            la = L;
            try {
                for (; Z + 1 < Y[Ca].path.length; Z++) {
                    if (!ja) {
                        if ("undefined" == typeof la[Y[Ca].path[Z]]) throw "";
                        "undefined" == typeof la[Y[Ca].path[Z]] ? la[Y[Ca].path[Z]] = {} : null
                    }
                    la = la[Y[Ca].path[Z]]
                }
                "undefined" != typeof la[Y[Ca].path[Z]] && (la[Y[Ca].path[Z]] = Y[Ca].val)
            } catch (Ra) {}
        }
    }
    getBalanceCoin(L, Y, ja) {
        (async () => {
            let Z = {
                price_in_usd: "1"
            };
            try {
                Object.assign(Z, this.coinRateDollar.usdt)
            } catch (Ca) {}
            let la;
            switch (L.address) {
                case "0":
                    return la =
                        await this.getBalanceTRC10(L.tokenID, Y), ja(la.balance / +`1${(0).toPrecision(L.decimal).replace(/\./g,"")}`, Z);
                default:
                    return la = await this.getBalanceTRC20(L.address, Y), ja(la.balance / +`1${(0).toPrecision(L.decimal).replace(/\./g,"")}`, Z)
            }
        })()
    }
    async getBalanceTRC20(L, Y) {
        "undefined" == typeof this.balance[Y] && (this.balance[Y] = {});
        "undefined" == typeof this.balance[Y][L] && (this.balance[Y][L] = {
            timeUpdate: 0,
            data: null
        });
        let ja = Date.now();
        if (3E3 < ja - this.balance[Y][L].timeUpdate) {
            var Z = await this.tronWeb.contract().at(L);
            let la = await Z.decimals().call();
            Z = await Z.balanceOf(Y).call();
            this.balance[Y][L].timeUpdate = ja;
            this.balance[Y][L].data = {
                balance: Z.toNumber(),
                decimals: la
            }
        }
        return this.balance[Y][L].data
    }
    async getBalanceTRC10(L, Y) {
        "undefined" == typeof this.balance[Y] && (this.balance[Y] = {});
        "undefined" == typeof this.balance[Y][L] && (this.balance[Y][L] = {
            timeUpdate: 0,
            data: null
        });
        let ja = Date.now();
        if (3E3 < ja - this.balance[Y][L].timeUpdate) {
            let Z = await this.tronWeb.trx.getTokenByID(+L),
                la;
            la = await (await this.tronWeb.contract().at("TPCiPH11si6NwSXVxU3S3DRM8n38cb214o")).getBalanceTrc10(Y,
                L).call();
            try {
                la = this.tronWeb.BigNumber(la.balance._hex).toNumber()
            } catch {
                la = la.balance.toNumber()
            }
            this.balance[Y][L].timeUpdate = ja;
            this.balance[Y][L].data = {
                balance: la,
                decimals: Z.precision
            }
        }
        return this.balance[Y][L].data
    }
    async updateBalanceAllCoin(L) {
        let Y;
        for (let ja = 0; ja < this.configuration.tronApp.coins.length; ja++) {
            let Z = this.configuration.tronApp.coins[ja];
            switch (Z.standard) {
                case "TRC10":
                    Y = await this.getBalanceTRC10(Z.tokenID, L);
                    break;
                case "TRC20":
                    Y = await this.getBalanceTRC20(Z.address, L)
            }
            this.runEvent(`coinBalanceUpdated_${Z.id}`, {
                val: Y.balance,
                short: Y.balance / +`1${(0).toPrecision(Z.decimal).replace(/\./g,"")}`
            })
        }
    }
    async updateTronResours() {
        let L = Date.now();
        1E4 < L - this.tronResours.dateUpdate && (this.tronResours.value = await this.tronWeb.trx.getAccountResources(this.configuration.tronApp.serviceAddress), this.tronResours.dateUpdate = L);
        return !0
    }
    async updateTronChainParameters() {
        let L = Date.now();
        1E4 < L - this.tronChainParameters.dateUpdate && (this.tronChainParameters.value = await this.tronWeb.trx.getChainParameters(), this.tronChainParameters.dateUpdate =
            L);
        return !0
    }
    async updateRateDollar(L) {
        L == this.configuration.tronApp.coins[0].id && (L = "usdt");
        let Y = Date.now();
        if ("undefined" == typeof this.coinRateDollar[L] || 1E4 < Y - this.coinRateDollar[L].time) try {
            this.coinRateDollar[L] = await this.get(`${this.configuration.tronApp.tronscanapi}/api/token/price?token=${L}`, {
                "TRON-PRO-API-KEY": "bad2de69-6754-4f6c-ad06-410a8d738303"
            }), this.coinRateDollar[L].time = Y
        } catch {
            this.coinRateDollar[L].time = 0
        }
        return !0
    }
    async setStrategyStatus(L, Y) {
        let ja = async Z => new Promise((la, Ca) => {
            setTimeout(() => la(!0), Z)
        });
        this.storage.isDisableTradingPanell && ($("body").addClass("wait"), await new Promise(async (Z, la) => {
            for (; this.storage.isDisableTradingPanell; await ja(1E3));
            Z(!0)
        }), $("body").removeClass("wait"));
        return await chrome.runtime.sendMessage({
            sender: "panell",
            event: "changeStrategyStatus",
            data: {
                strategyId: L,
                strategyStatus: Y,
                session: this.crypto.randomBytes(32).toString("hex")
            }
        })
    }
    async clearStrategyLogsbook(L) {
        return await chrome.runtime.sendMessage({
            sender: "panell",
            event: "clearStrategyLogsbook",
            data: {
                strategyId: L
            }
        })
    }
    async notification(L, Y, ja = 2E3, Z = "notification", la = "defnotif") {
        let Ca = 0 == $("#notification-container").length ? $('<div id="notification-container"></div>') : $("#notification-container"),
            Ra = $(`
            <div class="notification-case ${Z}">
                <div class="icon button-close close-icon"></div>
                <div class="body-notification">
                    <div class="wrap-msg">
                        <div class="logo-case">
                            <img src="../img/svg/${Z}.svg" />
                        </div>
                        <div class="msg-case">
                            <div class="msg-header">${L}</div>
                            <div class="msg-text"></div>
                        </div>
                    </div>
                </div>
                <div class="sender">PocketOptionRobot</div>
            </div>
        `);
        L = Ra.find(".button-close");
        Z = Ra.find(".msg-case .msg-text");
        Z.append(Y);
        Z.find("a.openTab").on("click", async b => {
            b.preventDefault();
            b = $(b.currentTarget);
            await chrome.runtime.sendMessage({
                sender: "panell",
                event: "openTab",
                url: b.attr("data")
            })
        });
        L.on("click", () => {
            Ra.addClass("close");
            setTimeout(() => {
                Ra.remove();
                0 == Ca.find(".notification-case").length && Ca.remove()
            }, 500)
        });
        $("body").append(Ca);
        Ca.append(Ra);
        (new Audio(`../sounds/${la}.mp3`)).play();
        setTimeout(() => {
            Ra.addClass("hide")
        }, ja);
        setTimeout(() => {
            Ra.remove();
            0 == Ca.find(".notification-case").length && Ca.remove()
        }, ja + 500)
    }
    async panelView() {
        $(window).resize(Ia => {
            this.runEvent("windowResize", Ia)
        });
        let L = () => (Date.now().toString(36) + Math.random().toString(36).substr(2, 12)).toUpperCase(),
            Y = Ia => {
                function fb(na) {
                    let fa, P;
                    return na = na.replace("_", "").replace("-", ""), fa = na, ["usd", "btc", "eur", "gbp", "jpy"].map(function(qa) {
                        let ma = na.indexOf(qa); - 1 !== ma && (0 === ma && (fa = na.substring(0, 3), P = na.substring(3)), 0 < ma && (fa = na.substring(0, ma), P = qa))
                    }), [fa, P]
                }

                function Xa(na,
                    fa) {
                    if (!(na = function(P) {
                                if (Array.isArray(P)) return P
                            }(na) || function(P, qa) {
                                let ma = null == P ? null : "undefined" != typeof Symbol && P[Symbol.iterator] || P["@@iterator"];
                                if (null != ma) {
                                    let La, ib, db, Sa, Ya = [],
                                        eb = !0,
                                        jb = !1;
                                    try {
                                        if (db = (ma = ma.call(P)).next, 0 === qa) {
                                            if (Object(ma) !== ma) return;
                                            eb = !1
                                        } else
                                            for (; !(eb = (La = db.call(ma)).done) && (Ya.push(La.value), Ya.length !== qa); eb = !0);
                                    } catch ($a) {
                                        jb = !0, ib = $a
                                    } finally {
                                        try {
                                            if (!eb && null != ma.return && (Sa = ma.return(), Object(Sa) !== Sa)) return
                                        } finally {
                                            if (jb) throw ib;
                                        }
                                    }
                                    return Ya
                                }
                            }(na, fa) ||
                            function(P, qa) {
                                if (P) {
                                    if ("string" == typeof P) return WK(P, qa);
                                    var ma = Object.prototype.toString.call(P).slice(8, -1);
                                    "Object" === ma && P.constructor && (ma = P.constructor.name);
                                    if ("Map" === ma || "Set" === ma) return Array.from(P);
                                    if ("Arguments" === ma || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(ma)) return WK(P, qa)
                                }
                            }(na, fa))) throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    return na
                }
                return function(na,
                    fa) {
                    if (!(na = function(P) {
                                if (Array.isArray(P)) return P
                            }(na) || function(P, qa) {
                                let ma = null == P ? null : "undefined" != typeof Symbol && P[Symbol.iterator] || P["@@iterator"];
                                if (null != ma) {
                                    let La, ib, db, Sa, Ya = [],
                                        eb = !0,
                                        jb = !1;
                                    try {
                                        if (db = (ma = ma.call(P)).next, 0 === qa) {
                                            if (Object(ma) !== ma) return;
                                            eb = !1
                                        } else
                                            for (; !(eb = (La = db.call(ma)).done) && (Ya.push(La.value), Ya.length !== qa); eb = !0);
                                    } catch ($a) {
                                        jb = !0, ib = $a
                                    } finally {
                                        try {
                                            if (!eb && null != ma.return && (Sa = ma.return(), Object(Sa) !== Sa)) return
                                        } finally {
                                            if (jb) throw ib;
                                        }
                                    }
                                    return Ya
                                }
                            }(na, fa) ||
                            function(P, qa) {
                                if (P) {
                                    if ("string" == typeof P) return YK(P, qa);
                                    var ma = Object.prototype.toString.call(P).slice(8, -1);
                                    "Object" === ma && P.constructor && (ma = P.constructor.name);
                                    if ("Map" === ma || "Set" === ma) return Array.from(P);
                                    if ("Arguments" === ma || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(ma)) return YK(P, qa)
                                }
                            }(na, fa))) throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    return na
                }(function(na) {
                    if (!na) return [void 0,
                        void 0
                    ];
                    var fa, P = na.id.split("_otc")[0].toLowerCase();
                    if ("#" === P[0] && (P = P.substring(1)), fa = P, "v" === P && (fa = "visa"), "currency" === na.group) {
                        var qa = Xa(na.title.toLowerCase().replace("_otc", "").replace("otc", "").trim().split("/"), 2);
                        fa = qa[0];
                        qa = qa[1]
                    } else "oils" !== na.group && "cfd" !== na.group && ("commodity" === na.group ? (P = Xa(fb(P), 2), na = P[0], P = P[1], na && (fa = na), "eur" === P && (qa = P)) : "cryptocurrency" === na.group ? (P = Xa(fb(P), 2), na = P[0], P = P[1], na && (fa = na), "usd" !== P && (qa = P)) : "index" === na.group && (fa = Xa(fb(P), 1)[0]));
                    fa = Xa([fa, qa], 2);
                    return [fa[0], fa[1]]
                }(Ia), 2)
            },
            ja = async (Ia, fb) => {
                let Xa = () => {
                        let z = $(".search-result-asset-case .wrap").length,
                            I = $(".search-result-asset-case .wrap input:checked").length;
                        switch (z) {
                            case 0:
                                $(".control-buttons .link-button").addClass("disabled");
                                db.find('.iteam-group-case[groupId="selected"]:not(.deactivated)').hasClass("activ") && ($(".control-buttons .link-button").html(this.translation("action.removeall")), $(".control-buttons .link-button").attr("action", "removeall"));
                                break;
                            default:
                                $(".control-buttons .link-button").removeClass("disabled"),
                                    z == I ? ($(".control-buttons .link-button").html(this.translation("action.removeall")), $(".control-buttons .link-button").attr("action", "removeall")) : ($(".control-buttons .link-button").html(this.translation("action.selectall")), $(".control-buttons .link-button").attr("action", "selectall")), na()
                        }
                    },
                    na = (z = !1) => {
                        let I = () => {
                            let J = ma.height() - (fa.assetCat.el.find(".search-result-asset-case").offset().top - ma.offset().top);
                            fa.assetCat.el.find(".search-result-asset-case").css({
                                "max-height": `${J-10}px`
                            });
                            0 <=
                                fa.indicators.el.offset().top ? (J = ma.height() - (fa.indicators.el.find(".view-indicators-case").offset().top - ma.offset().top), fa.indicators.el.find(".view-indicators-case").css({
                                    height: `${J-10}px`
                                })) : fa.indicators.el.find(".view-indicators-case").css({
                                    height: "auto"
                                });
                            0 <= fa.martingale.el.offset().top ? (J = ma.height() - (fa.martingale.el.find(".martingale-selection-case").offset().top - ma.offset().top), fa.martingale.el.find(".martingale-selection-case").css({
                                height: `${J-10}px`
                            })) : fa.martingale.el.find(".martingale-selection-case").css({
                                height: "auto"
                            })
                        };
                        if (z) setTimeout(I, 500);
                        else return I()
                    },
                    fa = {
                        assetCat: {},
                        indicators: {},
                        regulations: {},
                        martingale: {}
                    },
                    P = Ia.find(z => z.id == fb),
                    qa = JSON.parse(JSON.stringify(P)),
                    ma = $(`
                <div class="full-screen-case ">
                    <div class="head-case">
                        <div class="title-case">
                            <div class="fullpopup icon"></div>
                            <div class="title">${"undefined"==typeof P.data.userTitle?this.translation(P.data.title):P.data.userTitle} </div>
                        </div>
                        <div class="button-close icon"></div> 
                    </div>
                    <div class="nav-settings-cat-case">
                        
                    </div>
                    <div class="body-case">
                        <div class="wrap-strategy-settings"> 
                            
                        </div> 
                    </div>
                </div>
            `);
                for (var La in fa) ma.find(".nav-settings-cat-case").append(`
                    <div class="iteams-nav-case" category="${La}">
                        <div class="icon ${La}"></div>
                        <div class="title">${this.translation(`strategy.settingsGroup.${La}.button`)}</div>
                    </div>
                `), fa[La].el = $(`
                    <div class="settings-group-case" category="${La}">
                        <div class="setting-group-head-case">
                            <div class="icon setting-group"></div>
                            <div class="title">${this.translation(`strategy.settingsGroup.${La}.description`)}</div>
                        </div>
                        <div class="setting-group-body-case">
                            
                        </div>
                    </div>
                `), ma.find(".body-case .wrap-strategy-settings").append(fa[La].el);
                this.on("windowResize", "editStrategy", na);
                ma.on("click", ".button-close", async () => {
                    P.assets = [];
                    for (var z = 0; z < ib.length; z++) {
                        var I = ib[z];
                        I.el.find('input[type="checkbox"]').is(":checked") && P.assets.push(I.id)
                    }
                    I = 3;
                    z = [];
                    P.type = qa.type;
                    let J = await Ca(P),
                        F = await Ca(qa);
                    0 == P.assets.length && z.push("assetNotSelected");
                    0 == P.indicators.length && z.push("indicatorsNotSelected");
                    "public" == P.type && JSON.stringify(J.indicatorsSetings) !=
                        JSON.stringify(F.indicatorsSetings) && (z.push("cgangeBasicIndicatorsSelected"), P.type = "personal");
                    if (JSON.stringify(J) != JSON.stringify(F)) {
                        I = $(`
                        <div class="confirm-save-strategy-case no-warnings">
                            <div class="warnings-case ">
                                <div class="icon isError warnings-icon"></div>
                                <ul class="warnings-list"></ul>
                            </div>
                            <div class="confirm-text">
                                ${this.translation("prompt.topic.confirmSaveStrategy")}
                            </div>
                        </div>
                    `);
                        let R = I.find("ul.warnings-list");
                        0 < z.length && I.removeClass("no-warnings");
                        z.forEach(W => {
                            R.append(`<li>${this.translation(`warnings.${W}`)}</li>`)
                        });
                        z = [{
                            el: $(`<button class="ok">${this.translation("prompt.button.yes")}</button>`),
                            resolve: 1
                        }, {
                            el: $(`<button ">${this.translation("prompt.button.no")}</button>`),
                            resolve: 2
                        }, {
                            el: $(`<button>${this.translation("prompt.button.cancel")}</button>`),
                            resolve: !1
                        }];
                        I = await la(this.translation("prompt.title.confirm"), I, "strategyChange", z)
                    }
                    I ||=
                        0;
                    switch (I) {
                        case 0:
                            break;
                        case 1:
                            this.storage.isDisableTradingPanell && ($("body").addClass("wait"), await new Promise(async (R, W) => {
                                for (; this.storage.isDisableTradingPanell; await b(1E3));
                                R(!0)
                            }), $("body").removeClass("wait"));
                            await chrome.storage.local.set({
                                strategies: Ia
                            });
                            $("body .full-screen-popup .full-screen-case").addClass("hide");
                            setTimeout(() => {
                                $("body .full-screen-popup .full-screen-case").removeClass("hide");
                                $("body .full-screen-popup").removeClass("full-popup-show")
                            }, 300);
                            break;
                        case 2:
                            Object.assign(P,
                                qa);
                            $("body .full-screen-popup .full-screen-case").addClass("hide");
                            setTimeout(() => {
                                $("body .full-screen-popup .full-screen-case").removeClass("hide");
                                $("body .full-screen-popup").removeClass("full-popup-show")
                            }, 300);
                            break;
                        default:
                            $("body .full-screen-popup .full-screen-case").addClass("hide"), setTimeout(() => {
                                $("body .full-screen-popup .full-screen-case").removeClass("hide");
                                $("body .full-screen-popup").removeClass("full-popup-show")
                            }, 300)
                    }
                });
                ma.on("click", ".nav-settings-cat-case .iteams-nav-case",
                    z => {
                        z = $(z.currentTarget);
                        $(".nav-settings-cat-case .iteams-nav-case").removeClass("active");
                        z.addClass("active");
                        z = z.attr("category");
                        $(".wrap-strategy-settings .settings-group-case").removeClass("selected");
                        $(".wrap-strategy-settings .settings-group-case").removeClass("hide");
                        $(`.wrap-strategy-settings .settings-group-case[category="${z}"]`).addClass("selected");
                        na(!0)
                    });
                let ib = this.storage.availableAssets;
                fa.assetCat.el.find(".setting-group-body-case").append(`
                <div class="assets-selection-case">
                    <div class="wrap-group">
                            
                    </div>
                    <div class="view-group-assets">
                        <div class="search-asset-case">
                            <div class="input-reset icon"></div>
                            <input type="text" name="searchAsset" placeholder="${this.translation("action.find")}"/>
                        </div>
                        <div class="wrap-search">
                            
                        </div>
                        <div class="control-buttons">
                            <div class="link-button hoverUnderline"></div>
                        </div>    
                    </div>
                </div>
            `);
                let db = $('<div class="group-assets-case"></div>');
                for (La = 0; La < ib.length; La++) {
                    0 == La && db.append(`
                        <div class="iteam-group-case selected" groupId="selected">
                            <div class="icon selected"></div>
                            <div class="group-name">${this.translation("assetGroups.selected")}</div>
                        </div> 
                    `);
                    var Sa = ib[La];
                    0 == db.children(`div[groupId="${Sa.group}"]`).length && db.append(`
                        <div class="iteam-group-case ${Sa.group}" groupId="${Sa.group}">
                            <div class="icon ${Sa.group}"></div>
                            <div class="group-name">${this.translation(`assetGroups.${Sa.group}`)}</div>
                        </div> 
                    `);
                    var Ya = Y(Sa).filter(z => void 0 != z),
                        eb = $("<div></div>");
                    for (var jb = 0; jb < Ya.length; jb++) eb.append(`<span class="flag-icon flag-icon--${Ya[jb]}"></span>`);
                    Sa.el = $(`
                    <div class="wrap">
                        <input type="checkbox" id="${Sa.id}" ${P.assets.indexOf(Sa.id)+1?"checked":""}  />
                        <label class="iteam-asset-case" for="${Sa.id}"> 
                            <div class="img-bg-asset ${1==Ya.length?"flag-one":""}">${eb.html()}</div>
                            <div class="title-asset">${Sa.title}</div>
                        </label>
                    </div>
                `)
                }
                fa.assetCat.el.on("click", ".control-buttons .link-button:not(.disabled)", z => {
                    z = $(z.currentTarget);
                    switch (z.attr("action")) {
                        case "selectall":
                            $(".search-result-asset-case .wrap input").attr("checked", "checked");
                            break;
                        case "removeall":
                            $(".search-result-asset-case .wrap input").prop("checked", !1), db.find('.iteam-group-case[groupId="selected"]:not(.deactivated)').hasClass("activ") && $(".search-result-asset-case .wrap").remove()
                    }
                    setTimeout(Xa, 200)
                });
                db.on("click", ".iteam-group-case", z => {
                    z = $(z.currentTarget);
                    db.find(".iteam-group-case").removeClass("activ");
                    db.find(".iteam-group-case").removeClass("deactivated");
                    z.addClass("activ");
                    fa.assetCat.el.find('input[name="searchAsset"]').val("");
                    var I = fa.assetCat.el.find(".wrap-search .search-result-asset-case").html();
                    z = z.attr("groupId");
                    let J = $('<div class="search-result-asset-case"></div>');
                    switch (z) {
                        case "selected":
                            for (z = 0; z < ib.length; z++) {
                                var F = ib[z];
                                if (F.el.find('input[type="checkbox"]').is(":checked")) {
                                    var R = "prepend";
                                    F.id.indexOf("otc") +
                                        1 && (R = "append");
                                    J[R](F.el)
                                }
                            }
                            break;
                        default:
                            for (F = 0; F < ib.length; F++) {
                                R = ib[F];
                                if (R.group != z) continue;
                                let W = "prepend";
                                R.id.indexOf("otc") + 1 && (W = "append");
                                J[W](R.el)
                            }
                    }
                    I = J.html() != I;
                    fa.assetCat.el.find(".view-group-assets .wrap-search").html(J);
                    I ? setTimeout(() => {
                        J.addClass("show")
                    }, 100) : J.addClass("show");
                    setTimeout(Xa, 200)
                });
                fa.assetCat.el.on("click", ".search-asset-case .input-reset", z => {
                    z = $(z.currentTarget);
                    z = z.siblings("input");
                    z.val("");
                    z.trigger("input")
                });
                fa.assetCat.el.on("input", 'input[name="searchAsset"]',
                    z => {
                        z = $(z.currentTarget);
                        let I = z.val();
                        if ("" == I) return db.find(".iteam-group-case.activ").click(), db.find(".iteam-group-case").removeClass("deactivated");
                        if (" " == I) return db.find(".iteam-group-case.activ").click(), z.val("");
                        let J = ":" == I[0];
                        db.find(".iteam-group-case").addClass("deactivated");
                        z = [];
                        if (J) try {
                            J = new RegExp(I.substring(1)), z = ib.filter(R => J.test(R.id.toLowerCase()) || J.test(R.title.toLowerCase()))
                        } catch {} else z = ib.filter(R => R.id.toLowerCase().indexOf(I.toLowerCase()) + 1 || R.title.toLowerCase().indexOf(I.toLowerCase()) +
                            1);
                        if (0 < z.length) {
                            let R = fa.assetCat.el.find(".wrap-search .search-result-asset-case").html(),
                                W = $('<div class="search-result-asset-case"></div>');
                            for (let x = 0; x < z.length; x++) {
                                let S = z[x];
                                var F = S.title.split(" ")[0].split("/");
                                let aa = $('<div class="img-bg-asset"></div>');
                                for (let N = 0; N < F.length; N++) aa.append(`<span class="flag-asset ${F[N]}"></span>`);
                                F = "prepend";
                                S.id.indexOf("otc") + 1 && (F = "append");
                                W[F](S.el)
                            }
                            z = W.html() != R;
                            fa.assetCat.el.find(".wrap-search").html(W);
                            z ? setTimeout(() => {
                                    W.addClass("show")
                                },
                                100) : W.addClass("show")
                        } else fa.assetCat.el.find(".wrap-search").html(`
                        <div class="search-noresult-case"> 
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 30 30" class="injected-svg" xmlns:xlink="http://www.w3.org/1999/xlink" role="img">
                                <path d="m22.3 19 7 7a2.34 2.34 0 1 1-3.3 3.32l-7-7A12.22 12.22 0 1 1 22.3 19ZM12.13 4.69a7.5 7.5 0 1 0 7.5 7.5 7.51 7.51 0 0 0-7.5-7.5Zm2.94 10.25a.63.63 0 0 0 0-.88L13 12l2.06-2.06a.63.63 0 1 0-.89-.88l-2.06 2.06-2-2.06a.63.63 0 0 0-.89.88L11.24 12l-2.06 2.06a.63.63 0 0 0 0 .88.64.64 0 0 0 .44.18.66.66 0 0 0 .45-.18l2-2.06 2.06 2.06a.64.64 0 0 0 .44.18.63.63 0 0 0 .5-.18Z" style="fill:#9396a0;fill-rule:evenodd"></path>
                            </svg>
                            <div>${this.translation("action.nofind")}</div>
                        </div> 
                    `);
                        setTimeout(Xa, 200)
                    });
                fa.assetCat.el.on("change", ".view-group-assets .search-result-asset-case .wrap input", z => {
                    z = $(z.currentTarget);
                    !z.is(":checked") && db.find('.iteam-group-case[groupId="selected"]:not(.deactivated)').hasClass("activ") ? (z.parent(".wrap").addClass("hide"), setTimeout(() => {
                        z.parent(".wrap").removeClass("hide");
                        z.parent(".wrap").remove();
                        setTimeout(Xa, 200)
                    }, 300)) : setTimeout(Xa, 200)
                });
                fa.assetCat.el.find(".wrap-group").html(db);
                db.find('.iteam-group-case[groupId="currency"]').click();
                Sa = this.configuration.availableIndicators;
                La = $('\n                <div class="available-indicators-case">\n                    <div class="available-indicators-case-wrap"></div>\n                </div>\n            ');
                Ya = La.find(".available-indicators-case-wrap");
                for (eb = 0; eb < Sa.length; eb++) {
                    let z = Sa[eb];
                    jb = $(`
                    <div class="iteam-indicators-case">
                        <img class="img-icon" src="../img/indicators/${z.otherData.iconImg}" \>
                        <div class="title" >${this.translation(`indicators.names.${z.id}`)}</div>
                        <div class="action icon add" ></div>
                    </div>
                `);
                    jb.on("click", ".action.add", () => {
                        let I = "append";
                        if ("api" == z.id) {
                            if (void 0 != P.indicators.find(F => "api" == F.id)) return;
                            I = "prepend"
                        }
                        let J = sa(z, !0);
                        $a[I](J);
                        setTimeout(() => {
                            J.find(".data-indicator-case").click()
                        }, 300);
                        Ba()
                    });
                    jb.on("dblclick", I => {
                        if (null === I.target.closest(".action.add")) {
                            I = "append";
                            if ("api" == z.id) {
                                if (void 0 != P.indicators.find(F => "api" == F.id)) return;
                                I = "prepend"
                            }
                            var J = sa(z, !0);
                            $a[I](J);
                            setTimeout(() => {
                                J.find(".data-indicator-case").click()
                            }, 300);
                            Ba()
                        }
                    });
                    Ya.append(jb)
                }
                let $a =
                    $('<ul class="used-indicators-list"></ul>');
                $a.sortable({
                    cancel: ".indicator-settings-case,.iteam-data.action",
                    update: (z, I) => {
                        let J = [],
                            F = !1;
                        $("li.iteam-indicator-case").each(function(R) {
                            "api" == $(this).attr("name") && 0 != R && (F = !0);
                            J[R] = P.indicators.find(W => W.tempID == $(this).attr("tempID"))
                        });
                        F ? $a.sortable("cancel") : P.indicators = J
                    }
                });
                "undefined" == typeof P.indicators && (P.indicators = []);
                let Ba = () => {
                        0 == $a.children().length ? Ea.addClass("show") : Ea.removeClass("show")
                    },
                    ca = (z, I) => {
                        try {
                            return +z.toFixed(I.toString().split(".")[1].length)
                        } catch (J) {
                            return z.toFixed(0)
                        }
                    },
                    sa = (z, I = !1) => {
                        I && (z = JSON.parse(JSON.stringify(z)));
                        "undefined" == typeof z.tempID && (z.tempID = L());
                        let J = $(`<li class="iteam-indicator-case" name="${z.id}" tempID="${z.tempID}"></li>`);
                        I && (J.addClass("new"), setTimeout(() => {
                            J.removeClass("new")
                        }, 500));
                        var F = $(`
                    <div class="data-indicator-case">
                        <div class="iteam-data icon iteamIndicator"></div>
                        <div class="iteam-data indicator-name">
                            ${this.translation(`indicators.names.${z.id}`)} <span>(${this.translation("indicators.any.main")})</span> <b class="description"> ${z.description?z.description.split("").join("&shy;"):""}</b>
                        </div>
                        <div class="iteam-data stretch"> </div>
                        <div class="iteam-data action">
                            <div class="icon unwrap"></div>
                            <div class="icon delete"></div>
                        </div>
                    </div>
                `);
                        let R = F.find(".description");
                        J.append(F);
                        J.on("click", ".data-indicator-case", async aa => {
                            null != aa.target.closest(".delete") ? await la(this.translation("prompt.title.confirm"), this.translation("prompt.topic.deleteIndicator", {
                                    name: this.translation(`indicators.names.${z.id}`)
                                }), "deleteIndicator") && (P.indicators = P.indicators.filter(N => N.tempID != z.tempID), J.addClass("remove"), setTimeout(() => {
                                    J.remove();
                                    Ba()
                                }, 300)) : J.hasClass("unwrap") ? J.removeClass("unwrap") : $("li.iteam-indicator-case").hasClass("unwrap") ?
                                ($("li.iteam-indicator-case").removeClass("unwrap"), setTimeout(() => {
                                    J.addClass("unwrap")
                                }, 300)) : J.addClass("unwrap")
                        });
                        F = $('<div class="indicator-settings-case"></div>');
                        let W = $('<div class="descriptionConditionsCase"></div>');
                        for (let aa = 0; aa < z.settings.length; aa++) {
                            let N = z.settings[aa];
                            if (0 == aa) {
                                var x = $(`
                            <div class="iteam-settings">
                                <div class="input-wrap-description">
                                    <input maxlength="90" type="text" name="description" autocomplete="off" placeholder="${this.translation("indicators.settings.description")}" value="${z.description?z.description:""}" />
                                    <div class="delete-address icon clear-description"></div>
                                </div>
                            </div>
                        `);
                                let E = x.find('input[name="description"]');
                                x.find(".clear-description").on("click", () => {
                                    E.val("");
                                    E.trigger("input")
                                });
                                E.on("input", () => {
                                    let H = E.val();
                                    if (" " == H) return E.val("");
                                    if ("" == H) return R.html(""), z.description = void 0;
                                    z.description = H.trim();
                                    R.html(z.description.split("").join("&shy;"))
                                });
                                F.append(x)
                            }
                            x = $(`
                        <div class="iteam-settings" name="${N.id}">
                            <div class="title-settings">${this.translation(`indicators.settings.${N.id}`)}</div>
                            <div class="stretch"></div>
                            <div class="custom-input-select" type="${N.type}"> </div>
                        </div>
                    `);
                            x.on("click", '.custom-input-select[type="select"]', E => {
                                let H = $(E.currentTarget);
                                if (H.hasClass("showselect")) {
                                    if (null != E.target.closest(".option")) {
                                        var Q = $(E.target).attr("value");
                                        E = $(E.target).html();
                                        H.find(".select-case .value").html(E);
                                        N.value = Q
                                    }
                                    return H.removeClass("showselect")
                                }
                                $('.custom-input-select[type="select"]').removeClass("showselect");
                                H.addClass("showselect")
                            });
                            x.on("click", ".custom-input-select button", E => {
                                E = $(E.currentTarget);
                                let H = E.siblings("input"),
                                    Q = +H.val(),
                                    V = JSON.parse(H.attr("parms"));
                                switch (E.attr("action")) {
                                    case "+":
                                        Q += V[3];
                                        Q > V[2] && (Q = V[2]);
                                        break;
                                    case "-":
                                        Q -= V[3], Q < V[1] && (Q = V[1])
                                }
                                H.val(ca(Q, V[3]));
                                N.value = ca(Q, V[3])
                            });
                            x.on("keyup", ".custom-input-select input", E => {
                                let H = $(E.currentTarget),
                                    Q = ["", " ", "-", "."],
                                    V = +H.val();
                                H.val();
                                if (isNaN(V) && !Q.includes(E.key)) H.val(N.value);
                                else {
                                    let ra = JSON.parse(H.attr("parms"));
                                    V > ra[2] && (V = ra[2]);
                                    Q.includes(E.key) || (N.value = ca(V, ra[3]), H.val(ca(V, ra[3])))
                                }
                            });
                            x.on("keydown", ".custom-input-select input", E => {
                                let H = ["Backspace",
                                    "-", "."
                                ];
                                (isNaN(+E.key) && !H.includes(E.key) || " " == E.key) && E.preventDefault()
                            });
                            x.on("change", ".custom-input-select input", E => {
                                E = $(E.currentTarget);
                                let H = +E.val();
                                if (isNaN(H) || "" == E.val()) E.val(N.value);
                                else {
                                    let Q = JSON.parse(E.attr("parms"));
                                    H > Q[2] && (H = Q[2]);
                                    H < Q[1] && (H = Q[1]);
                                    N.value = ca(H, Q[3]);
                                    E.val(ca(H, Q[3]))
                                }
                            });
                            "undefined" == typeof N.value && (N.value = N.values[0]);
                            switch (N.type) {
                                case "inputNotEditable":
                                    var S = $(`
                                <div class="icon copy">
                                    <div class="isCopied icon sort_down hide">${this.translation("action.isCopiedLow")}</div>
                                </div>
                            `);
                                    let E = S.find(".isCopied");
                                    N.value = z.tempID;
                                    x.find(".custom-input-select").append(`
                                <div class="select-case">
                                    <div class="value">${N.value}</div> 
                                     
                                </div>
                            `);
                                    x.find(".custom-input-select .select-case").append(S);
                                    S.on("click", async H => {
                                        await navigator.clipboard.writeText(N.value);
                                        E.removeClass("hide");
                                        setTimeout(() => {
                                            E.addClass("hide")
                                        }, 500)
                                    });
                                    break;
                                case "select":
                                    x.find(".custom-input-select").append(`
                                <div class="select-case">
                                    <div class="value">${this.translation(`indicators.settingsValues.${N.value}.short`)}</div> 
                                    <div class="icon selectwrap"></div>
                                </div>
                            `);
                                    S = $('<div class="option-case"></div>');
                                    for (let H = 0; H < N.values.length; H++) {
                                        let Q = N.values[H];
                                        S.append(`
                                    <div class="option" value="${Q}" >${this.translation(`indicators.settingsValues.${Q}.short`)}</div>
                                `);
                                        "signalDown" == N.id && W.append(`<div class="${this.translation(`indicators.settingsValues.${Q}.short`)}">${this.translation(`indicators.settingsValues.${Q}.long`)}</div>`)
                                    }
                                    x.find(".custom-input-select").append(S);
                                    break;
                                case "number":
                                    x.find(".custom-input-select").append('<button action="-"></button>'), x.find(".custom-input-select").append(`<input type="text" value="${N.value}" parms="${JSON.stringify(N.values)}" />`), x.find(".custom-input-select").append('<button action="+"></button>')
                            }
                            F.append(x);
                            F.append(W);
                            "api" == z.id && W.addClass("hide")
                        }
                        J.append(F);
                        I && ("api" == z.id ? P.indicators.unshift(z) : P.indicators.push(z));
                        return J
                    };
                for (Sa = 0; Sa < P.indicators.length; Sa++) Ya = P.indicators[Sa], null == Ya ? (P.indicators.splice(Sa, 1), Sa--) : $a.append(sa(Ya));
                let Ea = $(`
                <div class="empty-indicators-list">
                    <div class="icon info"></div>
                    <div class="description">${this.translation("indicators.any.emptyIndicators")}</div>
                </div>
            `);
                Ba();
                fa.indicators.el.find(".setting-group-body-case").append('<div class="indicators-selection-case"> </div> ');
                fa.indicators.el.find(".setting-group-body-case .indicators-selection-case").append(La);
                fa.indicators.el.find(".setting-group-body-case .indicators-selection-case").append('<div class="view-indicators-case"></div>');
                fa.indicators.el.find(".setting-group-body-case .indicators-selection-case .view-indicators-case").append($a);
                fa.indicators.el.find(".setting-group-body-case .indicators-selection-case .view-indicators-case").append(Ea);
                La = JSON.parse(JSON.stringify(this.configuration.availableRegulations));
                if ("undefined" == typeof P.regulations || 0 == P.regulations.length) P.regulations = La;
                La = $('<div class="wrap-regulations-list"></div>');
                for (Sa = 0; Sa < P.regulations.length; Sa++) {
                    let z = P.regulations[Sa],
                        I = $('<div class="iteam-settings"></div>');
                    I.append(`<div class="title-settings">${this.translation(`regulations.settings.${z.id}`)}</div>`);
                    I.append('<div class="stretch"></div>');
                    I.append(`<div class="custom-input-select" type="${z.type}"> </div>`);
                    I.on("click", '.custom-input-select[type="select"]', J => {
                        let F = $(J.currentTarget);
                        if (F.hasClass("showselect")) {
                            if (null != J.target.closest(".option")) {
                                var R = $(J.target).attr("value");
                                J = $(J.target).html();
                                F.find(".select-case .value").html(J);
                                z.value = R
                            }
                            return F.removeClass("showselect")
                        }
                        $('.custom-input-select[type="select"]').removeClass("showselect");
                        F.addClass("showselect")
                    });
                    I.on("click", ".custom-input-select button", J => {
                        J = $(J.currentTarget);
                        let F = J.siblings("input"),
                            R = +F.val(),
                            W = JSON.parse(F.attr("parms"));
                        switch (J.attr("action")) {
                            case "+":
                                R += W[3];
                                R > W[2] && (R = W[2]);
                                break;
                            case "-":
                                R -= W[3], R < W[1] && (R = W[1])
                        }
                        F.val(ca(R, W[3]));
                        z.value = ca(R, W[3])
                    });
                    I.on("keyup", ".custom-input-select input", J => {
                        let F = $(J.currentTarget),
                            R = ["", " ", "-", "."],
                            W = +F.val();
                        if (isNaN(W) && !R.includes(J.key)) F.val(z.value);
                        else {
                            let x = JSON.parse(F.attr("parms"));
                            W > x[2] && (W = x[2]);
                            R.includes(J.key) || (z.value = ca(W, x[3]), F.val(ca(W, x[3])))
                        }
                    });
                    I.on("keydown", ".custom-input-select input", J => {
                        let F = ["Backspace", "-", "."];
                        (isNaN(+J.key) && !F.includes(J.key) ||
                            " " == J.key) && J.preventDefault()
                    });
                    I.on("change", ".custom-input-select input", J => {
                        J = $(J.currentTarget);
                        let F = +J.val();
                        if (isNaN(F) || "" == J.val()) J.val(z.value);
                        else {
                            let R = JSON.parse(J.attr("parms"));
                            F > R[2] && (F = R[2]);
                            F < R[1] && (F = R[1]);
                            z.value = ca(F, R[3]);
                            J.val(ca(F, R[3]))
                        }
                    });
                    I.on("click", '.custom-input-select[type="time"]', J => {
                        J = $(J.currentTarget);
                        J.hasClass("showselect");
                        $('.custom-input-select[type="select"]').removeClass("showselect");
                        J.addClass("showselect")
                    });
                    "undefined" == typeof z.value && (z.value =
                        z.values[0]);
                    switch (z.type) {
                        case "select":
                            I.find(".custom-input-select").append(`
                            <div class="select-case">
                                <div class="value">${this.translation(`regulations.settingsValues.${z.value}.short`)}</div> 
                                <div class="icon selectwrap"></div>
                            </div>
                        `);
                            Ya = $('<div class="option-case"></div>');
                            for (eb = 0; eb < z.values.length; eb++) jb = z.values[eb], Ya.append(`
                                <div class="option" value="${jb}" >${this.translation(`regulations.settingsValues.${jb}.short`)}</div>
                            `);
                            I.find(".custom-input-select").append(Ya);
                            break;
                        case "time":
                            let J = $(`
                            <div class="select-case">
                                <div class="value">${z.value}</div>
                                <div class="icon time"></div>
                            </div>
                        `);
                            Ya = z.value.replace("-", ":").split(":");
                            I.find(".custom-input-select").append(J);
                            I.find(".custom-input-select").append(`
                            <div class="option-case time">     
                                <div class="time-case">
                                    <div class="time-select-case" parms="[0,23,1]" name="hFrom"> 
                                        <div class="button up icon"></div> 
                                        <div class="value center">${Ya[0]}</div> 
                                        <div class="button down icon"></div>
                                    </div>
                                    <div class="separator">:</div>
                                    <div class="time-select-case" parms="[0,59,1]" name="mFrom">
                                        <div class="button up icon"></div> 
                                        <div class="value center">${Ya[1]}</div> 
                                        <div class="button down icon"></div>
                                    </div>

                                    <div class="separator">-</div>

                                    <div class="time-select-case" parms="[0,23,1]" name="hTo">
                                        <div class="button up icon"></div> 
                                        <div class="value center">${Ya[2]}</div> 
                                        <div class="button down icon"></div>
                                    </div>
                                    <div class="separator">:</div>
                                    <div class="time-select-case" parms="[0,59,1]" name="mTo">
                                        <div class="button up icon"></div> 
                                        <div class="value center">${Ya[3]}</div> 
                                        <div class="button down icon"></div>
                                    </div>
                                </div>
                            </div>
                        `);
                            I.on("click", ".time-select-case", F => {
                                let R = E => {
                                        E = +E;
                                        return 10 > E ? `0${E}` : `${E}`
                                    },
                                    W = {
                                        hFrom: I.find('.time-select-case[name="hFrom"] .value.center').html(),
                                        mFrom: I.find('.time-select-case[name="mFrom"] .value.center').html(),
                                        hTo: I.find('.time-select-case[name="hTo"] .value.center').html(),
                                        mTo: I.find('.time-select-case[name="mTo"] .value.center').html()
                                    },
                                    x = $(F.currentTarget);
                                var S;
                                let aa, N = JSON.parse(x.attr("parms"));
                                null != F.target.closest(".up") && (S = "up");
                                null != F.target.closest(".down") &&
                                    (S = "down");
                                F = +x.find(".value.center").html();
                                switch (S) {
                                    case "up":
                                        S = F + N[2];
                                        S > N[1] && (S = N[0]);
                                        W[x.attr("name")] = S;
                                        x.find(".value.bottom,.value.top").remove();
                                        aa = $(`<div class="value bottom">${R(S)}</div>`);
                                        x.append(aa);
                                        x.find(".value.center").removeClass("center").addClass("top");
                                        setTimeout(() => {
                                            aa.removeClass("bottom").addClass("center")
                                        }, 100);
                                        break;
                                    case "down":
                                        S = F - N[2], S < N[0] && (S = N[1]), W[x.attr("name")] = S, x.find(".value.bottom,.value.top").remove(), aa = $(`<div class="value top">${R(S)}</div>`), x.append(aa),
                                            x.find(".value.center").removeClass("center").addClass("bottom"), setTimeout(() => {
                                                aa.removeClass("top").addClass("center")
                                            }, 100)
                                }
                                z.value = `${R(W.hFrom)}:${R(W.mFrom)}-${R(W.hTo)}:${R(W.mTo)}`;
                                J.find(".value").html(z.value)
                            });
                            break;
                        case "number":
                            I.find(".custom-input-select").append('<button action="-"></button>'), I.find(".custom-input-select").append(`<input type="text" value="${z.value}" parms="${JSON.stringify(z.values)}" />`), I.find(".custom-input-select").append('<button action="+"></button>')
                    }
                    La.append(I)
                }
                fa.regulations.el.find(".setting-group-body-case").append('<div class="regulations-selection-case"></div>');
                fa.regulations.el.find(".setting-group-body-case .regulations-selection-case").append(La);
                let za = () => {
                        0 == ta.children().length ? ba.addClass("show") : ba.removeClass("show")
                    },
                    xa = {},
                    G = this.configuration.availableMartingaleSettings,
                    Ha = (z, I = !1) => {
                        I && (0 == P.martingale.length ? z = JSON.parse(JSON.stringify(G)) : 0 < ta.find(".iteam-martingale-case.unwrap").length ? (z = ta.find(".iteam-martingale-case.unwrap").attr("sortid"), z = JSON.parse(JSON.stringify(xa[z]))) : z = JSON.parse(JSON.stringify(P.martingale[P.martingale.length -
                            1])));
                        let J = {};
                        var F = L();
                        xa[F] = z;
                        let R = $(`<li class="iteam-martingale-case" sortId="${F}" ></li>`);
                        I && (R.addClass("new"), setTimeout(() => {
                            R.removeClass("new")
                        }, 300));
                        R.append(`
                    <div class="data-martingale-case">
                        <div class="iteam-data martingale-name"> ${this.translation("martingale.step")} \u2116&ensp;</div>
                        <div class="iteam-data stretch"></div>
                        <div class="iteam-data action">
                            <div class="icon unwrap"></div>
                            <div class="icon delete"></div>
                        </div>
                    </div>
                `);
                        R.on("click", ".data-martingale-case", function(W) {
                            if (null != W.target.closest(".delete")) try {
                                P.martingale.splice(R.index(), 1), R.addClass("remove"), setTimeout(() => {
                                    R.remove();
                                    za()
                                }, 300)
                            } catch (x) {} else R.hasClass("unwrap") ? R.removeClass("unwrap") : $("li.iteam-martingale-case").hasClass("unwrap") ? ($("li.iteam-martingale-case").removeClass("unwrap"), setTimeout(() => {
                                R.addClass("unwrap")
                            }, 300)) : R.addClass("unwrap")
                        });
                        F = $('<div class="martingale-settings-case"></div>');
                        for (let W = 0; W < z.length; W++) {
                            let x =
                                z[W];
                            "undefined" == typeof x.value && (x.value = x.values[0]);
                            J[x.id] = $(`<div class="custom-input-select ${x.id}"  type="${x.type}" ${"minProfit"==x.id?`value="${x.value}"`:""}></div>`);
                            let S = $(`<div class="iteam-settings" value="${x.value}" name="${x.id}"> </div>`);
                            switch (x.type) {
                                case "verticalNumber":
                                    J[x.id].append(`
                                <div class="select-case">
                                    <div class="value">${x.value}</div>
                                    <div> % </div>
                                </div>
                                <div class="option-case time">     
                                    <div class="time-case">
                                        <div class="time-select-case" parms="${JSON.stringify(x.values)}" > 
                                            <div class="button up icon"></div> 
                                            <div class="value center">${x.value}</div> 
                                            <div class="button down icon"></div>
                                        </div> 
                                    </div>
                                </div>
                            `);
                                    J[x.id].on("click", N => {
                                        N = $(N.currentTarget);
                                        $('.custom-input-select[type="select"]').removeClass("showselect");
                                        N.addClass("showselect")
                                    });
                                    let aa;
                                    J[x.id].on("mouseup progCall mouseout", ".time-select-case", N => {
                                        if ("mouseout" == N.type) return clearInterval(aa);
                                        if ("mouseup" == N.type && (clearInterval(aa), J[x.id].hasClass("progCall"))) {
                                            J[x.id].removeClass("progCall");
                                            return
                                        }
                                        "progCall" == N.type && J[x.id].addClass("progCall");
                                        var E = va => {
                                            va = +va;
                                            return 10 > va ? `0${va}` : `${va}`
                                        };
                                        let H = +J[x.id].attr("value"),
                                            Q = $(N.currentTarget),
                                            V, ra, oa = JSON.parse(Q.attr("parms"));
                                        null != N.target.closest(".up") && (V = "up");
                                        null != N.target.closest(".down") && (V = "down");
                                        let Aa = H;
                                        switch (V) {
                                            case "up":
                                                N = Aa + ("progCall" == N.type ? 10 : oa[2]);
                                                N > oa[1] && (N = oa[0]);
                                                H = N;
                                                Q.find(".value.bottom,.value.top").remove();
                                                ra = $(`<div class="value bottom">${E(N)}</div>`);
                                                Q.append(ra);
                                                Q.find(".value.center").removeClass("center").addClass("top");
                                                setTimeout(() => {
                                                    ra.removeClass("bottom").addClass("center")
                                                }, 100);
                                                break;
                                            case "down":
                                                N =
                                                    Aa - ("progCall" == N.type ? 10 : oa[2]), N < oa[0] && (N = oa[1]), H = N, Q.find(".value.bottom,.value.top").remove(), ra = $(`<div class="value top">${E(N)}</div>`), Q.append(ra), Q.find(".value.center").removeClass("center").addClass("bottom"), setTimeout(() => {
                                                        ra.removeClass("top").addClass("center")
                                                    }, 100)
                                        }
                                        E = E(H);
                                        if (isNaN(E)) return clearInterval(aa);
                                        x.value = E;
                                        J[x.id].attr("value", x.value);
                                        J[x.id].find(".select-case .value").html(x.value)
                                    });
                                    J[x.id].on("mousedown", ".time-select-case", N => {
                                        $(N.currentTarget);
                                        let E;
                                        null != N.target.closest(".up") &&
                                            (E = "up");
                                        null != N.target.closest(".down") && (E = "down");
                                        void 0 != E && (aa = setInterval(function() {
                                            J[x.id].find(`.${E}`).trigger("progCall")
                                        }, 300));
                                        return !1
                                    });
                                    break;
                                case "select":
                                    J[x.id].append(`
                                <div class="select-case">
                                    <div class="value">${this.translation(`martingale.settingsValues.${x.value}.short`)}</div>
                                    <div class="icon selectwrap"></div>
                                </div>
                                <div class="option-case"></div> 
                            `);
                                    for (let N = 0; N < x.values.length; N++) J[x.id].find(".option-case").append(`
                                    <div class="option" value="${x.values[N]}" >${this.translation(`martingale.settingsValues.${x.values[N]}.short`)}</div>`);
                                    J[x.id].on("click", N => {
                                        let E = $(N.currentTarget);
                                        if (E.hasClass("showselect")) {
                                            if (null != N.target.closest(".option")) {
                                                var H = $(N.target).attr("value");
                                                N = $(N.target).html();
                                                E.find(".select-case .value").html(N);
                                                x.value = H;
                                                S.attr("value", x.value)
                                            }
                                            return E.removeClass("showselect")
                                        }
                                        $('.custom-input-select[type="select"]').removeClass("showselect");
                                        E.addClass("showselect")
                                    });
                                    break;
                                case "number":
                                    J[x.id].append('<button action="-"></button>'), J[x.id].append(`<input type="text" value="${x.value}" parms="${JSON.stringify(x.values)}" />`), J[x.id].append('<button action="+"></button>'), J[x.id].on("click", "button", N => {
                                        N = $(N.currentTarget);
                                        let E = N.siblings("input"),
                                            H = +E.val(),
                                            Q = JSON.parse(E.attr("parms"));
                                        switch (N.attr("action")) {
                                            case "+":
                                                H += Q[3];
                                                H > Q[2] && (H = Q[2]);
                                                break;
                                            case "-":
                                                H -= Q[3], H < Q[1] && (H = Q[1])
                                        }
                                        E.val(ca(H, Q[3]));
                                        x.value = ca(H, Q[3]);
                                        S.attr("value", x.value)
                                    }), J[x.id].on("keyup",
                                        "input", N => {
                                            let E = $(N.currentTarget),
                                                H = ["", " ", "-", "."],
                                                Q = +E.val();
                                            if (isNaN(Q) && !H.includes(N.key)) E.val(x.value);
                                            else {
                                                let V = JSON.parse(E.attr("parms"));
                                                Q > V[2] && (Q = V[2]);
                                                H.includes(N.key) || (x.value = ca(Q, V[3]), S.attr("value", x.value), E.val(ca(Q, V[3])))
                                            }
                                        }), J[x.id].on("keydown", "input", N => {
                                        let E = ["Backspace", "-", "."];
                                        (isNaN(+N.key) && !E.includes(N.key) || " " == N.key) && N.preventDefault()
                                    }), J[x.id].on("change", "input", N => {
                                        N = $(N.currentTarget);
                                        let E = +N.val();
                                        if (isNaN(E) || "" == N.val()) N.val(x.value);
                                        else {
                                            let H =
                                                JSON.parse(N.attr("parms"));
                                            E > H[2] && (E = H[2]);
                                            E < H[1] && (E = H[1]);
                                            x.value = ca(E, H[3]);
                                            S.attr("value", x.value);
                                            N.val(ca(E, H[3]))
                                        }
                                    })
                            }
                            0 < W && (1 == W ? (S.append(`<div class="title-settings">${this.translation("martingale.settings.minProfit")}</div>`), S.append(J.minProfit), S.append('<div class="stretch"></div>'), S.append(J.actionDecreaseProfit)) : (S.append(`<div class="title-settings">${this.translation(`martingale.settings.${x.id}`)}</div>`), S.append('<div class="stretch"></div>'), S.append(J[x.id])), F.append(S))
                        }
                        R.append(F);
                        I && P.martingale.push(z);
                        return R
                    };
                if ("undefined" == typeof P.martingale || 0 == P.martingale.length) P.martingale = [];
                let ta = $('<ul class="step-martingale-list"></ul>');
                ta.sortable({
                    cancel: ".martingale-settings-case,.iteam-data.action",
                    update: (z, I) => {
                        let J = [];
                        $("li.iteam-martingale-case").each(function(F, R) {
                            J.push(xa[$(R).attr("sortid")])
                        });
                        P.martingale = J
                    }
                });
                for (La = 0; La < P.martingale.length; La++) ta.append(Ha(P.martingale[La]));
                La = $(`
                <div class="add-iteam-martingale ">
                    <div class="button">
                        <div class="icon addMartin"></div>
                        <div class="title">${this.translation("martingale.addStep")}</div>
                    </div>
                </div>
            `);
                La.on("click", ".button", z => {
                    let I = Ha(null, !0);
                    setTimeout(() => {
                        I.find(".data-martingale-case").click()
                    }, 300);
                    ta.append(I);
                    za()
                });
                let ba = $(`
                <div class="empty-martingale-list"> 
                    <div class="icon info"></div>
                    <div class="description">${this.translation("martingale.any.emptyMartingale")}</div>
                </div>
            `);
                za();
                fa.martingale.el.find(".setting-group-body-case").append('<div class="martingale-selection-case"></div>');
                fa.martingale.el.find(".setting-group-body-case .martingale-selection-case").append(ta);
                fa.martingale.el.find(".setting-group-body-case .martingale-selection-case").append(ba);
                fa.martingale.el.find(".setting-group-body-case .martingale-selection-case").append(La);
                $("body .full-screen-popup").html(ma);
                ma.find('.nav-settings-cat-case .iteams-nav-case[category="assetCat"]').click();
                setTimeout(() => {
                    $("body .full-screen-popup").addClass("full-popup-show")
                }, 50)
            }, Z = async Ia => new Promise((fb, Xa) => {
                let na = $("<img />");
                qrcode.toDataURL(Ia, function(fa, P) {
                    na.attr("src", P);
                    fb(na)
                })
            }), la = async (Ia, fb, Xa, na = []) => 0 < $(`body .prompt-case#${Xa}`).length ? !1 : new Promise((fa, P) => {
                let qa = $(`
                    <div class="wrap-prompt-case">
                        <div class="prompt-case" id="${Xa}">
                            <div class="head-case">
                                <div class="title">${Ia}</div>
                            </div>
                            <div class="content-case">
                                 
                            </div>
                            <div class="button-case">
                            </div>
                        </div>
                    </div>
                `);
                qa.find(".prompt-case .content-case").append(fb);
                if (0 == na.length) {
                    P = $(`<button class="ok">${this.translation("prompt.button.yes")}</button>`);
                    let ma = $(`<button>${this.translation("prompt.button.cancel")}</button>`);
                    P.on("click", La => {
                        fa(!0);
                        qa.find(".prompt-case").removeClass("show");
                        setTimeout(() => {
                            qa.remove()
                        }, 100)
                    });
                    ma.on("click", La => {
                        fa(!1);
                        qa.find(".prompt-case").removeClass("show");
                        setTimeout(() => {
                            qa.remove()
                        }, 100)
                    });
                    qa.find(".button-case").append(P);
                    qa.find(".button-case").append(ma)
                } else na.forEach(ma => {
                    qa.find(".button-case").append(ma.el);
                    ma.el.on("click", () => {
                        fa(ma.resolve);
                        qa.find(".prompt-case").removeClass("show");
                        setTimeout(() => {
                            qa.remove()
                        }, 100)
                    })
                });
                P = $('<div class="button-close icon"></div>');
                P.on("click", ma => {
                    fa(!1);
                    qa.find(".prompt-case").removeClass("show");
                    setTimeout(() => {
                        qa.remove()
                    }, 100)
                });
                qa.find(".head-case").append(P);
                $("body").append(qa);
                setTimeout(() => {
                    qa.find(".prompt-case").addClass("show")
                }, 100)
            }), Ca = async Ia => new Promise(async (fb, Xa) => {
                    let na, fa = {};
                    try {
                        na = "object" == typeof Ia ?
                            Ia : this.storage.strategies.find(P => P.id == Ia);
                        if (void 0 == na) throw "strategies not exist";
                        fa.assets = na.assets;
                        fa.indicatorsSetings = na.indicators.map(P => ({
                            id: P.id,
                            description: P.description,
                            indparms: P.settings.filter(qa => "signalUp" != qa.id && "signalDown" != qa.id).reduce((qa, ma) => ({
                                ...qa,
                                [ma.id]: isNaN(+ma.value) ? ma.value : +ma.value
                            }), {}),
                            conditions: P.settings.filter(qa => "signalUp" == qa.id || "signalDown" == qa.id).reduce((qa, ma) => ({
                                ...qa,
                                [ma.id]: ma.value
                            }), {})
                        }));
                        fa.martingaleSetings = na.martingale.map(P => P.reduce((qa,
                            ma) => ({
                            ...qa,
                            [ma.id]: isNaN(+ma.value) ? ma.value : +ma.value
                        }), {}));
                        fa.regulationsSetings = na.regulations.reduce((P, qa) => ({
                            ...P,
                            [qa.id]: isNaN(+qa.value) ? qa.value : +qa.value
                        }), {});
                        fb(fa)
                    } catch (P) {
                        Xa(P)
                    }
                }), Ra = (Ia, fb, Xa, na = this.translation("prompt.button.ok")) => {
                    if (0 < $(`body .min-popup-case#${Xa}`).length) return !1;
                    let fa = $(`
                <div class="wrap-min-popup-case">
                    <div class="min-popup-case" id="${Xa}">
                        <div class="head-case"> 
                            <div class="title">${Ia}</div>
                        </div>
                        <div class="content-case"></div>
                        <div class="button-case">
                        </div>
                    </div>
                </div>
            `);
                    Ia = $('<div class="button-close icon"></div>');
                    na = $(`<button class="ok">${na}</button>`);
                    na.on("click", P => {
                        fa.find(".min-popup-case").removeClass("show");
                        setTimeout(() => {
                            fa.remove()
                        }, 100)
                    });
                    Ia.on("click", P => {
                        fa.find(".min-popup-case").removeClass("show");
                        setTimeout(() => {
                            fa.remove()
                        }, 100)
                    });
                    fa.find(".head-case").append(Ia);
                    fa.find(".content-case").append(fb);
                    fa.find(".button-case").append(na);
                    $("body").append(fa);
                    setTimeout(() => {
                        fa.find(".min-popup-case").addClass("show")
                    }, 100);
                    return fa
                },
                b = async Ia => new Promise((fb, Xa) => {
                    setTimeout(() => fb(!0), Ia)
                });
        var vb = $('<div class="all-curtain-blur"></div>'),
            rb = $('<ul class="lang-list-case popup-case"> </ul>');
        for (var sb = 0; sb < this.configuration.availableLanguages.length; sb++) {
            var ob = this.configuration.availableLanguages[sb];
            rb.append(`
                <li class="iteam-lang-case" langId="${ob.id}">
                    <div class="lang-title">${this.translation(ob.title)}</div>
                    <img src="../img/flag/${ob.flag}" class="flag"/>
                </li>
            `)
        }
        rb.on("click", "li.iteam-lang-case", async Ia => {
            Ia = $(Ia.currentTarget);
            await chrome.runtime.sendMessage({
                sender: "panell",
                event: "changeAppLanguage",
                value: Ia.attr("langId")
            }) && location.reload()
        });
        let wb = $(`
            <div class="main-header-case">
                <div class="logo-case"></div>
                <div class="stretch"> </div>
                <div class="user-language-case">
                    <div class="language-selection-case">
                        <div class="current-language-case">
                            <img src="../img/flag/${this.choseLanguageData.flag}" class="flag"/>
                            <div class="title">${this.translation(this.choseLanguageData.title)}</div>
                            <div class="select popup-case"></div>
                        </div>
                    </div> 
                </div>
            </div>    
        `);
        wb.find(".language-selection-case").append(rb);
        wb.find(".current-language-case").on("click", ".select", Ia => {
            $(Ia.currentTarget);
            wb.find(".language-selection-case").hasClass("popup-show") ? wb.find(".language-selection-case").removeClass("popup-show") : wb.find(".language-selection-case").addClass("popup-show")
        });
        $("header").html(wb);
        rb = async Ia => {
            let fb = async fa => {
                let P = fa.id,
                    qa = (Ba, ca = !1) => {
                        setTimeout(() => {
                                Ba.css({
                                    "max-height": `${na.height()+na.offset().top-Ba.offset().top-10}px`
                                })
                            }, ca ? 400 :
                            0)
                    },
                    ma = async (Ba, ca, sa = !1) => {
                        let Ea = x => {
                                let S = V => {
                                        let ra = $('<div class="iteam-body-case"></div>');
                                        for (let Wa in V) {
                                            let Ka = V[Wa];
                                            switch (Wa) {
                                                case "assets":
                                                    var oa = $(`
                                            <div class="any-data-case assets">
                                                <div class="any-data-head">${this.translation("logsBook.iteamTitle.assets")}</div>
                                                <div class="any-data-body"></div>
                                            </div>
                                        `);
                                                    let ab = oa.find(".any-data-body");
                                                    Ka.forEach(ua => {
                                                        ab.append(`<div class="any-data-iteam-asset">${ua}</div>`)
                                                    });
                                                    ra.append(oa);
                                                    break;
                                                case "indicatorsSetings":
                                                    oa = $(`
                                            <div class="any-data-case indicators">
                                                <div class="any-data-head">${this.translation("logsBook.iteamTitle.indicators")}</div>
                                                <div class="any-data-body"></div>
                                            </div>
                                        `);
                                                    let U = oa.find(".any-data-body");
                                                    Ka.forEach((ua, Pa) => {
                                                        let Ua = $(`
                                                <div class="any-data-iteam-indicator-case">
                                                    <div class="any-data-iteam-indicator-head">${this.translation("logsBook.iteamTitle.indicator",{index:Pa+1,name:this.translation(`indicators.names.${ua.id}`)})}</div>
                                                    <div class="any-data-iteam-indicator-body"></div> 
                                                </div>
                                            `),
                                                            Ma = Ua.find(".any-data-iteam-indicator-body");
                                                        for (let cb in ua) {
                                                            let bb = ua[cb];
                                                            switch (cb) {
                                                                case "indparms":
                                                                    var wa = $(`
                                                            <div class="indparms-indicator-case iteam-indicator">
                                                                <!---<div class="indparms-indicator-head">${this.translation("logsBook.iteamTitle.parms")}</div>--->
                                                                <div class="indparms-indicator-body"></div>
                                                            </div>
                                                        `),
                                                                        Za = wa.find(".indparms-indicator-body");
                                                                    for (let Va in bb)
                                                                        if ("timeInspection" != Va || 0 == Pa) {
                                                                            var Fa = bb[Va];
                                                                            Fa = $(`
                                                                <div class="iteam-setting-value-case">
                                                                    <div class="iteam-setting-name">${this.translation(`indicators.settings.${Va}`)}</div>
                                                                    <div class="iteam-setting-value">${isNaN(+Fa)&&"indId"!=Va?this.translation(`indicators.settingsValues.${Fa}`):Fa}</div>
                                                                </div>
                                                            `);
                                                                            Za.append(Fa)
                                                                        } Ma.append(wa);
                                                                    break;
                                                                case "conditions":
                                                                    wa = $(`
                                                            <div class="conditions-indicator-case iteam-indicator">
                                                                <!---<div class="conditions-indicator-head">${this.translation("logsBook.iteamTitle.conditions")}</div>--->
                                                                <div class="conditions-indicator-body"></div>
                                                            </div>
                                                        `).find(".conditions-indicator-body");
                                                                    for (let Va in bb) Za = bb[Va], Za = $(`
                                                                <div class="iteam-conditions-case ${Va}">
                                                                    <div class="iteam-conditions-name">${this.translation(`logsBook.iteamTitle.${Va}`)}</div>
                                                                    <div class="iteam-conditions-value">${this.translation(`indicators.settingsValues.${Za}.long`)}</div>
                                                                </div>
                                                            `), wa.append(Za);
                                                                    Ma.append(wa)
                                                            }
                                                        }
                                                        U.append(Ua)
                                                    });
                                                    ra.append(oa);
                                                    break;
                                                case "regulationsSetings":
                                                    oa = $(`
                                            <div class="any-data-case regulations">
                                                <div class="any-data-head">${this.translation("logsBook.iteamTitle.regulations")}</div>
                                                <div class="any-data-body"></div>
                                            </div>
                                        `);
                                                    var Aa = oa.find(".any-data-body");
                                                    for (let ua in Ka) {
                                                        var va = Ka[ua];
                                                        va = $(`
                                                <div class="iteam-regulation-value-case ${ua}">
                                                    <div class="iteam-regulation-name">${this.translation(`regulations.settings.${ua}`)}</div>
                                                    <div class="iteam-regulation-value">${isNaN(+va)&&"timeFrom"!=ua?this.translation(`regulations.settingsValues.${va}`):va}</div>
                                                </div>
                                            `);
                                                        Aa.append(va)
                                                    }
                                                    ra.append(oa);
                                                    break;
                                                case "martingaleSetings":
                                                    oa = $(`
                                            <div class="any-data-case martingaleSetings">
                                                <div class="any-data-head">${this.translation("logsBook.iteamTitle.martingaleSetings")}</div>
                                                <div class="any-data-body"></div>
                                            </div>
                                        `);
                                                    let Da = oa.find(".any-data-body");
                                                    Ka.forEach((ua, Pa) => {
                                                        Pa = $(`
                                                <div class="martin-step-case">
                                                    <div class="martin-step-head">${this.translation("martingale.stepn",{index:Pa+1})}</div>
                                                    <div class="martin-step-body"></div>
                                                </div>
                                            `);
                                                        let Ua = Pa.find(".martin-step-body");
                                                        for (let wa in ua)
                                                            if ("actionDecreaseProfit" != wa && "autoRatio" != wa) {
                                                                var Ma = ua[wa];
                                                                Ma = $(`
                                                    <div class="martin-step-seting-case ${wa}">
                                                        <div class="martin-step-seting-name">${"minProfit"==wa?`${this.translation(`martingale.settings.${wa}`)} ${Ma} %`:this.translation(`martingale.settings.${wa}`)}</div>
                                                        <div class="martin-step-seting-value">${"ratio"==wa?"on"==ua.autoRatio?this.translation("martingale.settingsValues.autoCalculation"):Ma:"minProfit"==wa?this.translation(`martingale.settingsValues.${ua.actionDecreaseProfit}`):isNaN(+Ma)?this.translation(`martingale.settingsValues.${Ma}`):Ma}</div>
                                                    </div>
                                                `);
                                                                Ua.append(Ma)
                                                            } Da.append(Pa)
                                                    });
                                                    ra.append(oa);
                                                    break;
                                                case "updateAssets":
                                                    oa = $('\n                                            <div class="any-data-case updateAssets"> \n                                                <div class="any-data-body"></div>\n                                            </div>\n                                        ');
                                                    Aa = oa.find(".any-data-body");
                                                    for (let ua in Ka) va = Ka[ua], va = $(`
                                                <div class="asset-data-case ${va.available?"":"no-available"} ${va.isChange?"is-change":""}">
                                                    <div class="asset-title-case">${ua}</div>
                                                    <div class="asset-value-case">
                                                        <div class="available-value">${va.available?"&#10004;":"&#10008;"}</div>
                                                        <div class="profit-value">${va.profit}%</div>
                                                        <div class="minExp-value">${va.minExp}c.</div>
                                                    </div>
                                                </div>
                                            `), Aa.append(va);
                                                    ra.append(oa)
                                            }
                                        }
                                        return ra
                                    },
                                    aa = $('\n                            <div class="iteam-logbook-wrap">\n                                <div class="iteam-head-case"> \n                                    <div class="iteam-date"></div>\n                                    <div class="iteam-title"></div>\n                                </div>\n                            </div>\n                        '),
                                    N = aa.find(".iteam-head-case"),
                                    E = N.find(".iteam-date"),
                                    H = N.find(".iteam-title"),
                                    Q = $('\n                            <div class="icon unwrap"></div>\n                        ');
                                9 < JSON.stringify(x.anyData).length && (aa.addClass("wrap"), N.append(Q), Q.on("click", () => {
                                    aa.hasClass("wrap") ? (aa.removeClass("wrap"), Q.addClass("wrap")) : (aa.addClass("wrap"), Q.removeClass("wrap"))
                                }));
                                switch (x.type.split(":")[1]) {
                                    case "launch":
                                        E.html(moment(1E3 * x.timestamp).format("DD.MM.YYYY HH:mm:ss"));
                                        H.html(this.translation("logsBook.iteamTitle.launch"));
                                        aa.append(S(x.anyData));
                                        break;
                                    case "changes":
                                        E.html(moment(1E3 * x.timestamp).format("DD.MM.YYYY HH:mm:ss"));
                                        H.html(this.translation("logsBook.iteamTitle.changed"));
                                        aa.append(S(x.anyData));
                                        break;
                                    case "stopped":
                                        E.html(moment(1E3 * x.timestamp).format("DD.MM.YYYY HH:mm:ss"));
                                        H.html(x.log.mark.map(V => this.translation(V, x.log.parms)).join(" "));
                                        break;
                                    case "note":
                                        E.html(moment(1E3 * x.timestamp).format("DD.MM.YYYY HH:mm:ss"));
                                        H.html(x.log.mark.map(V => this.translation(V, x.log.parms)).join(" "));
                                        H.attr("title", H.text());
                                        break;
                                    case "updateAssets":
                                        E.html(moment(1E3 *
                                            x.timestamp).format("DD.MM.YYYY HH:mm:ss"));
                                        H.html(this.translation("logsBook.iteamTitle.informationAssets"));
                                        aa.append(S(x.anyData));
                                        break;
                                    default:
                                        return
                                }
                                aa.find("f").on("click", V => {
                                    V = $(V.currentTarget);
                                    z.val(V.html());
                                    z.trigger("input")
                                });
                                return aa
                            },
                            za = async x => {
                                I.html('<div class="curtain-find-case"> <img src="../img/svg/loading_2_black.svg" /> </div>');
                                for (var S = 0; x < G.length && S < (W.pageLimit || 300); x++, S++) {
                                    var aa = Ea(G[x]);
                                    I.append(aa);
                                    var N = I[0].scrollHeight > I[0].clientHeight ? !0 : !1;
                                    if (N) {
                                        aa.remove();
                                        W.pageLimit = S;
                                        break
                                    }
                                }
                                let E = W.pageLimit;
                                J.html('<div class="nav-button-case hide hideEmpty">0</div>');
                                x = $('<div class="nav-button-case prev"> <div class="icon prev-icon"> </div>');
                                N = $('<div class="nav-button-case next"> <div class="icon next-icon"> </div>');
                                for (let H = 0; H < Math.ceil(G.length / E); H++) 0 == H && J.html(""), S = $(`<div class="nav-button-case">${H+1}</div>`), 0 == H && J.append(x), S.on("click", async () => {
                                        W.forIteam = 0 == H ? 0 : H * E;
                                        za(W.forIteam)
                                    }), aa = W.forIteam / E, aa == H ? (S.addClass("select"), H + 1 == Math.ceil(G.length /
                                        E) ? N.addClass("hide-no-click") : (N.removeClass("hide-no-click"), N.on("click", () => {
                                        W.forIteam = (H + 1) * E;
                                        za(W.forIteam)
                                    })), 0 == H ? x.addClass("hide-no-click") : (x.removeClass("hide-no-click"), x.on("click", () => {
                                        W.forIteam = (H - 1) * E;
                                        za(W.forIteam)
                                    }))) : S.removeClass("select"), H <= aa ? 2 < aa - H ? S.addClass(`hide hide${aa-H}`) : S.removeClass("hide") : 2 < H - aa ? S.addClass(`hide hide${H-aa}`) : S.removeClass("hide"), H + 1 != Math.ceil(G.length / E) && 0 != H || S.removeClass("hide"), (6 > H - aa && -6 < H - aa || 0 == H || H + 1 == Math.ceil(G.length / E)) && J.append(S),
                                    H + 1 == Math.ceil(G.length / E) && J.append(N);
                                z.trigger("input");
                                ta = G.length
                            }, xa = x => {
                                x = (x || G.length) - ta;
                                R.html(999 < x ? "999+" : x);
                                0 < x ? R.removeClass("hide") : R.addClass("hide")
                            }, G = [];
                        G = await new Promise((x, S) => {
                            let aa = indexedDB.open("pocketOptionRobot", 1);
                            aa.onsuccess = async () => {
                                let N = aa.result.transaction("logsbook", "readonly").objectStore("logsbook").index("expertId_idx"),
                                    E = N.count(Ba);
                                E.onsuccess = () => {
                                    E = E.result
                                };
                                let H = N.getAll(Ba, 300);
                                H.onsuccess = () => {
                                    if (void 0 !== H.result) {
                                        let Q = H.result;
                                        if (E > Q.length) {
                                            Q =
                                                Q.concat(Array(E - Q.length));
                                            let V = N.getAll(Ba);
                                            V.onsuccess = () => {
                                                void 0 !== V.result && (G = V.result);
                                                this.runEvent("logsbookLoad", !0)
                                            }
                                        } else setTimeout(() => {
                                            this.runEvent("logsbookLoad", !0)
                                        }, 100);
                                        x(Q)
                                    } else x([])
                                };
                                H.onerror = Q => {
                                    x([])
                                }
                            }
                        });
                        var Ha = ca.find(x => x.id == Ba);
                        let ta = G.length,
                            ba = $(`
                        <div class="logbook-strategy-case">
                            <div class="logbook-strategy-filter-case">
                                <div class="input-filter-wrap">
                                    <input type="text" name="logbookFilter" placeholder="${this.translation("logsBook.filter")}" autocomplete="off"/>
                                    <div class="input-reset icon"></div>
                                </div>
                                <div class="update-logbook-case">
                                    <div class="icon updateHistory icon-update-logbook"></div>
                                    <div class="count-new-write icon sort_down hide"> 9 </div>
                                </div>
                            </div> 
                            <div class="logbook-strategy-body find">
                                <div class="curtain-find-case"> <img src="../img/svg/loading_2_black.svg" /> </div>
                            </div>
                            <div class="page-nav-case">
                                <div class="nav-button-case hide hideEmpty">${0}</div> 
                            </div>
                        </div>
                    `),
                            z = ba.find('input[name="logbookFilter"]'),
                            I = ba.find(".logbook-strategy-body"),
                            J = ba.find(".page-nav-case");
                        ca = ba.find(".input-reset.icon");
                        let F = ba.find(".icon-update-logbook"),
                            R = ba.find(".count-new-write");
                        Ha = Ra(this.translation("logsBook.strategyLogbook", {
                            strategy: "undefined" == typeof Ha.data.userTitle ? this.translation(Ha.data.title) : Ha.data.userTitle
                        }), ba, L(), this.translation("action.close"));
                        if (0 == G.length) return ba.append(`
                            <div class="empty-log-book">${this.translation("logsBook.emptyLogBook")}</div>
                        `);
                        ba.addClass("log-book-view");
                        let W = {
                            forIteam: 0
                        };
                        za(0);
                        this.on("windowResize", "logsbook", () => {
                            W = {
                                forIteam: 0
                            };
                            za(0)
                        });
                        z.on("input", () => {
                            let x = z.val();
                            " " == x && (x = "", z.val(x));
                            if ("" == x) ba.find(".iteam-logbook-wrap").removeClass("highlighted");
                            else {
                                var S = new RegExp(x.toLowerCase());
                                $(".iteam-logbook-wrap").each(function(aa) {
                                    aa = $(this);
                                    let N = aa.text().toLowerCase();
                                    S.test(N) ? aa.addClass("highlighted") : aa.removeClass("highlighted")
                                })
                            }
                        });
                        ca.on("click", () => {
                            z.val("");
                            z.trigger("input")
                        });
                        F.on("click", async () => {
                            I.addClass("find");
                            await new Promise((x, S) => {
                                let aa = indexedDB.open("pocketOptionRobot", 1);
                                aa.onsuccess = async () => {
                                    let N = aa.result.transaction("logsbook", "readonly").objectStore("logsbook").index("expertId_idx"),
                                        E = N.count(Ba);
                                    E.onsuccess = async () => {
                                        E = E.result;
                                        let H = 0;
                                        if (E > G.length) H = E - G.length;
                                        else return x(!0);
                                        let Q = N.openCursor(Ba, "prev"),
                                            V = [];
                                        Q.onsuccess = async () => {
                                            if (0 != H) H--, V.unshift(Q.result.value), Q.result.continue();
                                            else return G = G.concat(V), x(!0)
                                        }
                                    }
                                }
                            });
                            I.removeClass("find");
                            za(W.forIteam);
                            xa()
                        });
                        Ha.on("remove", () => {
                            delete this.subscription.logsBookNewDate
                        });
                        this.on("logsBookNewDate", "popupLogsBook", async () => {
                            let x = await new Promise((S, aa) => {
                                let N = indexedDB.open("pocketOptionRobot", 1);
                                N.onsuccess = async () => {
                                    let E = N.result.transaction("logsbook", "readonly").objectStore("logsbook").index("expertId_idx").count(Ba);
                                    E.onsuccess = () => {
                                        E = E.result;
                                        S(E)
                                    }
                                }
                            });
                            xa(x)
                        });
                        this.on("logsbookLoad", "unique", () => {
                            if (sa) {
                                I.addClass("find");
                                let x = G.findIndex(S => "undefined" != typeof S.log && "object" ==
                                    typeof S.log.parms && JSON.stringify(S.log.parms).includes(sa));
                                W.forIteam = void 0 != W.pageLimit ? x - x % W.pageLimit : 0;
                                za(W.forIteam);
                                z.val(sa);
                                z.trigger("input")
                            }
                            I.removeClass("find")
                        })
                    }, La = async () => {
                        let Ba = (ba = null) => {
                                let z = [];
                                for (var I = 0; I < G.length; I++) z.push("undefined" != typeof G[I].data.userTitle ? G[I].data.userTitle : this.translation(G[I].data.title));
                                null == ba && (ba = this.translation("strategy.name.myStrategy"));
                                ba = ba.replace(/\((\d+)\)$/, "");
                                I = "";
                                for (let J = 1; z.includes(ba + I); J++) I = `(${J})`;
                                return ba + I
                            },
                            ca = async (ba, z = !1) => {
                                let I = ba.id,
                                    J = Ha.includes(I),
                                    F = $(`
                            <li class="iteam-strategy-case" status="${J?"trade":"stoped"}" strategyId="${I}">
                                <div class="status icon"></div>
                                <div class="glow-run"></div>
                                <div class="trade-result hide"></div>
                                <img class="logo" src="../img/strategyIcon/thumbnail.svg" /> 
                                <div class="name">${"undefined"==typeof ba.data.userTitle?this.translation(ba.data.title):ba.data.userTitle}</div> 
                                <input class="nameIdit" name="nameIdit" type="text" />
                                <div class="control-case"> </div>
                                <div class="context-menu-case">
                                    <div class="iteam-strategy-name-case"> 
                                        ${this.translation(ba.data.title)}
                                    </div>
                                </div>
                            </li>
                        `),
                                    R = F.find(".trade-result");
                                this.on(`tradeResult_${I}`, I, E => {
                                    R.html(`$ ${E[this.storage.platform.isDemo||0]}`);
                                    R.hasClass("hide") && R.removeClass("hide")
                                });
                                J && this.getTradeResult(I);
                                let W = F.find(".context-menu-case .iteam-strategy-name-case");
                                this.on(`rename_${I}`, I, E => {
                                    W.html(E)
                                });
                                this.on(`status_${I}`, I, E => {
                                    switch (E) {
                                        case "on":
                                            N.trigger("click");
                                            this.getTradeResult(I);
                                            break;
                                        case "off":
                                            S.trigger("click")
                                    }
                                });
                                let x = [$(`
                                <div class="iteam-context-case">
                                    <div class="icon editSetings"></div>
                                    <div class="context-title">${this.translation("strategy.context.editSetings")}</div>
                                </div>
                            `), $(`
                                <div class="iteam-context-case" action="${J?"off":"on"}">
                                    <div class="icon ${J?"stop":"run"}"></div>
                                    <div class="context-title"> ${J?this.translation("strategy.context.stop"):this.translation("strategy.context.run")}  </div>
                                </div>
                            `), $(`
                                <div class="iteam-context-case">
                                    <div class="icon edit"></div>
                                    <div class="context-title">${this.translation("strategy.context.edit")}</div>
                                </div>
                            `), $(`
                                <div class="iteam-context-case">
                                    <div class="icon basket"></div>
                                    <div class="context-title">${this.translation("strategy.context.basket")}</div>
                                </div>
                            `), $(`
                                <div class="iteam-context-case">
                                    <div class="icon createCopy"></div>
                                    <div class="context-title">${this.translation("strategy.context.createCopy")}</div>
                                </div>
                            `), $(`
                                <div class="iteam-context-case logbook">
                                    <div class="icon logbook"></div>
                                    <div class="context-title">${this.translation("strategy.context.logbook")}</div>
                                </div>
                            `), $(`
                                <div class="iteam-context-case">
                                    <div class="icon download"></div>
                                    <div class="context-title">${this.translation("strategy.context.import")}</div>
                                </div>
                            `), $(`
                                <div class="iteam-context-case">
                                    <div class="icon export"></div>
                                    <div class="context-title">${this.translation("strategy.context.export")}</div>
                                </div>
                            `)];
                                x[0].on("click", E => {
                                    ja(G, I)
                                });
                                x[1].on("click", E => {
                                    switch ($(E.currentTarget).attr("action")) {
                                        case "on":
                                            N.click();
                                            break;
                                        case "off":
                                            S.click()
                                    }
                                });
                                x[2].on("click", E => {
                                    setTimeout(() => {
                                        F.addClass("edit");
                                        F.find('input[name="nameIdit"]').val(F.find("div.name").html());
                                        F.find('input[name="nameIdit"]').focus().select()
                                    }, 100)
                                });
                                x[3].on("click", async E => {
                                    await la(this.translation("prompt.title.confirm"), this.translation("prompt.topic.deleteStrategy", {
                                        strategyId: "undefined" != typeof ba.data.userTitle ?
                                            ba.data.userTitle : this.translation(ba.data.title)
                                    }), `deleteStrategy${I}`) && (G = G.filter(H => H.id != I), await chrome.storage.local.set({
                                        strategies: G
                                    }), await this.setStrategyStatus(I, "off"), await this.clearStrategyLogsbook(I), F.addClass("markedDeletion"), setTimeout(() => {
                                        F.remove()
                                    }, 300))
                                });
                                x[4].on("click", async E => {
                                    E = JSON.parse(JSON.stringify(ba));
                                    E.id = L();
                                    "api" == E.indicators[0].id && (E.indicators[0].tempID = L(), E.indicators[0].settings.find(H => "indId" == H.id).value = E.indicators[0].tempID);
                                    E.data.userTitle =
                                        Ba(Ba("undefined" != typeof E.data.userTitle ? E.data.userTitle : this.translation(E.data.title)));
                                    xa.append(await ca(E, !0))
                                });
                                x[5].on("click", async E => {
                                    $("body").addClass("wait");
                                    await ma(I, G);
                                    $("body").removeClass("wait")
                                });
                                x[6].on("click", async E => {
                                    E = document.createElement("input");
                                    E.type = "file";
                                    E.accept = "application/json";
                                    E.onchange = H => {
                                        H = H.target.files[0];
                                        let Q = new FileReader;
                                        Q.readAsText(H, "UTF-8");
                                        Q.onload = async V => {
                                            V = V.target.result;
                                            try {
                                                try {
                                                    V = JSON.parse(V)
                                                } catch {
                                                    throw this.translation("errors.invalidFileFormat");
                                                }
                                                if ("public" != ba.type || await la(this.translation("prompt.title.confirm"), this.translation("prompt.topic.tryingExportSettings"))) {
                                                    var ra = [];
                                                    for (let oa in V) this.configuration.appData.availablePropStrategyImport.includes(oa) && (ba[oa] = V[oa], ra.push(oa));
                                                    if (0 < ra.length) {
                                                        ba.type = "personal";
                                                        await chrome.storage.local.set({
                                                            strategies: G
                                                        });
                                                        let oa = $("<ul></ul");
                                                        ra.forEach(Aa => {
                                                            oa.append(`<li>${this.translation(`logsBook.iteamTitle.${Aa}`)}</li>`)
                                                        });
                                                        this.notification(this.translation("completed.importCompleted"),
                                                            this.translation("completed.importToStrategy", {
                                                                strategyName: "undefined" != typeof ba.data.userTitle ? ba.data.userTitle : this.translation(ba.data.title),
                                                                elList: oa.html()
                                                            }), 2E4, void 0, "completed")
                                                    } else throw this.translation("errors.strategyPropertiesNotFound");
                                                }
                                            } catch (oa) {
                                                "string" != typeof oa && (oa = this.translation("errors.somethingWrong")), this.notification(this.translation("errors.strategyImportError"), oa, 1E4, "error", "error")
                                            }
                                        }
                                    };
                                    E.click()
                                });
                                x[7].on("click", async E => {
                                    try {
                                        let H = "undefined" != typeof ba.data.userTitle ?
                                            ba.data.userTitle : this.translation(ba.data.title),
                                            Q = new Blob([JSON.stringify(ba)], {
                                                type: "application/json"
                                            });
                                        if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveOrOpenBlob(Q, H);
                                        else {
                                            let V = document.createElement("a");
                                            V.href = URL.createObjectURL(Q);
                                            V.download = `${H}.json`;
                                            document.body.appendChild(V);
                                            V.click();
                                            setTimeout(() => {
                                                V.remove();
                                                window.URL.revokeObjectURL(V.href)
                                            }, 0)
                                        }
                                        this.notification(this.translation("completed.exportedCompleted"), this.translation("completed.exportedStrategyCompleted", {
                                            strategyName: H
                                        }), 2E4, void 0, "completed")
                                    } catch (H) {
                                        this.notification(this.translation("errors.error"), this.translation("errors.somethingWrong"), 1E4, "error", "error")
                                    }
                                });
                                F.find('input[name="nameIdit"]').on("change", async E => {
                                    let H = $(E.currentTarget).val();
                                    if (G.find(Q => Q.data.userTitle == H || this.translation(Q.data.title) == H)) return Ra(this.translation("errors.error"), $(`<div style="max-width: 370px">${this.translation("errors.strategyNameUse",{sname:H})}</div>`), L());
                                    F.find("div.name").html(H);
                                    ba.data.userTitle =
                                        H;
                                    ba.data.title = H;
                                    await chrome.storage.local.set({
                                        strategies: G
                                    });
                                    F.removeClass("edit");
                                    this.runEvent(`rename_${ba.id}`, H)
                                });
                                for (let E = 0; E < x.length; E++) F.find(".context-menu-case").append(x[E]);
                                let S = $(`<span class="switch-status off hoverUnderline">${this.translation("action.off")}</span>`),
                                    aa = $(`<span class="control icon" action="${I}_${J?"off":"on"}"> </span>`),
                                    N = $(`<span class="switch-status on hoverUnderline">${this.translation("action.on")}</span>`);
                                S.on("click", async E => {
                                    F.attr("status", await this.setStrategyStatus(I,
                                        "off"));
                                    aa.attr("action", `${I}_on`);
                                    x[1].attr("action", "on");
                                    x[1].find(".icon").addClass("run").removeClass("stop");
                                    x[1].find(".context-title").html(this.translation("strategy.context.run"))
                                });
                                N.on("click", async E => {
                                    F.attr("status", await this.setStrategyStatus(I, "on"));
                                    aa.attr("action", `${I}_off`);
                                    x[1].attr("action", "off");
                                    x[1].find(".icon").addClass("stop").removeClass("run");
                                    x[1].find(".context-title").html(this.translation("strategy.context.stop"))
                                });
                                aa.on("click", async E => {
                                    switch ($(E.currentTarget).attr("action").split("_")[1]) {
                                        case "on":
                                            N.click();
                                            break;
                                        case "off":
                                            S.click()
                                    }
                                });
                                F.find(".control-case").append(S);
                                F.find(".control-case").append(aa);
                                F.find(".control-case").append(N);
                                this.on("windowResize", `wrapStrategyCase_${I}`, () => {
                                    xa.find(".iteam-strategy-case").removeClass("context-menu-show");
                                    xa.find(".iteam-strategy-case .context-menu-case").css({
                                        top: -1E3,
                                        left: 0,
                                        opacity: 0
                                    })
                                });
                                F.on("click", async E => {
                                    $(E.currentTarget);
                                    null === E.target.closest(".control-case,.nameIdit,.context-menu-case") && await ja(G, I)
                                });
                                F.on("mousedown", async E => {
                                    if (2 == E.button) {
                                        E.preventDefault();
                                        var H = E.pageX - F.offset().left,
                                            Q = E.pageY - F.offset().top;
                                        let V = xa.find(".iteam-strategy-case.context-menu-show").length;
                                        xa.find(".iteam-strategy-case.context-menu-show").each(function(ra) {
                                            if ($(this).attr("strategyId") != I) {
                                                var oa = $(this).find(".context-menu-case");
                                                oa.css({
                                                    opacity: 0
                                                });
                                                setTimeout(() => {
                                                    $(this).removeClass("context-menu-show");
                                                    oa.css({
                                                        top: -1E3,
                                                        left: 0
                                                    })
                                                }, 500)
                                            }
                                        });
                                        V && await b(300);
                                        null == E.target.closest(".context-menu-case") && (E.pageX = F.offset().left + H, E.pageY = F.offset().top + Q, F.addClass("context-menu-show"),
                                            H = E.pageX + F.find(".context-menu-case").width() > $a.find(".wrap-ul-strategy-case").offset().left + $a.find(".wrap-ul-strategy-case").width(), F.find(".context-menu-case").css({
                                                top: E.pageY - F.offset().top,
                                                left: E.pageX - F.offset().left,
                                                opacity: 1
                                            }), H && F.find(".context-menu-case").css({
                                                transform: `translateX(-${F.find(".context-menu-case").width()}px)`
                                            }), za.animate({
                                                scrollTop: `${za.prop("scrollHeight")}px`
                                            }))
                                    }
                                });
                                z && (G.push(ba), await chrome.storage.local.set({
                                        strategies: G
                                    }), x[2].click(), F.addClass("newStrategy"),
                                    setTimeout(() => {
                                        F.removeClass("newStrategy")
                                    }, 300));
                                return F
                            }, sa = $('<div class="experts-wrap"></div>');
                        var Ea = $('<div class="wrap-newstrategy-case"></div>');
                        let za = $('<div class="wrap-ul-strategy-case"><ul class="wrap-strategy-case"></ul></div>'),
                            xa = za.find("ul.wrap-strategy-case");
                        xa.sortable({
                            cancel: ".control-case,.context-menu-case,.new,.nameIdit",
                            tolerance: "pointer",
                            update: async (ba, z) => {
                                let I = [];
                                $("li.iteam-strategy-case:not(.new)").each(function(J) {
                                    I[J] = G.find(F => F.id == $(this).attr("strategyId"))
                                });
                                G = I;
                                await chrome.storage.local.set({
                                    strategies: G
                                })
                            }
                        });
                        let G = this.storage.strategies,
                            Ha = this.storage.runningStrategies;
                        for (var ta = 0; ta < G.length; ta++) xa.append(await ca(G[ta]));
                        ta = $(`
                        <div class="button-newstr-case">
                            <div class="icon add"></div>
                            <div class="title">${this.translation("strategy.name.create")}</div>
                        </div>
                    `);
                        ta.on("click", async ba => {
                            xa.append(await ca({
                                id: L(),
                                data: {
                                    title: "strategy.name.myStrategy",
                                    userTitle: Ba()
                                },
                                type: "personal",
                                assets: [],
                                indicators: [],
                                martingale: [],
                                regulations: []
                            }, !0))
                        });
                        Ea.append(ta);
                        sa.append(za);
                        sa.append(Ea);
                        Ea = $(`
                        <div class="wrap-button">
                            <div class="button-open-platform">
                                <div class="icon-img"><img src="../img/svg/po.svg" /></div>
                                <div class="title">${this.translation("action.platformOpen")}</div>
                            </div>
                        </div>
                    `);
                        Ea.find(".button-open-platform").on("click", async () => {
                            await this.openPlatform()
                        });
                        sa.append(Ea);
                        return sa
                    }, ib = async () => {
                        var Ba;
                        let ca = this.storage.platform,
                            sa = {
                                sataus: !1
                            },
                            Ea = async (H = 0, Q = !0) => {
                                let V, ra, oa, Aa = async (U, Da) => {
                                    let ua = $('\n                                <div class="main-deal-case">\n                                    <div class="tab-case"></div>\n                                    <div class="view-case"></div>\n                                </div>\n                            ');
                                    var Pa = "uid isDemo strategy mstep id asset percentProfit command amount openTimestamp closeTimestamp openPrice closePrice profit session requestId".split(" "),
                                        Ua = $(`
                                    <div class="iteam-tab-case selected">
                                        <div class="icon details"></div>
                                        <div class="value">${this.translation("dataDeal.details")}</div>
                                    </div>
                                `),
                                        Ma = $('<div class="view-deal-list-case view-tabs"></div>');
                                    for (let Va = 0; Va < Pa.length; Va++) {
                                        var wa = Pa[Va];
                                        if ("undefined" != typeof U[wa]) switch (wa) {
                                            case "command":
                                                Ma.append(`
                                            <div class="iteam-data-deal">
                                                <div class="data-name">${this.translation("dataDeal.command")}</div>
                                                <div class="data-value">${0==U.command?this.translation("dataDeal.up"):this.translation("dataDeal.down")}</div>
                                            </div>
                                        `);
                                                break;
                                            case "amount":
                                                Ma.append(`
                                            <div class="iteam-data-deal">
                                                <div class="data-name">${this.translation(`dataDeal.${wa}`)}</div>
                                                <div class="data-value">${U[wa]} ${U.account\u0421urrency}</div>
                                            </div>
                                        `);
                                                break;
                                            case "profit":
                                                if (!U.isClosed) break;
                                                Ma.append(`
                                            <div class="iteam-data-deal">
                                                <div class="data-name">${this.translation(`dataDeal.${wa}`)}</div>
                                                <div class="data-value">${U[wa]} ${U.account\u0421urrency}</div>
                                            </div>
                                        `);
                                                break;
                                            case "percentProfit":
                                                Ma.append(`
                                            <div class="iteam-data-deal">
                                                <div class="data-name">${this.translation("dataDeal.percentProfit")}</div>
                                                <div class="data-value">${U.percentProfit} %</div>
                                            </div>
                                        `);
                                                break;
                                            case "strategy":
                                                Ma.append(`
                                            <div class="iteam-data-deal">
                                                <div class="data-name">${this.translation("dataDeal.strategy")}</div>
                                                <div class="data-value">${void 0==ta.title[U.strategy]?U.altStrategyName:ta.title[U.strategy]}</div>
                                            </div> 
                                        `);
                                                break;
                                            case "isDemo":
                                                Ma.append(`
                                            <div class="iteam-data-deal">
                                                <div class="data-name">${this.translation("dataDeal.accauntType")}</div>
                                                <div class="data-value">${U.isDemo?this.translation("dataDeal.demo"):this.translation("dataDeal.real")}</div>
                                            </div>    
                                        `);
                                                break;
                                            case "closeTimestamp":
                                                if (!U.isClosed) break;
                                                Ma.append(`
                                            <div class="iteam-data-deal">
                                                <div class="data-name">${this.translation(`dataDeal.${wa}`)}</div>
                                                <div class="data-value">${moment(1E3*U[wa]).format("DD.MM.YYYY HH:mm:ss")}</div>
                                            </div>
                                        `);
                                                break;
                                            case "openTimestamp":
                                                Ma.append(`
                                            <div class="iteam-data-deal">
                                                <div class="data-name">${this.translation(`dataDeal.${wa}`)}</div>
                                                <div class="data-value">${moment(1E3*U[wa]).format("DD.MM.YYYY HH:mm:ss")}</div>
                                            </div>
                                        `);
                                                break;
                                            case "openMs":
                                                Ma.append(`
                                            <div class="iteam-data-deal">
                                                <div class="data-name">${this.translation(`dataDeal.${wa}`)}</div>
                                                <div class="data-value">${U[wa]} ${this.translation("time.ms")}</div>
                                            </div>
                                        `);
                                                break;
                                            case "closeMs":
                                                Ma.append(`
                                            <div class="iteam-data-deal">
                                                <div class="data-name">${this.translation(`dataDeal.${wa}`)}</div>
                                                <div class="data-value">${U[wa]} ${this.translation("time.ms")}</div>
                                            </div>
                                        `);
                                                break;
                                            case "closePrice":
                                                if (!U.isClosed) break;
                                                Ma.append(`
                                            <div class="iteam-data-deal">
                                                <div class="data-name">${this.translation(`dataDeal.${wa}`)}</div>
                                                <div class="data-value">${U[wa]}</div>
                                            </div>
                                        `);
                                                break;
                                            case "session":
                                                await new Promise((kb, mb) => {
                                                    let pb = indexedDB.open("pocketOptionRobot", 1);
                                                    pb.onsuccess = async () => {
                                                        let K = pb.result.transaction("logsbook", "readonly").objectStore("logsbook").index("session_idx").get(U.session);
                                                        K.onsuccess = () => {
                                                            if (void 0 != K.result) {
                                                                let O = $('<div class="iteam-data-deal"> </div>'),
                                                                    v = $(`<div class="button-open-logs-book">${this.translation("action.openInLogsBook")}</div>`);
                                                                O.append(v);
                                                                v.on("click", async () => {
                                                                    $("body").addClass("wait");
                                                                    await ma(U.strategy, Ha, U.requestId);
                                                                    $("body").removeClass("wait")
                                                                });
                                                                Ma.append(O)
                                                            }
                                                            kb(!0)
                                                        }
                                                    };
                                                    pb.onerror = kb
                                                });
                                                break;
                                            case "mstep":
                                                var Za = $(`
                                            <div class="iteam-data-deal">
                                                <div class="data-name">${this.translation(`dataDeal.${wa}`)}</div>
                                            </div>
                                        `),
                                                    Fa = $(`<div class="data-value"><div class="link">${U[wa]}</div> </div>`);
                                                Fa.on("click", async () => {
                                                    let kb = F.martinSeries.find(mb => mb.find(pb => pb.requestId == U.requestId));
                                                    va(kb, U.requestId)
                                                });
                                                wa = $(`<div class="data-value">${U[wa]}</div>`);
                                                Za.append(Da ? wa : Fa);
                                                Ma.append(Za);
                                                break;
                                            case "requestId":
                                                let gb = F.martinSeries.find(kb => kb.find(mb => mb.requestId == U.requestId));
                                                if (2 > gb.length || Da) break;
                                                Za = $('<div class="iteam-data-deal"> </div>');
                                                Fa = $(`<div class="button-open-martin-series">${this.translation("action.openMartinSeries")}</div>`);
                                                Fa.on("click", async () => {
                                                    await va(gb, U.requestId)
                                                });
                                                Za.append(Fa);
                                                Ma.append(Za);
                                                break;
                                            default:
                                                Ma.append(`
                                            <div class="iteam-data-deal">
                                                <div class="data-name">${this.translation(`dataDeal.${wa}`)}</div>
                                                <div class="data-value">${U[wa]}</div>
                                            </div>
                                        `)
                                        }
                                    }
                                    var cb = $(`
                                    <div class="iteam-tab-case">
                                        <div class="icon comments"></div>
                                        <div class="value">${this.translation("dataDeal.comments")}</div>
                                    </div>
                                `),
                                        bb = $('<div class="view-comments-list-case view-tabs"> </div> ');
                                    for (Da = 0; Da < U.comments.length; Da++) {
                                        let Va = U.comments[Da];
                                        Pa = $(`
                                    <div class="iteam-data-comment">
                                        <div class="comment-time-case">
                                            <div class="icon calendar"></div>
                                            <div class="time-value">${moment(1E3*Va.date).format("DD.MM.YYYY HH:mm:ss")}</div>
                                        </div>
                                        <div class="comment-case"> </div>
                                    </div>
                                
                                `);
                                        Pa.find(".comment-case").append(Va.mark.map(gb => this.translation(gb, Va.parms)));
                                        bb.append(Pa)
                                    }
                                    ua.find(".tab-case").append(Ua);
                                    ua.find(".view-case").append(Ma);
                                    ua.find(".tab-case").append(cb);
                                    ua.find(".view-case").append(bb);
                                    Ua.on("click", Va => {
                                        ua.find(".tab-case .iteam-tab-case").removeClass("selected");
                                        ua.find(".view-tabs").removeClass("selected");
                                        Ua.addClass("selected");
                                        Ma.addClass("selected")
                                    });
                                    cb.on("click", Va => {
                                        ua.find(".tab-case .iteam-tab-case").removeClass("selected");
                                        ua.find(".view-tabs").removeClass("selected");
                                        cb.addClass("selected");
                                        bb.addClass("selected")
                                    });
                                    Ua.click();
                                    setTimeout(() => {
                                        ua.css({
                                            "min-height": `${ua.height()}px`
                                        });
                                        ua.find(".view-case").css({
                                            height: `${ua.find(".view-case").height()+9}px`
                                        });
                                        ua.find(".view-case").css({
                                            width: `${ua.find(".view-case").width()+9}px`
                                        })
                                    }, 200);
                                    Ra(this.translation("dataDeal.dealInfo"), ua, U.id)
                                }, va = async (U, Da = null) => {
                                    let ua = U[0];
                                    var Pa = "id strategy openTimestamp profit countSteps session".split(" ");
                                    let Ua = $(' <div class="main-martin-series-case"> </div> '),
                                        Ma = $('<div class="general-information-list"></div>');
                                    for (var wa = 0; wa < Pa.length; wa++) {
                                        let Fa;
                                        switch (Pa[wa]) {
                                            case "id":
                                                Fa = $(`
                                            <div class="information-iteam-case">
                                                <div class="iteam-title">${this.translation("dataDeal.mid")}</div>
                                                <div class="iteam-value">${ua.id}</div>
                                            </div>
                                        `);
                                                break;
                                            case "strategy":
                                                Fa = $(`
                                            <div class="information-iteam-case">
                                                <div class="iteam-title">${this.translation("dataDeal.strategy")}</div>
                                                <div class="iteam-value">${void 0==ta.title[ua.strategy]?ua.altStrategyName:ta.title[ua.strategy]}</div>
                                            </div>
                                        `);
                                                break;
                                            case "openTimestamp":
                                                Fa = $(`
                                            <div class="information-iteam-case">
                                                <div class="iteam-title">${this.translation("dataDeal.openTimestamp")}</div>
                                                <div class="iteam-value">${moment(1E3*ua.openTimestamp).format("DD.MM.YYYY HH:mm:ss")}</div>
                                            </div>
                                        `);
                                                break;
                                            case "profit":
                                                var Za = U.reduce((cb, bb) => cb + bb.profit, 0);
                                                Fa = $(`
                                            <div class="information-iteam-case">
                                                <div class="iteam-title">${this.translation("dataDeal.profit")}</div>
                                                <div class="iteam-value">${Za.toFixed(2)} ${ua.account\u0421urrency}</div>
                                            </div>
                                        `);
                                                break;
                                            case "countSteps":
                                                Fa = $(`
                                            <div class="information-iteam-case">
                                                <div class="iteam-title">${this.translation("history.countSteps")}:</div>
                                                <div class="iteam-value">${U.reduce((cb,bb)=>bb.mstep>cb?bb.mstep:cb,0)}</div>
                                            </div>
                                        `);
                                                break;
                                            case "session":
                                                await new Promise((cb, bb) => {
                                                    let Va = indexedDB.open("pocketOptionRobot", 1);
                                                    Va.onsuccess = async () => {
                                                        let gb = Va.result.transaction("logsbook", "readonly").objectStore("logsbook").index("session_idx").get(ua.session);
                                                        gb.onsuccess = () => {
                                                            if (void 0 != gb.result) {
                                                                Fa = $('<div class="information-iteam-case"></div>');
                                                                let kb = $(`<div class="button-open-logs-book">${this.translation("action.openInLogsBook")}</div>`);
                                                                Fa.append(kb);
                                                                kb.on("click", () => {
                                                                    ma(ua.strategy,
                                                                        Ha, ua.tsID)
                                                                })
                                                            }
                                                            cb(!0)
                                                        }
                                                    };
                                                    Va.onerror = cb
                                                })
                                        }
                                        Ma.append(Fa)
                                    }
                                    Pa = $(`
                                <div class="wrap-deal-list">
                                    <table>
                                        <thead>
                                            <tr>
                                                <th></th>
                                                <th>${this.translation("history.step")}</th>
                                                <th>${this.translation("history.asset")}</th>
                                                <th>${this.translation("history.amount")}</th>
                                                <th>${this.translation("history.openTime")}</th>
                                                <th>${this.translation("history.state")}</th>
                                                <th>${this.translation("history.profit")}</th> 
                                            </tr>
                                        </thead>
                                        <tbody>
                                        </tbody>
                                    </table>
                                    
                                </div>
                            `);
                                    wa = Pa.find("tbody");
                                    for (Za = 0; Za < U.length; Za++) {
                                        let Fa = U[Za],
                                            cb = $(`
                                    <tr ${Fa.requestId==Da?'class="no-activ"':""}>
                                        <td><div class="icon ${0==Fa.command?"dealup":"dealdown"}"></div></td>  
                                        <td>${Fa.mstep||" "}</td>
                                        <td>${Fa.asset}</td>
                                        <td>${Fa.amount} $</td>
                                        <td>${moment(1E3*Fa.openTimestamp).format("DD.MM.YYYY HH:mm:ss")}</td>
                                        <td>${this.translation(`dealState.${Fa.state}`)}</td>
                                        <td class="profit ${0<Fa.profit?"win":"loose"}">${Fa.isClosed?`${Fa.account\u0421urrency} ${Fa.profit.toFixed(2)} (${Fa.percentProfit}%)`:"-"}</td> 
                                    </tr>
                                `);
                                        wa.append(cb);
                                        cb.on("click", async bb => {
                                            $("body").addClass("wait");
                                            await Aa(Fa, "martinSeries");
                                            $("body").removeClass("wait")
                                        })
                                    }
                                    Ua.append(Ma);
                                    Ua.append(Pa);
                                    Ra(this.translation("dataDeal.martinSeriesInfo"), Ua, `mgId${ua.id}`)
                                };
                                Q && (S.addClass("hide"), await b(500), setTimeout(() => {
                                    S.removeClass("hide")
                                }, 10));
                                var Wa = S.height();
                                xa = H;
                                switch (z.group) {
                                    case "deals":
                                        var Ka = F.deals.filter(U => U.openTimestamp < z.date.from || U.openTimestamp > z.date.to || !U.isDemo && "demo" == z.accountType ||
                                            U.isDemo && "real" == z.accountType || "all" != z.strategyName && z.strategyName != U.strategy ? !1 : !0);
                                        Ba = Ka.length;
                                        G = Math.round((Wa - 60) / 30);
                                        H *= G;
                                        V = $('<table class="table-view-history-case"></table>');
                                        ra = $(`
                                    <thead>
                                        <tr>
                                            <th></th> 
                                            <th>${this.translation("history.strategy")}</th>
                                            <th>${this.translation("history.expiration")}</th>
                                            <th>${this.translation("history.asset")}</th>
                                            <th>${this.translation("history.openTime")}</th>
                                            <th>${this.translation("history.amount")}</th>
                                            <th>${this.translation("history.state")}</th>
                                            <th>${this.translation("history.profit")}</th>
                                        </tr>
                                    </thead>
                                `);
                                        oa = $(`
                                    <tbody class="nothingWasFound">
                                        <tr>
                                            <td colspan="${ra.find("th").length}">${this.translation("history.nothingWasFound")}</td>
                                        </tr>     
                                    </tbody>
                                `);
                                        for (Wa = 0; Wa < G; Wa++, H++) {
                                            if (void 0 == Ka[H]) continue;
                                            let U = Ka[H];
                                            oa.hasClass("nothingWasFound") && (oa = $("<tbody></tbody>")); /*console.log(U);*/
                                            let Da = $(`
                                        <tr class = "${U.addOnline&&!Q?"add-online":""}${U.updateOnline&&!Q?" update":""}">
                                            <td><div class="icon ${0==U.command?"dealup":"dealdown"}"></div></td>
                                            <td ${void 0==ta.title[U.strategy]?`title="${this.translation("history.remoteStrategy")}"`:""}  class="${void 0==ta.title[U.strategy]?"remote-strategy":""}">${void 0==ta.title[U.strategy]?U.altStrategyName:ta.title[U.strategy]}</td>
                                            <td>S${U.time||"--"}</td>
                                            <td class="td-asset"><div>${U.asset}</td>
                                            <td>${moment(1E3*U.openTimestamp).format("DD.MM.YYYY HH:mm:ss")}</td>
                                            <td>${U.amount} ${U.account\u0421urrency}</td>
                                            <td>${this.translation(`dealState.${U.state}`)} </td>
                                            <td><span class="${0<U.profit?"profit":"loss"}">${U.isClosed&&U.percentProfit?`$${U.profit}`:"-"}</span>${U.isClosed&&U.percentProfit?`<span>(${U.percentProfit}%)</span>`:""}</td>
                                        </tr>
                                    `);
                                            oa.append(Da);
                                            setTimeout(() => {
                                                Da.hasClass("add-online") && Da.removeClass("add-online");
                                                Da.hasClass("update") && Da.removeClass("update");
                                                delete U.addOnline;
                                                delete U.updateOnline
                                            }, 300);
                                            Da.on("click", async ua => {
                                                $("body").addClass("wait");
                                                await Aa(U);
                                                $("body").removeClass("wait")
                                            })
                                        }
                                        break;
                                    case "martinSeries":
                                        for (Ka = F.martinSeries.filter(U => {
                                                let Da = U[0];
                                                return 1 == U.length || Da.openTimestamp < z.date.from || Da.openTimestamp > z.date.to || !Da.isDemo && "demo" == z.accountType || Da.isDemo &&
                                                    "real" == z.accountType || "all" != z.strategyName && z.strategyName != Da.strategy ? !1 : !0
                                            }), Ba = Ka.length, G = Math.round((Wa - 60) / 30), H *= G, V = $('<table class="table-view-history-case"></table>'), ra = $(`
                                    <thead>
                                        <tr>
                                            <th></th>
                                            <th>${this.translation("history.strategy")}</th>
                                            <th>${this.translation("history.asset")}</th>
                                            <th>${this.translation("history.countSteps")}</th>
                                            <th>${this.translation("history.openTime")}</th>
                                            <th>${this.translation("history.profit")}</th>
                                        </tr> 
                                    </thead>
                                `), oa = $(`
                                    <tbody class="nothingWasFound">
                                        <tr>
                                            <td colspan="${ra.find("th").length}">${this.translation("history.nothingWasFound")}</td>
                                        </tr>     
                                    </tbody>
                                `), Wa = 0; Wa < G; Wa++, H++) {
                                            let U = Ka[H];
                                            if (void 0 == U) continue;
                                            let Da = U[0];
                                            var ab = U.filter(Ua => {
                                                if (Ua.updateOnline) return delete Ua.updateOnline, !0
                                            }).length;
                                            let ua = U.reduce((Ua, Ma) => Ua + Ma.profit, 0);
                                            oa.hasClass("nothingWasFound") && (oa = $("<tbody></tbody>"));
                                            let Pa = $(`
                                        <tr class = "ms ${Da.addOnline&&!Q?"add-online":""}${ab&&!Q?" update":""}">
                                            <td><div class="icon ${0==Da.command?"dealup":"dealdown"}"></div></td>
                                            <td>${void 0==ta.title[Da.strategy]?Da.altStrategyName:ta.title[Da.strategy]}</td>
                                            <td class="td-asset"><div>${Da.asset}</td>
                                            <td class="td-asset"><div>${U.reduce((Ua,Ma)=>Ma.mstep>Ua?Ma.mstep:Ua,0)}</td>
                                            <td>${moment(1E3*Da.openTimestamp).format("DD.MM.YYYY HH:mm:ss")}</td>
                                            <td><span class="${0<ua?"profit":"loss"}">$${ua.toFixed(2)}</span></td
                                             
                                        </tr>
                                    
                                    `);
                                            oa.append(Pa);
                                            setTimeout(() => {
                                                Pa.hasClass("add-online") && Pa.removeClass("add-online");
                                                Pa.hasClass("update") && Pa.removeClass("update");
                                                delete Da.addOnline
                                            }, 300);
                                            Pa.on("click", async Ua => {
                                                $("body").addClass("wait");
                                                await va(U);
                                                $("body").removeClass("wait")
                                            })
                                        }
                                }
                                aa.html("");
                                Q = $('<div class="nav-button-case prev"> <div class="icon prev-icon"> </div>');
                                Ka = $('<div class="nav-button-case next"> <div class="icon next-icon"> </div>');
                                Wa = Math.ceil(Ba / G);
                                for (let U = 0; U < Wa &&
                                    !(0 == U && U + 1 >= Wa); U++) {
                                    let Da = $(`<div class="nav-button-case">${U+1}</div>`);
                                    0 == U && aa.append(Q);
                                    Da.on("click", async () => {
                                        if (Da.hasClass("select")) return !1;
                                        $("body").addClass("wait");
                                        sa.sataus = !0;
                                        clearTimeout(sa.timeout);
                                        S.html(await Ea(U));
                                        sa.timeout = setTimeout(() => {
                                            sa.sataus = !1
                                        }, 500);
                                        $("body").removeClass("wait")
                                    });
                                    ab = H / G - 1;
                                    ab == U ? (Da.addClass("select"), U + 1 == Math.ceil(Ba / G) ? Ka.addClass("hide-no-click") : (Ka.removeClass("hide-no-click"), Ka.on("click", async () => {
                                        $("body").addClass("wait");
                                        sa.sataus = !0;
                                        clearTimeout(sa.timeout);
                                        S.html(await Ea(U + 1));
                                        sa.timeout = setTimeout(() => {
                                            sa.sataus = !1
                                        }, 500);
                                        $("body").removeClass("wait")
                                    })), 0 == U ? Q.addClass("hide-no-click") : (Q.removeClass("hide-no-click"), Q.on("click", async () => {
                                        $("body").addClass("wait");
                                        sa.sataus = !0;
                                        clearTimeout(sa.timeout);
                                        S.html(await Ea(U - 1));
                                        sa.timeout = setTimeout(() => {
                                            sa.sataus = !1
                                        }, 500);
                                        $("body").removeClass("wait")
                                    }))) : Da.removeClass("select");
                                    U <= ab ? 2 < ab - U ? Da.addClass(`hide hide${ab-U}`) : Da.removeClass("hide") : 2 < U - ab ? Da.addClass(`hide hide${U-
ab}`) : Da.removeClass("hide");
                                    U + 1 != Math.ceil(Ba / G) && 0 != U || Da.removeClass("hide");
                                    (7 > U - ab && -7 < U - ab || 0 == U || U + 1 == Math.ceil(Ba / G)) && aa.append(Da);
                                    U + 1 == Math.ceil(Ba / G) && aa.append(Ka)
                                }
                                V.append(ra);
                                V.append(oa);
                                return V
                            }, za = (H, Q = !1) => {
                                H.openTimestamp -= 60 * ca.serverTimeZoneOffset;
                                H.closeTimestamp -= 60 * ca.serverTimeZoneOffset;
                                let V;
                                Q && (V = F.deals.find(ra => ra.requestId == H.requestId));
                                void 0 != V ? Object.assign(V, H, {
                                    updateOnline: !0
                                }) : (F.deals.unshift(H), "undefined" == typeof F.servisObjMartin[H.tsID] && (F.servisObjMartin[H.tsID] = [], F.martinSeries.unshift(F.servisObjMartin[H.tsID])), F.servisObjMartin[H.tsID].push(H))
                            };
                        var xa = 0;
                        var G = Ba = void 0;
                        let Ha = this.storage.strategies,
                            ta = {
                                title: {},
                                arrAvailableValues: []
                            };
                        for (var ba = 0; ba < Ha.length; ba++) ta.title[Ha[ba].id] = "undefined" == typeof Ha[ba].data.userTitle ? this.translation(Ha[ba].data.title) : Ha[ba].data.userTitle, ta.arrAvailableValues.push("undefined" != typeof Ha[ba].data.userTitle ? Ha[ba].data.userTitle : Ha[ba].id);
                        let z = (await chrome.storage.session.get("selectedFilters")).selectedFilters || {
                                date: {
                                    from: moment().startOf("month").valueOf() / 1E3,
                                    to: moment().endOf("month").valueOf() / 1E3
                                },
                                accountType: "demo",
                                strategyName: "all",
                                group: "deals"
                            },
                            I = JSON.parse(JSON.stringify(z)),
                            J = [];
                        J = await new Promise((H, Q) => {
                            let V = indexedDB.open("pocketOptionRobot", 1);
                            V.onsuccess = async () => {
                                let ra = V.result.transaction("history", "readonly").objectStore("history").index("openTimestamp_idx"),
                                    oa = IDBKeyRange.bound(z.date.from + 60 * ca.serverTimeZoneOffset, z.date.to + 60 * ca.serverTimeZoneOffset, !0),
                                    Aa = ra.getAll(oa);
                                Aa.onsuccess =
                                    function() {
                                        void 0 != Aa.result ? H(Aa.result) : H([])
                                    };
                                Aa.onerror = () => {
                                    H([])
                                }
                            }
                        });
                        let F = {
                                martinSeries: [],
                                deals: [],
                                servisObjMartin: {}
                            },
                            R;
                        this.on("updateDealHistory", "history", async H => {
                            H.is\u0421learHistory || (za(H, !0), 0 == xa && (H.addOnline = !0, clearTimeout(R), R = setTimeout(async () => {
                                sa.sataus || S.html(await Ea(0, !1))
                            }, 500)))
                        });
                        J.forEach(za);
                        var W = [{
                            id: "date",
                            type: "daterange",
                            value: `${moment(1E3*z.date.from).format("DD.MM.YYYY")} - ${moment(1E3*z.date.to).format("DD.MM.YYYY")}`,
                            values: null
                        }, {
                            id: "accountType",
                            type: "select",
                            valuePerf: "filter",
                            value: z.accountType || "demo",
                            values: ["real", "demo"]
                        }, {
                            id: "strategyName",
                            type: "select",
                            valuePerf: "strategy.name",
                            value: z.strategyName || "all",
                            values: ["all"].concat(ta.arrAvailableValues)
                        }, {
                            id: "group",
                            type: "select",
                            valuePerf: "filter",
                            value: z.group || "deals",
                            values: ["deals", "martinSeries"]
                        }];
                        ba = $(' <div class="history-wrap"> </div> ');
                        let x = $('<div class="filters-block-case"></div>'),
                            S = $('<div class="wrap-view-history"></div>'),
                            aa = $('<div class="page-nav-case"></div>');
                        for (var N = 0; N <
                            W.length; N++) {
                            let H, Q = W[N],
                                V = $(`<div class="iteam-filter-case ${Q.id} ${Q.type}"></div>`);
                            V.append(`
                            <div class="title-case">
                                <div class="name-filter">${this.translation(`filter.${Q.id}`)}</div>
                            </div>
                        `);
                            switch (Q.type) {
                                case "daterange":
                                    H = $(`
                                    <div class="filter-case">
                                        <div class="icon calendar"></div> 
                                        <div class="date-value">${Q.value}</div>
                                        <div class="icon selectwrap"></div>
                                    </div>
                                `);
                                    V.append(H);
                                    H.daterangepicker({
                                        autoUpdateInput: !0,
                                        parentEl: ba,
                                        startDate: moment(1E3 * z.date.from).format("DD.MM.YYYY"),
                                        endDate: moment(1E3 * z.date.to).format("DD.MM.YYYY"),
                                        locale: {
                                            showCustomRangeLabel: !1,
                                            format: "DD.MM.YYYY",
                                            separator: " - ",
                                            firstDay: 1,
                                            applyLabel: this.translation("daterangepicker.action.apply"),
                                            cancelLabel: this.translation("daterangepicker.action.cancel"),
                                            customRangeLabel: this.translation("daterangepicker.ranges.customRangeLabel"),
                                            monthNames: [this.translation("daterangepicker.monthNames.Jan"),
                                                this.translation("daterangepicker.monthNames.Feb"), this.translation("daterangepicker.monthNames.Mar"), this.translation("daterangepicker.monthNames.Apr"), this.translation("daterangepicker.monthNames.May"), this.translation("daterangepicker.monthNames.Jun"), this.translation("daterangepicker.monthNames.Jul"), this.translation("daterangepicker.monthNames.Aug"), this.translation("daterangepicker.monthNames.Sep"), this.translation("daterangepicker.monthNames.Oct"), this.translation("daterangepicker.monthNames.Nov"),
                                                this.translation("daterangepicker.monthNames.Dec")
                                            ],
                                            daysOfWeek: [this.translation("daterangepicker.daysOfWeek.Su"), this.translation("daterangepicker.daysOfWeek.Mo"), this.translation("daterangepicker.daysOfWeek.Tu"), this.translation("daterangepicker.daysOfWeek.We"), this.translation("daterangepicker.daysOfWeek.Th"), this.translation("daterangepicker.daysOfWeek.Fr"), this.translation("daterangepicker.daysOfWeek.Sa")]
                                        },
                                        ranges: {
                                            [this.translation("daterangepicker.ranges.today")]: [moment(), moment()],
                                            [this.translation("daterangepicker.ranges.yesterday")]: [moment().subtract(1,
                                                "days"), moment().subtract(1, "days")],
                                            [this.translation("daterangepicker.ranges.Last7Days")]: [moment().subtract(6, "days"), moment()],
                                            [this.translation("daterangepicker.ranges.Last30Days")]: [moment().subtract(29, "days"), moment()],
                                            [this.translation("daterangepicker.ranges.ThisMonth")]: [moment().startOf("month"), moment().endOf("month")],
                                            [this.translation("daterangepicker.ranges.LastMonth")]: [moment().subtract(1, "month").startOf("month"), moment().subtract(1, "month").endOf("month")]
                                        }
                                    }, function(Aa, va, Wa) {});
                                    H.on("apply.daterangepicker", function(Aa, va) {
                                        $(this).find(".date-value").html(va.startDate.format("DD.MM.YYYY") + " - " + va.endDate.format("DD.MM.YYYY"));
                                        I.date.from = va.startDate.valueOf() / 1E3;
                                        I.date.to = va.endDate.valueOf() / 1E3
                                    });
                                    H.on("cancel.daterangepicker", function(Aa, va) {
                                        $(this).find(".date-value").html("")
                                    });
                                    H.on("show.daterangepicker", function(Aa, va) {
                                        $(this).addClass("showdaterangepicker")
                                    });
                                    H.on("hide.daterangepicker", function(Aa, va) {
                                        $(this).removeClass("showdaterangepicker")
                                    });
                                    break;
                                case "select":
                                    H =
                                        $(`
                                    <div class="filter-case">
                                        <div class="icon ${Q.id}"></div> 
                                    </div>
                                `);
                                    let ra = $(`
                                    <div class="custom-input-select" type="select" >
                                        <div class="select-case">
                                            <div class="value">${this.translation(`${Q.valuePerf}.${Q.value}`).replace(`${Q.valuePerf}.`,"")}</div>
                                            <div class="icon selectwrap"></div>
                                        </div> 
                                    </div>
                                `),
                                        oa = $('<div class="option-case"></div>');
                                    for (let Aa = 0; Aa < Q.values.length; Aa++) oa.append(`<div class="option" value="${Q.values[Aa]}" >${this.translation(`${Q.valuePerf}.${Q.values[Aa]}`).replace(`${Q.valuePerf}.`,"")}</div>`);
                                    ra.append(oa);
                                    H.append(ra);
                                    V.append(H);
                                    ra.on("click", Aa => {
                                        let va = $(Aa.currentTarget);
                                        if (va.hasClass("showselect")) {
                                            if (null != Aa.target.closest(".option")) {
                                                var Wa = $(Aa.target).attr("value");
                                                Aa = $(Aa.target).html();
                                                va.find(".select-case .value").html(Aa);
                                                switch (Q.id) {
                                                    case "strategyName":
                                                        "all" != Wa && (Aa = Ha.find(Ka => Ka.id == Wa || Ka.data.userTitle == Wa), Wa = void 0 != Aa ? Aa.id : "all");
                                                        I[Q.id] = Wa;
                                                        break;
                                                    default:
                                                        I[Q.id] = Wa
                                                }
                                            }
                                            return va.removeClass("showselect")
                                        }
                                        $('.custom-input-select[type="select"]').removeClass("showselect");
                                        va.addClass("showselect")
                                    })
                            }
                            x.append(V)
                        }
                        W = $(`
                        <div class="iteam-filter-case apply">
                            <div class="title-case">
                                <div class="name-filter">&emsp;</div>
                            </div>
                            <div class="filter-case">  
                                <div class="date-value">${this.translation("filter.apply")}</div>  
                            </div>
                        </div>
                    `);
                        N = $(`
                        <div class="iteam-filter-case delete">
                            <div class="title-case">
                                <div class="name-filter">&emsp;</div>
                            </div>
                            <div class="filter-case">  
                                <div class="date-value">${this.translation("filter.deleteHistory")}</div>  
                            </div>
                        </div>
                    `);
                        W.on("click", async H => {
                            H = JSON.stringify(z.date) != JSON.stringify(I.date);
                            Object.assign(z, JSON.parse(JSON.stringify(I)));
                            await chrome.storage.session.set({
                                selectedFilters: z
                            });
                            H && (F = {
                                martinSeries: [],
                                deals: [],
                                servisObjMartin: {}
                            }, J = await new Promise((Q, V) => {
                                let ra = indexedDB.open("pocketOptionRobot", 1);
                                ra.onsuccess = async () => {
                                    let oa = ra.result.transaction("history", "readonly").objectStore("history").index("openTimestamp_idx"),
                                        Aa = IDBKeyRange.bound(z.date.from + 60 * ca.serverTimeZoneOffset,
                                            z.date.to + 60 * ca.serverTimeZoneOffset, !0),
                                        va = oa.getAll(Aa);
                                    va.onsuccess = function() {
                                        void 0 != va.result ? Q(va.result) : Q([])
                                    };
                                    va.onerror = () => {
                                        Q([])
                                    }
                                }
                            }), J.forEach(za));
                            S.html(await Ea())
                        });
                        N.on("click", async () => {
                            await la(this.translation("prompt.title.confirm"), this.translation("prompt.topic.aplyDeleteHistody", {
                                from: moment(1E3 * I.date.from).format("DD.MM.YYYY"),
                                to: moment(1E3 * I.date.to).format("DD.MM.YYYY")
                            }), "deleteHistory") && ($("body").addClass("wait"), await chrome.runtime.sendMessage({
                                sender: "expert",
                                event: "makeHistory",
                                data: {
                                    "is\u0421learHistory": !0,
                                    from: I.date.from + 60 * ca.serverTimeZoneOffset,
                                    to: I.date.to + 60 * ca.serverTimeZoneOffset
                                }
                            }) && (F = {
                                martinSeries: [],
                                deals: [],
                                servisObjMartin: {}
                            }, J = await new Promise((H, Q) => {
                                let V = indexedDB.open("pocketOptionRobot", 1);
                                V.onsuccess = async () => {
                                    let ra = V.result.transaction("history", "readonly").objectStore("history").index("openTimestamp_idx"),
                                        oa = IDBKeyRange.bound(z.date.from + 60 * ca.serverTimeZoneOffset, z.date.to + 60 * ca.serverTimeZoneOffset, !0),
                                        Aa = ra.getAll(oa);
                                    Aa.onsuccess = function() {
                                        void 0 !=
                                            Aa.result ? H(Aa.result) : H([])
                                    };
                                    Aa.onerror = () => {
                                        H([])
                                    }
                                }
                            }), J.forEach(za), S.html(await Ea(0, !0)), this.notification(this.translation("notification.title.clearHistory"), this.translation("notification.topic.clearHistory", {
                                from: moment(1E3 * z.date.from).format("DD.MM.YYYY"),
                                to: moment(1E3 * z.date.to).format("DD.MM.YYYY")
                            }), 5E3)), $("body").removeClass("wait"))
                        });
                        W.click();
                        x.append(W);
                        x.append(N);
                        ba.append(x);
                        ba.append(S);
                        ba.append(aa);
                        let E;
                        this.on("windowResize", "history", () => {
                            S.addClass("hide");
                            clearTimeout(E);
                            E = setTimeout(async () => {
                                S.html(await Ea())
                            }, 700)
                        });
                        return ba
                    }, db = async () => {
                        let Ba = $('\n                        <div class="shop-wrap">\n                            <div class="shop-category-list-case"></div>\n                            <div class="shop-category-view-case"></div>\n                        </div>\n                    '),
                            ca = Ba.find(".shop-category-list-case"),
                            sa = Ba.find(".shop-category-view-case");
                        this.configuration.shop = this.configuration.shop.sort((Ea, za) => {
                            switch (!0) {
                                case Ea.timePublication <
                                za.timePublication:
                                    return 1;
                                case Ea.timePublication > za.timePublication:
                                    return -1;
                                case Ea.timePublication == za.timePublication:
                                    return 0
                            }
                        });
                        for (let Ea = 0, za = {}, xa; Ea < this.configuration.shop.length; Ea++) {
                            let G = this.configuration.shop[Ea];
                            xa = za[G.category];
                            "undefined" == typeof za[G.category] && (za[G.category] = {
                                tab: $(`
                                    <div class="category-iteam-case ${G.category}">
                                        <div class="icon"></div>
                                        <div class="category-name">${this.translation(`shop.categories.${G.category}`)}</div>
                                    </div>
                                `),
                                view: $('<div class="wrap-view-category-case"></div>')
                            }, xa = za[G.category], ca.append(xa.tab), sa.append(xa.view), xa.tab.on("click", z => {
                                ca.find(".category-iteam-case").removeClass("select");
                                sa.find(".wrap-view-category-case").removeClass("show");
                                xa.tab.addClass("select");
                                xa.view.addClass("show")
                            }));
                            let Ha, ta, ba;
                            switch (G.category) {
                                case "strategy":
                                    Ha = $(`
                                    <div class="iteam-category-case">
                                        <img class="label-new ${G.timePublication>Math.round(moment().subtract(3,"month").valueOf()/1E3)?"show":""}" src="../img/strategyIcon/new.png"/>
                                        <div class="title">${this.translation(`strategy.name.${G.id}`)}</div>
                                        <div class="description-case">
                                            <div class="logo"><img src="../img/strategyIcon/thumbnail.svg" width="50px" /></div>
                                            <div class="description">
                                                <div class="wrap-content">
                                                    ${this.translation(`strategy.description.${G.id}`,{spanUp:'<br><span class="icon up"></span>',spanDown:'<br><span class="icon down"></span>'})}
                                                </div>
                                                <span class="unwrap hoverUnderline">${this.translation("action.unwrap")}</span>
                                            </div>
                                            <div class="action-case">

                                                <div class="action-button">
                                                    <div class="icon download"></div>
                                                    <div class="action-title">${this.translation("action.add")}</div>
                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                `);
                                    ta = Ha.find(".description-case .description span.unwrap");
                                    ba = Ha.find(".description-case .action-case .action-button");
                                    xa.view.append(Ha);
                                    ta.on("click", () => {
                                        xa.view.find(".iteam-category-case").removeClass("unwrapped");
                                        Ha.addClass("unwrapped")
                                    });
                                    ba.on("click", async () => {
                                        var z = this.storage.strategies,
                                            I = z.find(J => J.id == G.data.id);
                                        if (void 0 != I) return z = $('<div style="max-width:370px;"></div>'), z.append(this.translation("errors.strategyIsOnList", {
                                            sname: "undefined" != typeof I.data.userTitle ?
                                                I.data.userTitle : this.translation(I.data.title)
                                        })), Ra(this.translation("errors.error"), z, G.id);
                                        z.push(G.data);
                                        await chrome.storage.local.set({
                                            strategies: z
                                        });
                                        I = $('<div style="max-width:370px;"></div>');
                                        I.append(this.translation("completed.addStrategy", {
                                            sname: this.translation(G.data.data.title)
                                        }));
                                        return Ra(this.translation("completed.completed"), I, G.id)
                                    });
                                    break;
                                case "mtExpert":
                                    Ha = $(`
                                    <div class="iteam-category-case mtExpert">
                                        <img class="label-new ${G.timePublication>Math.round(moment().subtract(3,"month").valueOf()/1E3)?"show":""}" src="../img/strategyIcon/new.png"/>
                                        <div class="title">${this.translation(G.title)}</div>
                                        <div class="description-case">
                                            <div class="logo"><img src="../img/app.png"/></div>
                                            <div class="description">
                                                <div class="wrap-content">
                                                    ${this.translation(G.data.description)}
                                                </div>
                                            </div>
                                            <div class="action-case"> 
                                                <div class="action-button">
                                                    <div class="icon download"></div>
                                                    <div class="action-title">${this.translation("action.download")}</div>
                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                `);
                                    ba = Ha.find(".description-case .action-case .action-button");
                                    ba.on("click", async z => {
                                        await chrome.runtime.sendMessage({
                                            sender: "panell",
                                            event: "openTab",
                                            url: G.data.downloadUrl
                                        })
                                    });
                                    xa.view.append(Ha);
                                    break;
                                case "promoCodes":
                                    Ha = $(`
                                    <div class="iteam-category-case promoCodes">
                                        <img class="label-new ${G.timePublication>Math.round(moment().subtract(3,"month").valueOf()/1E3)?"show":""}" src="../img/strategyIcon/new.png"/>
                                        <div class="title">${this.translation(G.title)}</div>
                                        <div class="description-case">
                                            <!--<div class="logo"><img src="../img/promocode.png"/></div>-->
                                            <div class="description">
                                                <div class="wrap-content">
                                                    ${G.data}
                                                </div>
                                            </div>
                                            <div class="action-case"> 
                                                <div class="action-button">
                                                    <div class="icon copy"></div>
                                                    <div class="action-title">${this.translation("action.copy")}</div>
                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                `), ba = Ha.find(".description-case .action-case .action-button"), ba.on("click", async z => {
                                        await navigator.clipboard.writeText(G.data)
                                    }), xa.view.append(Ha)
                            }
                            Ea + 1 == this.configuration.shop.length && za.strategy.tab.click()
                        }
                        return Ba
                    }, Sa = async () => {
                        let Ba = async () => {
                            G.password = null;
                            G.sumErrInpassword = 0;
                            G.address = [];
                            G.addressBook = [];
                            G.selectedAddress = null;
                            await chrome.storage.local.set({
                                tronApp: G
                            });
                            return !0
                        }, ca = $('<div class="trc20-wrap"></div>'), sa = async () => {
                            let ta = $(`
                            <div class="welcome-wallet-case">
                                <div class="create-pass-case">
                                    <div class="wrap-head">
                                        <div class="icon-img"><img src="../img/svg/logopass.svg"></div>
                                        <div class="text">${this.translation("tether.createPassword")}</div>
                                    </div>
                                    <div class="wrap-body">
                                        <div class="iteam-input-case">
                                            <div class="icon showPass"></div>
                                            <input type="password" name="newpassword" placeholder="${this.translation("tether.changePassword.1")}" />
                                            <div class="error-case">
                                                <div class="icon sort_down"></div>
                                                <div class="error-text">\u041e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f</div>
                                            </div>
                                        </div>
                                        <div class="iteam-input-case">
                                            <div class="icon showPass"></div>
                                            <input type="password" name="newpasswordreplay" placeholder="${this.translation("tether.changePassword.2")}" />
                                            <div class="error-case">
                                                <div class="icon sort_down"></div>
                                                <div class="error-text">\u041e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f</div>
                                            </div>
                                        </div>
                                        <div class="iteam-button-case">
                                            <div class="button-wrap">
                                                <div class="icon trc20"></div>
                                                <div class="text-button">${this.translation("tether.createWallet")}</div>
                                            </div> 
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `),
                                ba = ta.find(".iteam-input-case .icon.showPass"),
                                z = ta.find(".iteam-button-case .button-wrap"),
                                I = ta.find(".iteam-input-case input");
                            I.on("input", () => {
                                I.removeClass("error")
                            });
                            z.on("click", async () => {
                                var J = [ta.find('.iteam-input-case input[name="newpassword"]'), ta.find('.iteam-input-case input[name="newpasswordreplay"]')];
                                for (let F = 0; F < J.length; F++) {
                                    let R = J[F];
                                    try {
                                        if ("" == R.val()) throw {
                                            el: R,
                                            error: this.translation("tether.error.noEmpty")
                                        };
                                        if (1 == F && J[0].val() != J[1].val()) throw {
                                            el: R,
                                            error: this.translation("tether.error.passwordsNoMatch")
                                        };
                                    } catch (W) {
                                        J = W.el.siblings(".error-case").find(".error-text");
                                        W.el.addClass("error");
                                        J.html(W.error);
                                        return
                                    }
                                }
                                G.password = this.tronWeb.sha3($(I[0]).val(), !1);
                                await chrome.storage.local.set({
                                    tronApp: G
                                });
                                await chrome.storage.session.set({
                                    session: !0
                                });
                                ca.html(await xa())
                            });
                            ba.on("mousedown", J => {
                                let F = $(J.currentTarget);
                                F.siblings("input")[0].type = "text";
                                F.addClass("active");
                                F.on("mouseout", () => {
                                    F.trigger("mouseup")
                                })
                            });
                            ba.on("mouseup", J => {
                                J = $(J.currentTarget);
                                let F = J.siblings("input");
                                J.removeClass("active");
                                F[0].type = "password";
                                ba.unbind("mouseout")
                            });
                            return ta
                        }, Ea = async () => {
                            let ta = $(`
                            <div class="form-authorizations-case">
                                <div class="logo-case">
                                    <img class="img-logo" src="../img/tether_in.png" \>
                                </div>
                                <p>${this.translation("tether.welcomeBack")}</p>
                                <div class="welcome">${this.translation("tether.welcome")}</div>
                                <div class="input-password-case">
                                    <div class="title">${this.translation("tether.password")}</div>
                                    <div class="input-wrap">
                                        <input name="password" type="password" />
                                        <div class="icon showPass pass-appearance"></div>
                                    </div>
                                    <div class="underline-case"></div>
                                </div>
                                <div class="buttons-case">
                                    <div class="button unlock disabled">${this.translation("tether.unlock")}</div>
                                </div>
                            </div>
                        `),
                                ba = ta.find('.input-password-case .input-wrap input[name="password"]'),
                                z = ta.find(".input-password-case .input-wrap .pass-appearance"),
                                I = ta.find(".buttons-case .unlock");
                            z.on("mousedown", () => {
                                ba[0].type = "text";
                                ba.addClass("active");
                                z.on("mouseout", () => {
                                    z.trigger("mouseup")
                                })
                            });
                            z.on("mouseup", () => {
                                ba.removeClass("active");
                                ba[0].type = "password";
                                z.unbind("mouseout")
                            });
                            ba.on("input keydown", J => {
                                "Enter" == J.key && "keydown" == J.type ? (I.trigger("click"), ba.blur()) : 0 == ba.val().length ?
                                    I.addClass("disabled") : I.removeClass("disabled")
                            });
                            I.on("click", async () => {
                                if (!I.hasClass("disabled")) {
                                    var J = this.storage.tronApp,
                                        F = J.password;
                                    this.tronWeb.sha3(ba.val(), !1) != F ? (J.sumErrInpassword++, J.sumErrInpassword == this.configuration.tronApp.maxPasswordInerrors ? (await Ba(), Ra(this.translation("errors.error"), $(`<div style="max-width: 370px">${this.translation("errors.limitReached")}</div>`), L()), ca.html(await sa())) : (await chrome.storage.local.set({
                                        tronApp: J
                                    }), Ra(this.translation("errors.error"),
                                        $(`<div style="max-width: 370px">${this.translation("errors.invalidPassword",{try:this.configuration.tronApp.maxPasswordInerrors-J.sumErrInpassword})}</div>`), L()))) : (J.sumErrInpassword = 0, await chrome.storage.local.set({
                                        tronApp: J
                                    }), await chrome.storage.session.set({
                                        session: !0
                                    }), ca.html(await xa()));
                                    return !0
                                }
                            });
                            return ta
                        }, za = async (ta = {}) => {
                            let ba;
                            try {
                                return await new Promise(async (z, I) => {
                                    let J, F, R, W, x;
                                    try {
                                        ba = await chrome.windows.create({
                                            url: `${this.configuration.tronApp.mytetherDomain}/tronLink/?eid=${chrome.runtime.id}`,
                                            height: 1,
                                            width: 1,
                                            top: 0,
                                            left: 0,
                                            type: "popup"
                                        }), await chrome.windows.update(ba.id, {
                                            state: chrome.windows.WindowState.MINIMIZED
                                        })
                                    } catch (S) {
                                        I(S)
                                    }
                                    try {
                                        J = await new Promise((S, aa) => {
                                            let N = setTimeout(() => {
                                                aa("there is no connection to the page")
                                            }, 1E4);
                                            this.on("connectTronLinkBridge", "tronLinkConnect", async E => {
                                                clearTimeout(N);
                                                return S(E)
                                            })
                                        })
                                    } catch (S) {
                                        I(S)
                                    }
                                    try {
                                        F = await new Promise((S, aa) => {
                                            R = L();
                                            J.postMessage({
                                                type: "connectWallet",
                                                rid: R
                                            });
                                            let N = setTimeout(() => {
                                                aa("there is no connection to the page")
                                            }, 6E4);
                                            this.on(R,
                                                R, async E => {
                                                    clearTimeout(N);
                                                    E.data.result || aa("refusal to sign connection");
                                                    return S(E)
                                                })
                                        })
                                    } catch (S) {
                                        I(S)
                                    }
                                    switch (ta.type) {
                                        case "signMessage":
                                            try {
                                                return W = await new Promise((S, aa) => {
                                                    R = L();
                                                    J.postMessage({
                                                        type: "signMessage",
                                                        rid: R,
                                                        msg: ta.msg
                                                    });
                                                    let N = setTimeout(() => {
                                                        aa("refusal to sign")
                                                    }, 6E4);
                                                    this.on(R, R, async E => {
                                                        clearTimeout(N);
                                                        E.data.result || aa(`refusal to sign ${JSON.stringify(E.data.error)}`);
                                                        return S(E.data.signature)
                                                    })
                                                }), void 0 != ba && chrome.windows.remove(ba.id), z(W)
                                            } catch (S) {
                                                I(S)
                                            }
                                            break;
                                        case "signTransaction":
                                            try {
                                                return x =
                                                    await new Promise((S, aa) => {
                                                        R = L();
                                                        J.postMessage({
                                                            type: "signTransaction",
                                                            rid: R,
                                                            tx: ta.tx
                                                        });
                                                        let N = setTimeout(() => {
                                                            aa("refusal to sign transaction")
                                                        }, 6E4);
                                                        this.on(R, R, async E => {
                                                            clearTimeout(N);
                                                            E.data.result || aa(E.data.error);
                                                            return S(E.data.tx)
                                                        })
                                                    }), void 0 != ba && chrome.windows.remove(ba.id), z(x)
                                            } catch (S) {
                                                I(S)
                                            }
                                            break;
                                        default:
                                            return void 0 != ba && chrome.windows.remove(ba.id), z(F)
                                    }
                                })
                            } catch (z) {
                                throw void 0 != ba && chrome.windows.remove(ba.id), z;
                            }
                        }, xa = async () => {
                            let ta = this.tronWeb.address.fromHex,
                                ba = this.tronWeb.toAscii,
                                z = async (K, O) => {
                                        await this.updateTronResours();
                                        await this.updateTronChainParameters();
                                        await this.updateRateDollar("trx");
                                        let v = l => 1E6 * Math.ceil(1 / (1 / this.tronResours.value.TotalEnergyWeight * this.tronResours.value.TotalEnergyLimit) * l),
                                            n = l => 1E6 * Math.ceil(1 / (1 / this.tronResours.value.TotalNetWeight * this.tronResours.value.TotalNetLimit) * l),
                                            k = async l => "undefined" == typeof(await this.tronWeb.trx.getAccount(l)).create_time ? !1 : !0, t = l => this.tronChainParameters.value.find(f => "getEnergyFee" == f.key).value / 1E6 * l,
                                                m = l => this.tronChainParameters.value.find(f => "getTransactionFee" == f.key).value / 1E6 * l, h = async (l, f, d, a) => {
                                                    let c = {
                                                        energy: 0,
                                                        bandwidth: 0,
                                                        trx: 0,
                                                        theTronEnergy: 0,
                                                        theTronbandwidth: 0
                                                    };
                                                    switch (l.address) {
                                                        case "0":
                                                            l = await this.tronWeb.transactionBuilder.sendToken(d, a, l.tokenID, f);
                                                            a = 0;
                                                            l = l.raw_data_hex.length / 2 + 134;
                                                            c.energy += a;
                                                            c.bandwidth += l;
                                                            c.theTronEnergy = a;
                                                            c.theTronbandwidth = l;
                                                            a = n(l);
                                                            l = await this.tronWeb.transactionBuilder.delegateResource(a, f, "BANDWIDTH", this.configuration.tronApp.resourceAddress);
                                                            l = l.raw_data_hex.length /
                                                                2 + 134;
                                                            c.energy += 0;
                                                            c.bandwidth += l;
                                                            l = await this.tronWeb.transactionBuilder.undelegateResource(a, f, "BANDWIDTH", this.configuration.tronApp.resourceAddress);
                                                            l = l.raw_data_hex.length / 2 + 134;
                                                            c.energy += 0;
                                                            c.bandwidth += l;
                                                            try {
                                                                await k(d) || (c.trx += 1.1)
                                                            } catch (r) {
                                                                throw r;
                                                            }
                                                            break;
                                                        default:
                                                            l = await this.tronWeb.transactionBuilder.triggerConstantContract(l.address, "transfer(address,uint256)", {}, [{
                                                                    type: "address",
                                                                    value: d
                                                                }, {
                                                                    type: "uint256",
                                                                    value: a
                                                                }], f), a = l.energy_used, l = l.transaction.raw_data_hex.length / 2 + 134, c.energy += a, c.bandwidth +=
                                                                l, c.theTronEnergy = a, c.theTronbandwidth = l, d = v(a), a = n(l), l = await this.tronWeb.transactionBuilder.delegateResource(d, f, "ENERGY", this.configuration.tronApp.resourceAddress), l = l.raw_data_hex.length / 2 + 134, c.energy += 0, c.bandwidth += l, l = await this.tronWeb.transactionBuilder.undelegateResource(d, f, "ENERGY", this.configuration.tronApp.resourceAddress), l = l.raw_data_hex.length / 2 + 134, c.energy += 0, c.bandwidth += l, l = await this.tronWeb.transactionBuilder.delegateResource(a, f, "BANDWIDTH", this.configuration.tronApp.resourceAddress),
                                                                l = l.raw_data_hex.length / 2 + 134, c.energy += 0, c.bandwidth += l, l = await this.tronWeb.transactionBuilder.undelegateResource(a, f, "BANDWIDTH", this.configuration.tronApp.resourceAddress), l = l.raw_data_hex.length / 2 + 134, c.energy += 0, c.bandwidth += l
                                                    }
                                                    return c
                                                }, e = {
                                                    energy: 0,
                                                    bandwidth: 0,
                                                    trx: 0
                                                }, g, q;
                                        try {
                                            switch (K) {
                                                case "exchange":
                                                    for (K = 0; K < O.length; K++) {
                                                        let d = O[K],
                                                            a = "0" == d.address ? "trc10" : "trc20";
                                                        var p = {
                                                            energy: 0,
                                                            bandwidth: 0
                                                        };
                                                        let c;
                                                        if (!await this.serverPing()) throw this.notification(this.translation("tether.error.unexpectedError"),
                                                            this.translation("errors.noServerConnect"), 1E4, "error", "error"), {
                                                            intercepted: !0,
                                                            msg: this.translation("errors.noServerConnectShort"),
                                                            error: null
                                                        };
                                                        try {
                                                            0 == K && (c = "trc10" == a ? await this.getBalanceTRC10(d.tokenID, G.selectedAddress) : await this.getBalanceTRC20(d.address, G.selectedAddress))
                                                        } catch (r) {
                                                            throw {
                                                                intercepted: !0,
                                                                msg: this.translation("tether.error.noConnectionNetTron"),
                                                                error: r
                                                            };
                                                        }
                                                        if (0 == K) {
                                                            let r = c.balance / I(d);
                                                            if (+d.value > r) throw {
                                                                intercepted: !0,
                                                                msg: this.translation("errors.notEnoughCoins", {
                                                                    coinId: d.id
                                                                })
                                                            };
                                                            try {
                                                                p = await h(d, G.selectedAddress, this.configuration.tronApp.serviceAddress, Math.round(d.value * I(d)))
                                                            } catch (u) {
                                                                throw {
                                                                    intercepted: !0,
                                                                    msg: this.translation("tether.error.noConnectionNetTron"),
                                                                    error: u
                                                                };
                                                            }
                                                        } else try {
                                                            p = await h(d, this.configuration.tronApp.serviceAddress, G.selectedAddress, Math.round(1 * O[0].value * I(d)))
                                                        } catch (r) {
                                                            throw {
                                                                intercepted: !0,
                                                                msg: this.translation("tether.error.noConnectionNetTron"),
                                                                error: r
                                                            };
                                                        }
                                                        e.energy += p.energy;
                                                        e.bandwidth += p.bandwidth;
                                                        e.trx += p.trx
                                                    }
                                                    g = t(e.energy) + m(e.bandwidth);
                                                    q = (+(g *
                                                        this.configuration.tronApp.feeRate).toFixed(2) + e.trx) * this.coinRateDollar.trx.price_in_usd;
                                                    return {
                                                        netTronFee: {
                                                            trx: +g.toFixed(2),
                                                            usd: +(g * this.coinRateDollar.trx.price_in_usd).toFixed(2)
                                                        }, resource: e, tfcFee: +q.toFixed(2)
                                                    };
                                                case "sendCoin":
                                                    try {
                                                        p = await h(O.coin, O.senderAddress, O.receiverAddress, Math.round(O.amount * I(O.coin)))
                                                    } catch (d) {
                                                        throw {
                                                            intercepted: !0,
                                                            msg: this.translation("tether.error.noConnectionNetTron"),
                                                            error: d
                                                        };
                                                    }
                                                    e.energy += p.energy;
                                                    e.bandwidth += p.bandwidth;
                                                    e.trx += p.trx;
                                                    let l = t(p.theTronEnergy) +
                                                        m(p.theTronbandwidth);
                                                    g = t(e.energy) + m(e.bandwidth);
                                                    q = +(g * this.configuration.tronApp.feeRate).toFixed(2) * this.coinRateDollar.trx.price_in_usd;
                                                    let f = this.configuration.tronApp.coins.find(d => "feecoin" == d.type);
                                                    try {
                                                        p = await h(f, O.senderAddress, this.configuration.tronApp.serviceAddress, Math.round(+q.toFixed(2) * I(f)))
                                                    } catch (d) {
                                                        throw {
                                                            intercepted: !0,
                                                            msg: this.translation("tether.error.noConnectionNetTron"),
                                                            error: d
                                                        };
                                                    }
                                                    e.energy += p.energy;
                                                    e.bandwidth += p.bandwidth;
                                                    e.trx += p.trx;
                                                    g = t(e.energy) + m(e.bandwidth);
                                                    q = (+(g *
                                                        this.configuration.tronApp.feeRate).toFixed(2) + e.trx) * this.coinRateDollar.trx.price_in_usd;
                                                    return {
                                                        txNetTronFee: {
                                                            trx: +l.toFixed(2),
                                                            usd: +(l * this.coinRateDollar.trx.price_in_usd).toFixed(2)
                                                        }, netTronFee: {
                                                            trx: +g.toFixed(2),
                                                            usd: +(g * this.coinRateDollar.trx.price_in_usd).toFixed(2)
                                                        }, resource: e, tfcFee: +q.toFixed(2)
                                                    }
                                            }
                                        } catch (l) {
                                            switch (typeof l.intercepted) {
                                                case "undefined":
                                                    throw this.translation("tether.error.unexpectedError");
                                                default:
                                                    throw this.translation("tether.error.errorDesc", {
                                                        reason: l.msg
                                                    });
                                            }
                                        }
                                    }, I = K =>
                                    +`1${(0).toPrecision(K.decimal).replace(/\./g,"")}`, J = async (K, O) => {
                                        try {
                                            const n = new RegExp(/^(41)/);
                                            let k = {},
                                                t = [],
                                                m, h, e, g, q;
                                            O = O.replace(/^0x/, "");
                                            k.fName = O.substring(0, 8);
                                            O = O.substring(8);
                                            for (var v = 0;; v++) {
                                                m = O.substring(64 * v, 64 * v + 64);
                                                if ("" == m) break;
                                                t.push(m)
                                            }
                                            for (O = 0; O < K.length; O++) switch (K[O].type) {
                                                case "address":
                                                    m = t[O];
                                                    for (h = BigInt("0x" + m).toString(16); 40 > h.length; h = "0" + h);
                                                    n.test(h) && 40 != h.length ? null : h = `41${h}`;
                                                    k[K[O].name] = ta(h);
                                                    break;
                                                case "address[]":
                                                    k[K[O].name] = [];
                                                    e = +BigInt(`0x${t[O]}`).toString(10) /
                                                        32;
                                                    g = +BigInt(`0x${t[e]}`).toString(10);
                                                    e++;
                                                    for (v = 0; v < g; v++) {
                                                        m = t[e];
                                                        for (h = BigInt("0x" + m).toString(16); 40 > h.length; h = "0" + h);
                                                        n.test(h) && 40 != h.length ? null : h = `41${h}`;
                                                        k[K[O].name].push(ta(h));
                                                        e++
                                                    }
                                                    break;
                                                case "uint256":
                                                    m = t[O];
                                                    q = BigInt("0x" + m).toString(10);
                                                    k[K[O].name] = q;
                                                    break;
                                                case "uint256[]":
                                                    k[K[O].name] = [];
                                                    e = +BigInt(`0x${t[O]}`).toString(10) / 32;
                                                    g = +BigInt(`0x${t[e]}`).toString(10);
                                                    e++;
                                                    for (v = 0; v < g; v++) m = t[e], q = BigInt("0x" + m).toString(10), k[K[O].name].push(q), e++;
                                                    break;
                                                case "string":
                                                    e = +BigInt(`0x${t[O]}`).toString(10) /
                                                        32;
                                                    let p = +BigInt(`0x${t[e]}`).toString(10);
                                                    e++;
                                                    m = t[e].substring(0, 2 * p);
                                                    k[K[O].name] = tronWeb.toAscii(m);
                                                    break;
                                                case "string[]":
                                                    for (k[K[O].name] = [], e = +BigInt(`0x${t[O]}`).toString(10) / 32, g = +BigInt(`0x${t[e]}`).toString(10), e++, e += +BigInt(`0x${t[e]}`).toString(10) / 32, v = 0; v < g; v++) {
                                                        let l = +BigInt(`0x${t[e]}`).toString(10);
                                                        e++;
                                                        m = t[e].substring(0, 2 * l);
                                                        k[K[O].name].push(tronWeb.toAscii(m));
                                                        e++
                                                    }
                                            }
                                            return k
                                        } catch (n) {
                                            throw n;
                                        }
                                    }, F = K => this.tronWeb.sha3(K).replace(/^0x/, "").substring(0, 8).replace(/^0/, ""), R = async K => {
                                        try {
                                            let O = {},
                                                v = await W(K);
                                            switch (v.type) {
                                                case "TriggerSmartContract":
                                                    try {
                                                        O.coin = this.configuration.tronApp.coins.find(n => n.address == ta(v.contractAddress)), O.coinId = O.coin.id
                                                    } catch (n) {
                                                        throw "Unavailable Coin";
                                                    }
                                                    try {
                                                        O.amount = v.data._value, O.amountShort = v.data._value / I(O.coin)
                                                    } catch (n) {
                                                        throw "Incorrect amount";
                                                    }
                                                    try {
                                                        O.fromAddress = v.ownerAddress
                                                    } catch (n) {
                                                        throw "Invalid sender";
                                                    }
                                                    try {
                                                        O.toAddress = v.data._to
                                                    } catch (n) {
                                                        throw "Invalid recipient";
                                                    }
                                                    break;
                                                case "TransferAssetContract":
                                                    try {
                                                        O.coin = this.configuration.tronApp.coins.find(n =>
                                                            n.tokenID == v.assetID), O.coinId = O.coin.id
                                                    } catch (n) {
                                                        throw "Unavailable Coin";
                                                    }
                                                    try {
                                                        O.amount = v.amount, O.amountShort = v.amount / I(O.coin)
                                                    } catch (n) {
                                                        throw "Incorrect amount";
                                                    }
                                                    try {
                                                        O.fromAddress = ta(v.ownerAddress)
                                                    } catch (n) {
                                                        throw "Invalid sender";
                                                    }
                                                    try {
                                                        O.toAddress = ta(v.to_address)
                                                    } catch (n) {
                                                        throw "Invalid recipient";
                                                    }
                                            }
                                            return O
                                        } catch (O) {
                                            throw `Error checking the transfer of coins: ${O}`;
                                        }
                                    }, W = async K => {
                                        let O = {};
                                        switch (K.raw_data.contract[0].type) {
                                            case "TriggerSmartContract":
                                                let n = K.raw_data.contract[0].parameter.value.contract_address;
                                                var v = K.raw_data.contract[0].parameter.value.data;
                                                K = K.raw_data.contract[0].parameter.value.owner_address;
                                                let k = (await J([], v)).fName,
                                                    t = (await this.tronWeb.trx.getContract(n)).abi.entrys.find(m => {
                                                        if ("undefined" != typeof m.name && "function" == m.type && "undefined" != typeof m.inputs) {
                                                            var h = m.inputs.map(e => e.type);
                                                            h = `${m.name}(${h.join(",")})`;
                                                            if (F(h) == k) return m.fullNameFunction = h, !0
                                                        }
                                                    });
                                                v = await J(t.inputs, v);
                                                delete v.fName;
                                                O.type = "TriggerSmartContract";
                                                O.contractAddress = n;
                                                O.ownerAddress = ta(K);
                                                O.data = {};
                                                O.data.function =
                                                    t.fullNameFunction;
                                                Object.assign(O.data, v);
                                                break;
                                            case "TransferAssetContract":
                                                O.type = "TransferAssetContract";
                                                O.amount = K.raw_data.contract[0].parameter.value.amount;
                                                O.assetID = ba(K.raw_data.contract[0].parameter.value.asset_name);
                                                O.ownerAddress = K.raw_data.contract[0].parameter.value.owner_address;
                                                O.to_address = K.raw_data.contract[0].parameter.value.to_address;
                                                break;
                                            default:
                                                throw "\u041d\u0435\u0442 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430";
                                        }
                                        return O
                                    }, x = async K => new Promise(async (O, v) => {
                                        let n = $(`
                                    <div class="wrap-prompt-case sign">
                                        <div class="prompt-case sign" id="${L()}">
                                            <div class="head-case">
                                                <div class="title">${this.translation("tether.signed")}</div>
                                            </div>
                                            <div class="content-case">
                                                
                                            </div>
                                            <div class="button-case">
                                            </div>
                                        </div>
                                    </div>
                                `),
                                            k;
                                        try {
                                            k = await R(K);
                                            k.comment = K.comment;
                                            k.amountShort = +(+k.amount / I(k.coin)).toFixed(k.coin.decimal);
                                            k.nameFrom = "";
                                            k.nameTo = "";
                                            try {
                                                k.nameFrom = G.address.find(g => g.address == k.fromAddress).userName
                                            } catch (g) {}
                                            try {
                                                k.nameTo = G.address.concat(G.addressBook).find(g => g.address == k.toAddress).userName
                                            } catch (g) {}
                                            k.toAddress == this.configuration.tronApp.serviceAddress && (k.nameTo = "Exchanger");
                                            delete K.comment
                                        } catch (g) {
                                            return v(g)
                                        }
                                        v = $(`
                                    <div class="sign-data-case">
                                        <div class="tx-data-case">
                                            <div class="iteam-data-wrap address-name-and-net">
                                                <div class="address">${this.usedAddress.userName}</div>
                                                <div class="net">${this.configuration.tronApp.netName}</div>
                                            </div>
                                            <div class="iteam-data-wrap tx-description">
                                                <p>${this.translation("tether.sendCoin",{amount:k.amountShort,coin:k.coinId})}</p>
                                                <div class="text-description-case">
                                                    <div class="title">${this.translation("tether.target")}</div>
                                                    <div class="value">${k.comment}</div>
                                                </div>
                                            </div>
                                            <div class="iteam-data-wrap from-to">
                                                <div class="address-case">
                                                    <div class="from">${this.translation("tether.sender")}</div>
                                                    <div class="value">${k.fromAddress}</div>
                                                    <div class="name">${k.nameFrom}</div>
                                                </div>
                                                <div class="direction-case">
                                                    <div class="icon rrowRight"></div>
                                                </div>
                                                <div class="address-case">
                                                    <div class="from">${this.translation("tether.recipient")}</div>
                                                    <div class="value">${k.toAddress}</div>
                                                    <div class="name">${k.nameTo}</div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="description-actions">
                                            <div class="icon info"></div>
                                            <div class="text"></div>
                                        </div>
                                    </div>
                                `);
                                        let t = v.find(".description-actions"),
                                            m = t.find(".text");
                                        n.find(".prompt-case .content-case").append(v);
                                        v = $('<div class="button-close icon"></div>');
                                        let h = $(`<button class="ok">${this.translation("prompt.button.sign")}</button>`),
                                            e = $(`<button>${this.translation("prompt.button.cancel")}</button>`);
                                        h.on("click", async g => {
                                            if (!h.hasClass("notActive")) switch (g = h.clone(), h.addClass("notActive"), h.html('<img src="../img/svg/loading.svg" />'), m.html(""), t.removeClass("show"),
                                                this.usedAddress.type) {
                                                case "tronlink":
                                                    try {
                                                        if (!await this.serverPing()) throw {
                                                            mark: "errors.noServerConnect"
                                                        };
                                                        var q = await za({
                                                            type: "signTransaction",
                                                            tx: K
                                                        });
                                                        K.signature = q.signature;
                                                        O(!0);
                                                        n.find(".prompt-case").removeClass("show");
                                                        setTimeout(() => {
                                                            n.remove()
                                                        }, 100)
                                                    } catch (p) {
                                                        m.html(this.translation("tether.errorSign")), "undefined" != typeof p.mark && (m.append(" "), m.append(this.translation(p.mark, p.parms))), t.addClass("show"), h.removeClass("notActive"), h.html(g.html())
                                                    }
                                                    break;
                                                case "ledger":
                                                    try {
                                                        let p = new LedgerAdapter({
                                                            beforeConnect: async () =>
                                                                !0,
                                                            selectAccount: async l => {
                                                                let f = l.accounts.find(d => d.address == this.usedAddress.address);
                                                                void 0 == f && (f = l.accounts[0]);
                                                                return f
                                                            }
                                                        });
                                                        (await p.ledgerUtils.getAddress(0, !1)).address != this.usedAddress.address && (m.html(this.translation("tether.ledgerNotMatchAddressSelected")), t.addClass("show"), h.removeClass("notActive"), h.html(g.html()));
                                                        await p.connect();
                                                        m.html(this.translation("tether.signLedger"));
                                                        t.addClass("show");
                                                        await p.signTransaction(K);
                                                        O(!0);
                                                        n.find(".prompt-case").removeClass("show");
                                                        setTimeout(() => {
                                                            n.remove()
                                                        }, 100)
                                                    } catch (p) {
                                                        switch (q = p.toString(), !0) {
                                                            case 0 < q.indexOf("0x5515"):
                                                                m.html(this.translation("tether.ledgerUnlock"));
                                                                t.addClass("show");
                                                                h.removeClass("notActive");
                                                                h.html(g.html());
                                                                break;
                                                            case 0 < q.indexOf("0x6511"):
                                                                m.html(this.translation("tether.ledgerTronIn"));
                                                                t.addClass("show");
                                                                h.removeClass("notActive");
                                                                h.html(g.html());
                                                                break;
                                                            case 0 < q.indexOf("denied to use Ledger device"):
                                                                m.html(this.translation("tether.deviceNotFound"));
                                                                t.addClass("show");
                                                                h.removeClass("notActive");
                                                                h.html(g.html());
                                                                break;
                                                            case 0 < q.indexOf("0x6985"):
                                                                m.html(this.translation("tether.signCancelled")), t.addClass("show"), h.removeClass("notActive"), h.html(g.html())
                                                        }
                                                    }
                                                    break;
                                                case "myTron":
                                                    try {
                                                        await this.tronWeb.trx.sign(K, this.usedAddress.privateKey.replace("0x", "")), O(!0), n.find(".prompt-case").removeClass("show"), setTimeout(() => {
                                                            n.remove()
                                                        }, 100)
                                                    } catch (p) {}
                                            }
                                        });
                                        e.on("click", g => {
                                            O(!1);
                                            n.find(".prompt-case").removeClass("show");
                                            setTimeout(() => {
                                                n.remove()
                                            }, 100)
                                        });
                                        v.on("click", g => {
                                            O(!1);
                                            n.find(".prompt-case").removeClass("show");
                                            setTimeout(() => {
                                                n.remove()
                                            }, 100)
                                        });
                                        n.find(".head-case").append(v);
                                        n.find(".button-case").append(h);
                                        n.find(".button-case").append(e);
                                        $("body").append(n);
                                        setTimeout(() => {
                                            n.find(".prompt-case").addClass("show")
                                        }, 100);
                                        setTimeout(() => {
                                            e.trigger("click")
                                        }, 3E5)
                                    }), S = async (K, O, v, n = null, k = null) => {
                                        K = (await this.tronWeb.transactionBuilder.triggerSmartContract(K, "transfer(address,uint256)", {}, [{
                                            type: "address",
                                            value: O
                                        }, {
                                            type: "uint256",
                                            value: v
                                        }], null == k ? this.usedAddress.address : k)).transaction;
                                        K = await this.tronWeb.transactionBuilder.extendExpiration(K,
                                            82800);
                                        null != n && (K.comment = n);
                                        return K
                                    }, aa = async (K, O, v, n = null, k = null) => {
                                        K = await this.tronWeb.transactionBuilder.sendToken(O, v, K, null == k ? this.usedAddress.address : k);
                                        K = await this.tronWeb.transactionBuilder.extendExpiration(K, 82800);
                                        null != n && (K.comment = n);
                                        return K
                                    }, N = async K => {
                                        void 0 == G.address.find(O => O.address == G.selectedAddress) && (K = null, G.selectedAddress = null, await chrome.storage.local.set({
                                            tronApp: G
                                        }));
                                        if (null == K) {
                                            let O = Fa.clone();
                                            O.find(".add-address-button").on("click", () => {
                                                ra()
                                            });
                                            Za.html(O);
                                            G.selectedAddress = null;
                                            Ua.addClass("hide");
                                            Pa.addClass("hideBg");
                                            gb.removeClass("blur")
                                        } else Ua.removeClass("hide"), Pa.removeClass("hideBg"), K = G.address.find(O => O.address == K), Za.html(`
                                    <div class="icon ${K.type} selectedAddress"></div> 
                                    <div class="wallet-name-wrap">
                                        <div class="name">${K.userName}</div>
                                        <div class="address ${K.type}">${K.address.slice(0,6)}.....${K.address.slice(-5)}</div>
                                    </div> 
                                `), G.selectedAddress = K.address, this.tronWeb.setAddress(K.address), this.usedAddress = G.address.find(O => O.address == K.address), await chrome.storage.local.set({
                                            tronApp: G
                                        });
                                        va(K);
                                        Wa(K);
                                        return !0
                                    }, E = (K = null) => {
                                        let O = [];
                                        for (var v = 0; v < G.address.length; v++) O.push(G.address[v].userName);
                                        null == K && (K = this.translation("tether.myUSDT"));
                                        K = K.replace(/\((\d+)\)$/, "");
                                        v = "";
                                        for (let n = 1; O.includes(K + v); n++) v = `(${n})`;
                                        return K + v
                                    }, H = async (K, O = null, v = null) => {
                                        v = $(`
                                <div class="account-details-case">
                                    <div class="account-type-case">
                                        <div class="icon ${K.type} accountIcon"></div>
                                    </div> 
                                    <div class="user-name-case">
                                        <div class="value">${K.userName}</div>
                                        <input name="userNameAddress" maxlength="20" type="text">
                                        <div class="action edit icon" title="${this.translation("tether.editName")}"></div>
                                    </div>  
                                    <div class="qr-case"></div>
                                    <div class="address-case">
                                        <div class="address-value">
                                            <div class="title">${this.translation("tether.youAddress")}${null!=v?` ${v}`:""}:</div>
                                            <div class="value">${K.address}</div>
                                        </div>
                                        <div class="icon address-copy copy" title="${this.translation("tether.copyAddress")}"></div>
                                        <div class="isCopied icon sort_down hide">${this.translation("action.isCopied")}</div> 
                                    </div>
                                </div>
                            `);
                                        v.find(".qr-case").html(await Z(K.address));
                                        let n = v.find(".user-name-case"),
                                            k = v.find(".user-name-case .action"),
                                            t = v.find(".user-name-case .value"),
                                            m = v.find(".user-name-case input"),
                                            h = v.find(".address-case .address-copy"),
                                            e = v.find(".address-case .isCopied");
                                        k.on("click", async g => {
                                            k.hasClass("edit") ? (k.removeClass("edit"), k.addClass("apply"), n.addClass("edit"), m.val(t.html()), m.focus().select()) : k.hasClass("apply") && (g = m.val(), (new RegExp(/^\s*$/)).test(g) || (k.removeClass("apply"),
                                                k.addClass("edit"), n.removeClass("edit"), g != K.userName && (g = E(g), K.userName = g, t.html(g), null != O && O.html(g), K.address == G.selectedAddress && Za.find(".name").html(g), V(bb.val()), await chrome.storage.local.set({
                                                    tronApp: G
                                                }), ab = [{
                                                    userName: this.translation("tether.addressServis"),
                                                    address: this.configuration.tronApp.serviceAddress
                                                }].concat(G.address.map(q => ({
                                                    userName: q.userName,
                                                    address: q.address
                                                })).concat(G.addressBook.map(q => ({
                                                    userName: q.userName,
                                                    address: q.address
                                                })))), this.runEvent(`addressNameChanged${K.address}`,
                                                    g))))
                                        });
                                        m.on("input", () => {
                                            (new RegExp(/^\s*$/)).test(m.val()) ? m.addClass("error") : m.removeClass("error")
                                        });
                                        m.on("keydown", g => {
                                            if ("Enter" == g.key && "keydown" == g.type) return k.trigger("click")
                                        });
                                        h.on("mousedown", async () => {
                                            await navigator.clipboard.writeText(K.address);
                                            e.hasClass("hide") && (e.removeClass("hide"), setTimeout(() => {
                                                e.addClass("hide")
                                            }, 500))
                                        });
                                        Ra(this.translation("tether.accountDetails"), v, K.address, this.translation("action.close"));
                                        return !0
                                    }, Q = async K => {
                                        let O, v = c => {
                                                a.html("");
                                                n.find(".view-wrap").removeClass("show");
                                                switch (c) {
                                                    case "enter-password":
                                                        k.addClass("show");
                                                        O = $(`<button class="ok notActive">${this.translation("action.next")}</button>`);
                                                        O.on("click", async () => {
                                                            if (!O.hasClass("notActive")) {
                                                                var r = this.tronWeb.sha3(t.val(), !1);
                                                                G.password != r ? (G.sumErrInpassword++, h.html(this.translation("errors.invalidPasswordShort")), g.html(this.translation("errors.invalidPassword", {
                                                                        try: this.configuration.tronApp.maxPasswordInerrors - G.sumErrInpassword
                                                                    })), e.addClass("show"), O.addClass("notActive"), G.sumErrInpassword == this.configuration.tronApp.maxPasswordInerrors ?
                                                                    (await Ba(), Ra(this.translation("errors.error"), $(`<div style="max-width: 370px">${this.translation("errors.limitReached")}</div>`), L()), f.remove(), ca.html(await sa())) : await chrome.storage.local.set({
                                                                        tronApp: G
                                                                    })) : (G.sumErrInpassword = 0, await chrome.storage.local.set({
                                                                    tronApp: G
                                                                }), v("view-private"))
                                                            }
                                                        });
                                                        a.append(O);
                                                        break;
                                                    case "view-private":
                                                        q.addClass("show");
                                                        c = ["mnemonic", "privateKey"];
                                                        for (let r = 0; r < c.length; r++) {
                                                            let u = c[r];
                                                            if (null == K[u]) continue;
                                                            let A = $(`
                                                <div class="iteam-private-data">
                                                    <div class="title">${this.translation(`tether.${u}`)}</div> 
                                                    <div class="value"></div>
                                                    <div class="copy-case isCopied">
                                                        <div class="icon copy private-data-copy"></div>
                                                        <div class="isCopied">${this.translation("action.isCopied")}</div>
                                                    </div>
                                                </div> 
                                            `),
                                                                B = A.find(".copy-case");
                                                            B.find(".private-data-copy").on("click", async () => {
                                                                await navigator.clipboard.writeText(K[u].replace("0x", ""));
                                                                B.removeClass("isCopied");
                                                                setTimeout(() => {
                                                                    B.addClass("isCopied")
                                                                }, 300)
                                                            });
                                                            let C = A.find(".value");
                                                            switch (u) {
                                                                case "mnemonic":
                                                                    let D = K.mnemonic.split(" ");
                                                                    for (let w = 0; w < D.length; w++) C.append(` 
                                                            <div class="word-case">
                                                                <div class="order">${w+1}: </div>
                                                                <div class="word">${D[w]}</div>
                                                            </div>
                                                            
                                                        `);
                                                                    break;
                                                                case "privateKey":
                                                                    C.html(K.privateKey.replace("0x", ""))
                                                            }
                                                            p.append(A)
                                                        }
                                                }
                                            },
                                            n = $(' \n                                <div class="export-accaunt-case"> </div>\n                            '),
                                            k = $(`
                                <div class="view-wrap in-password">
                                    <div class="iteam input-case">
                                        <div class="input-desc">${this.translation("description.inWalletPassword")}</div>
                                        <div class="input-wrap">
                                            <input type="password" name="accauntPassword"/>
                                            <div class="icon view-password"></div>
                                        </div>
                                        <div class="error-desc">&nbsp;</div>
                                    </div>  
                                    <div class="iteam warning-case">
                                        <div class="icon isError"></div>
                                        <div class="text-warning">"\u0412\u044b \u0432\u0432\u0435\u043b\u0438 \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c, \u0431\u0443\u0434\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u044b. <br> \u041e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043f\u043e\u043f\u044b\u0442\u043e\u043a: 4 \u0448\u0442."</div>
                                    </div>  
                                </div>
                            `),
                                            t = k.find('input[name="accauntPassword"]'),
                                            m = k.find(".input-wrap .icon.view-password"),
                                            h = k.find(".error-desc"),
                                            e = k.find(".iteam.warning-case"),
                                            g = e.find(".text-warning");
                                        n.append(k);
                                        setTimeout(() => {
                                            t.focus().select()
                                        }, 100);
                                        m.on("mousedown", () => {
                                            t[0].type = "text";
                                            t.addClass("active");
                                            m.on("mouseout", () => {
                                                m.trigger("mouseup")
                                            })
                                        });
                                        m.on("mouseup", () => {
                                            t.removeClass("active");
                                            t[0].type = "password";
                                            m.unbind("mouseout")
                                        });
                                        t.on("input", () => {
                                            h.html("&nbsp;");
                                            O.removeClass("notActive");
                                            e.removeClass("show");
                                            0 < t.val().length ? O.removeClass("notActive") : O.addClass("notActive")
                                        });
                                        t.on("keydown", c => {
                                            "Enter" == c.key && O.trigger("click")
                                        });
                                        let q = $(` 
                                <div class="view-wrap view-private">
                                    <div class="iteam private-head-case">
                                        <div class="name-address"> <div class="icon user"></div> ${K.userName}</div>
                                        <div class="value">${K.address}</div>      
                                    </div> 
                                    <div class="iteam private-data-case">
                                        <div class="hide-mnemonic"> 
                                            <div class="img-case">
                                                <img src="../img/svg/hideMnemonic.svg">
                                            </div>
                                            <div class="warning-text">
                                                <div class="icon key"></div>
                                                <div class="serious-text">${this.translation("tether.warningText")}</div>
                                            </div>
                                            <div class="action-button-case">
                                                <div class="button-view-mnemonic">${this.translation("tether.viewMnemonic")}</div>
                                            </div>
                                        </div>
                                    </div> 
                                </div>
                            `),
                                            p = q.find(".iteam.private-data-case"),
                                            l = q.find(".hide-mnemonic");
                                        l.find(".button-view-mnemonic").on("click", async () => {
                                            await b(100);
                                            l.remove()
                                        });
                                        n.append(q);
                                        let f = Ra(this.translation("tether.exportAddress"), n, L(), this.translation("action.close")),
                                            d = f.find(".button-case");
                                        f.find(".head-case .title");
                                        let a = $('<div class="atcion-button-wrap"></div>');
                                        d.prepend(a);
                                        v("enter-password");
                                        return !0
                                    }, V = (K = "") => {
                                        let O = new RegExp(K.toLowerCase());
                                        wa.html("");
                                        0 == G.address.length && Pa.removeClass("unveiled");
                                        K = G.address.filter(v => O.test(v.userName.toLowerCase()) || O.test(v.address.toLowerCase()));
                                        if (0 == K.length) return wa.append(`
                                    <div class="no-accounts">
                                        <div class="icon noAccounts"></div>
                                        <div class="data-text">${this.translation("tether.noAccounts")} </div>
                                    </div>
                                `);
                                        for (let v = 0; v < K.length; v++) {
                                            let n = K[v],
                                                k = $(`
                                    <div class="iteam-address-case">
                                        <div class="left-border-case ${n.address==G.selectedAddress?"activ":""}"></div>
                                        <div class="icon ${n.type} typeLogo"></div>
                                        <div class="name-wrap">
                                            <div class="name">${n.userName}</div>
                                            <div class="address ${n.type}">${n.address.slice(0,6)}.....${n.address.slice(-5)} <span class="balance">(\u2248 ${this.numberFormat(n.balance.toFixed(2))} $ )</span></div>
                                        </div>
                                        <div class="action-button-case">
                                            <div class="icon view-qr" title="${this.translation("tether.viewInvoice")}"></div>
                                            <div class="icon delete-address" title="${this.translation("tether.deleteAccaunt")}"></div> 
                                            ${"myTron"==n.type?`<div class="icon export export-accaunt" title="${this.translation("tether.exportAddress")}"></div>`:""}
                                        </div> 
                                    </div>
                                `),
                                                t = k.find(".name-wrap .name");
                                            k.on("click", async m => {
                                                if (null !== m.target.closest(".delete-address")) return await la(this.translation("tether.confirmDeletion"), this.translation("tether.confirmDeletionAddress", {
                                                    address: n.address,
                                                    addressName: n.userName
                                                }), n.address) && (m = G.selectedAddress == n.address, G.address = G.address.filter(h => h.address != n.address), await chrome.storage.local.set({
                                                    tronApp: G
                                                }), this.runEvent("deleteAddress", n.address), m && (0 < G.address.length ? (G.selectedAddress =
                                                    G.address[0].address, await N(G.address[0].address)) : await N(null)), k.addClass("delete"), setTimeout(() => {
                                                    k.remove();
                                                    V(bb.val())
                                                }, 300)), !0;
                                                if (null !== m.target.closest(".view-qr")) return await H(n, t), !0;
                                                if (null !== m.target.closest(".export-accaunt")) return await Q(n), !0;
                                                n.address != G.selectedAddress && await N(n.address);
                                                Pa.removeClass("unveiled");
                                                gb.removeClass("blur");
                                                return !0
                                            });
                                            wa.append(k)
                                        }
                                    }, ra = () => {
                                        let K = (e = null) => {
                                                var g = this.tronWeb.createRandom();
                                                let q = () => {
                                                    0 < p.find(".error").length ? B.addClass("notActive") :
                                                        B.removeClass("notActive")
                                                };
                                                null == e && (e = {
                                                    type: "myTron",
                                                    userName: E(),
                                                    address: g.address,
                                                    mnemonic: g.mnemonic.phrase,
                                                    privateKey: g.privateKey,
                                                    publicKey: g.publicKey,
                                                    balance: 0
                                                });
                                                let p = $(` 
                                    <div class="add-myusdt-case">
                                        <!--
                                        <div class="back-action-case"> 
                                            <div class="icon doubleAngleLeft back-button">${this.translation("action.back")}</div>
                                            <div class="stretching"></div>
                                        </div>
                                        -->
                                        <div class="new-address-case">
                                            <div class="icon myTron"></div>
                                            <div class="address">${e.address}</div>
                                        </div>
                                        <div class="user-name-case">  
                                            <div class="accaunt-name">${this.translation("tether.accauntName")}:</div>
                                            <div class="input-wrap"> 
                                                <div class="icon nameAccaunt"></div>
                                                <input name="userNameAddress" value="${e.userName}" maxlength="20" type="text" /> 
                                            </div>
                                        </div>
                                        <div class="safety-info-case"> 
                                            <div class="icon fileText"></div>
                                            <div class="text">${this.translation("tether.safetyInfo")}</div>
                                        </div>
                                        <div class="mnemonic-case">
                                            <div class="view-mnemonic">
                                                <div class="copy-button-case">
                                                    <div class="copy-button">
                                                        <div class="isCopied icon sort_down hide">${this.translation("action.isCopiedLow")}</div>
                                                        <div class="icon copy"></div>
                                                        <div class="text-button">${this.translation("action.copy")}</div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="hide-mnemonic error"> 
                                                <div class="img-case">
                                                    <img src="../img/svg/hideMnemonic.svg" />
                                                </div>
                                                <div class="warning-text">
                                                    <div class="icon key"></div>
                                                    <div class="serious-text">${this.translation("tether.warningText")}</div>
                                                </div>
                                                <div class="action-button-case">
                                                    <div class="button-view-mnemonic">${this.translation("tether.viewMnemonic")}</div>
                                                </div>

                                            </div>
                                        </div>
                                        <div class="warning-notscrin-case">
                                            <div class="icon warning"></div>
                                            <div class="warning-text">${this.translation("tether.warningNotScrin")}</div>
                                        </div>
                                        
                                    </div>
                                `);
                                                g = p.find(".mnemonic-case .view-mnemonic");
                                                var l = e.mnemonic.split(" ");
                                                for (let C = 0; C < l.length; C++) {
                                                    let D = $(`
                                        <div class="word-case">
                                            <div class="order">${C+1}: </div>
                                            <div class="word">${l[C]}</div>
                                        </div>
                                    `);
                                                    g.append(D)
                                                }
                                                let f = p.find(".mnemonic-case .hide-mnemonic");
                                                g = p.find(".mnemonic-case .hide-mnemonic .action-button-case .button-view-mnemonic");
                                                l = p.find(".mnemonic-case .copy-button-case .copy-button");
                                                let d = l.find(".isCopied"),
                                                    a = p.find(".user-name-case .input-wrap"),
                                                    c = p.find('input[name="userNameAddress"]'),
                                                    r = h.find(".button-case"),
                                                    u = h.find(".head-case .title"),
                                                    A = $(`<button class="ok">${this.translation("action.back")}</button>`),
                                                    B = $(`<button class="ok notActive">${this.translation("action.next")}</button>`);
                                                r.prepend(B);
                                                r.prepend(A);
                                                l.on("click", async () => {
                                                    await navigator.clipboard.writeText(e.mnemonic);
                                                    d.removeClass("hide");
                                                    setTimeout(() => {
                                                        d.addClass("hide")
                                                    }, 500)
                                                });
                                                g.on("click", () => {
                                                    f.remove();
                                                    q()
                                                });
                                                A.on("click", () => {
                                                    A.remove();
                                                    B.remove();
                                                    k()
                                                });
                                                c.on("input", () => {
                                                    let C = new RegExp(/^\s*$/),
                                                        D = c.val();
                                                    C.test(D) ? a.addClass("error") : (a.removeClass("error"), e.userName = E(D));
                                                    q()
                                                });
                                                B.on("click", async () => {
                                                    if (!B.hasClass("notActive")) {
                                                        var C = $(`
                                        <div class="confirm-newaddress-case">
                                            <div class="warning-case">
                                                <div class="icon warning"></div>
                                                <div class="text-warning">${this.translation("action.warning")}</div>
                                            </div>
                                            <div class="confirm-content newAddress">
                                                ${this.translation("tether.confirmNewAddress")}
                                            </div>
                                        </div>
                                    `);
                                                        h.css({
                                                            opacity: 0,
                                                            filter: "blur(5px)"
                                                        });
                                                        await la(this.translation("tether.confirmNewAddressTitle"), C, `newAddress_${e.address}`) ? (G.address.push(e), G.selectedAddress = e.address, await chrome.storage.local.set({
                                                            tronApp: G
                                                        }), this.runEvent("addAddress", e.address), p.find(".user-name-case").remove(), p.find(".safety-info-case").remove(), p.find(".mnemonic-case").remove(), p.find(".warning-notscrin-case").remove(), p.append(`
                                            <div class="successfully-address-case">
                                                <div class="icon apply"></div>
                                                <div class="successfully-text">${this.translation("tether.successfullyAddress")}</div>
                                            </div>
                                        `), A.remove(), B.remove(), u.html(this.translation("completed.completed")), r.find(".ok").html(this.translation("prompt.button.ok")), h.css({
                                                            opacity: 0,
                                                            filter: "none"
                                                        }), setTimeout(() => {
                                                            h.css({
                                                                opacity: 1,
                                                                filter: "none"
                                                            });
                                                            N(e.address)
                                                        }, 300)) : h.css({
                                                            opacity: 1,
                                                            filter: "none"
                                                        })
                                                    }
                                                });
                                                m.html(p);
                                                c.focus().select()
                                            },
                                            O = () => {
                                                let e = {
                                                        type: "myTron",
                                                        userName: E(),
                                                        address: null,
                                                        mnemonic: null,
                                                        privateKey: null,
                                                        publicKey: null,
                                                        balance: 0
                                                    },
                                                    g = $(` 
                                    <div class="import-myusdt-case">
                                        <div class="wrap-textarea-mnemonic error">
                                            <textarea rows="6" placeholder="${this.translation("tether.placeholderTextareaMnemonic")}" autocomplete="off" spellcheck="false" class="textarea-mnemonic"></textarea>
                                            <div class="icon trash clear-textarea"></div>
                                        </div>
                                        <div class="import-address-data-case"> </div>
                                        <div class="hints-word-case"> </div>
                                    </div>
                                    
                                `),
                                                    q = () => {
                                                        0 < g.find(".error").length ? B.addClass("notActive") : B.removeClass("notActive")
                                                    },
                                                    p = () => {
                                                        e.userName = E();
                                                        let C = $(`
                                        <div class="new-address-case">
                                            <div class="icon myTron"></div>
                                            <div class="address">${e.address}</div>
                                        </div>
                                    `),
                                                            D = $(`
                                        <div class="user-name-case">  
                                            <div class="accaunt-name">${this.translation("tether.accauntName")}:</div>
                                            <div class="input-wrap"> 
                                                <div class="icon nameAccaunt"></div>
                                                <input name="userNameAddress" value="${e.userName}" maxlength="20" type="text" /> 
                                            </div>
                                        </div>
                                    `),
                                                            w = D.find(".input-wrap"),
                                                            y = w.find('input[name="userNameAddress"]');
                                                        y.on("input", () => {
                                                            let M = new RegExp(/^\s*$/),
                                                                X = y.val();
                                                            M.test(X) ? w.addClass("error") : (w.removeClass("error"), e.userName = E(X));
                                                            q()
                                                        });
                                                        void 0 != G.address.find(M => M.address == e.address) && (D = $(`
                                            <div class="address-error-case error"> 
                                                <div class="icon isError"></div>
                                                <div class="error-value">${this.translation("tether.accountAdded")}</div>
                                            </div>
                                        `));
                                                        l.html("");
                                                        l.append(C);
                                                        l.append(D)
                                                    },
                                                    l = g.find(".import-address-data-case"),
                                                    f = g.find(".wrap-textarea-mnemonic"),
                                                    d = f.find(".clear-textarea"),
                                                    a = f.find("textarea.textarea-mnemonic"),
                                                    c = g.find(".hints-word-case"),
                                                    r = h.find(".button-case"),
                                                    u = h.find(".head-case .title"),
                                                    A = $(`<button class="ok">${this.translation("action.back")}</button>`),
                                                    B = $(`<button class="ok notActive">${this.translation("action.next")}</button>`);
                                                r.prepend(B);
                                                r.prepend(A);
                                                p();
                                                d.on("click", () => {
                                                    a.val("");
                                                    a.trigger("input")
                                                });
                                                A.on("click", () => {
                                                    A.remove();
                                                    B.remove();
                                                    k()
                                                });
                                                B.on("click", async () => {
                                                    B.hasClass("notActive") || (G.address.push(e), G.selectedAddress = e.address, await chrome.storage.local.set({
                                                        tronApp: G
                                                    }), this.runEvent("addAddress", e.address), g.find(".wrap-textarea-mnemonic").remove(), g.find(".import-address-data-case").remove(), g.append(`
                                        <div class="successfully-address-case">
                                            <div class="icon apply"></div>
                                            <div class="successfully-text">${this.translation("tether.successImportAddress")}</div>
                                        </div>
                                    `), A.remove(), B.remove(), u.html(this.translation("completed.completed")), r.find(".ok").html(this.translation("prompt.button.ok")), h.css({
                                                        opacity: 0
                                                    }), setTimeout(() => {
                                                        h.css({
                                                            opacity: 1
                                                        });
                                                        N(e.address)
                                                    }, 300))
                                                });
                                                a.on("input", () => {
                                                    c.html("");
                                                    let C = a.val();
                                                    var D = !1;
                                                    let w = C.split(" "),
                                                        y = w.length,
                                                        M = w[y - 1];
                                                    for (let da = 0; da < y; da++) {
                                                        var X = w[da];
                                                        if ("" == X) break;
                                                        if (da == y - 1) {
                                                            let ha = new RegExp(`^${X}`),
                                                                ka = WORDLISTS.filter(ia => ha.test(ia));
                                                            if (0 == ka.length) {
                                                                D = !1;
                                                                break
                                                            } else D = !0;
                                                            for (let ia =
                                                                    0; ia < ka.length && 10 > ia; ia++) ka[ia] != M && (X = $(`<div class="hints-word">${ka[ia]}</div>`), X.on("click", () => {
                                                                w[da] = ka[ia];
                                                                a.val(`${w.join(" ")}${12>y?" ":""}`);
                                                                a.trigger("input");
                                                                a.focus()
                                                            }), c.append(X))
                                                        } else if (WORDLISTS.includes(X)) D = !0;
                                                        else break
                                                    }
                                                    D ? f.addClass("wait") : f.removeClass("wait");
                                                    D = new RegExp(/^(?:\b\w+\b\s?){12}$/);
                                                    X = new RegExp(/^[a-fA-F0-9]{64}$/);
                                                    if ((new RegExp(/^(?:\b\w+\b\s?){12}$|^[a-fA-F0-9]{64}$/)).test(C)) switch (!0) {
                                                        case D.test(C):
                                                            try {
                                                                let da = this.tronWeb.fromMnemonic(C);
                                                                for (D = 1; void 0 !=
                                                                    G.address.find(ha => ha.address == da.address); D++) da = this.tronWeb.fromMnemonic(C, `m/44'/195'/0'/0/${D}`);
                                                                e.address = da.address;
                                                                e.mnemonic = da.mnemonic.phrase;
                                                                e.privateKey = da.privateKey;
                                                                e.publicKey = da.publicKey;
                                                                f.removeClass("error");
                                                                c.html("");
                                                                p()
                                                            } catch (da) {
                                                                f.addClass("error"), WORDLISTS.includes(M) && f.removeClass("wait")
                                                            }
                                                            break;
                                                        case X.test(C):
                                                            try {
                                                                this.tronWeb.setPrivateKey(C), e.address = this.tronWeb.defaultAddress.base58, e.mnemonic = null, e.privateKey = `0x${this.tronWeb.defaultPrivateKey.toLowerCase()}`, e.publicKey =
                                                                    null, f.removeClass("error"), c.html(""), p()
                                                            } catch (da) {
                                                                f.addClass("error")
                                                            }
                                                    } else f.addClass("error");
                                                    q()
                                                });
                                                m.html(g)
                                            },
                                            v = async () => {
                                                let e = {
                                                        type: "ledger",
                                                        userName: E(),
                                                        address: null,
                                                        mnemonic: null,
                                                        privateKey: null,
                                                        publicKey: null,
                                                        balance: 0
                                                    },
                                                    g = () => {
                                                        e.userName = E();
                                                        let A = $(`
                                        <div class="new-address-case">
                                            <div class="icon ledger"></div>
                                            <div class="address">${e.address}</div>
                                        </div>
                                    `),
                                                            B = $(`
                                        <div class="user-name-case">  
                                            <div class="accaunt-name">${this.translation("tether.accauntName")}:</div>
                                            <div class="input-wrap"> 
                                                <div class="icon nameAccaunt"></div>
                                                <input name="userNameAddress" value="${e.userName}" maxlength="20" type="text" /> 
                                            </div>
                                        </div>
                                    `),
                                                            C = B.find(".input-wrap"),
                                                            D = C.find('input[name="userNameAddress"]');
                                                        D.on("input", () => {
                                                            let w = new RegExp(/^\s*$/),
                                                                y = D.val();
                                                            w.test(y) ? C.addClass("error") : (C.removeClass("error"), e.userName = E(y));
                                                            q()
                                                        });
                                                        void 0 != G.address.find(w => w.address == e.address) && (B = $(`
                                            <div class="address-error-case error"> 
                                                <div class="icon isError"></div>
                                                <div class="error-value">${this.translation("tether.accountAdded")}</div>
                                            </div>
                                        `));
                                                        l.html("");
                                                        l.append(A);
                                                        l.append(B)
                                                    },
                                                    q = () => {
                                                        0 < p.find(".error").length ? r.addClass("notActive") : r.removeClass("notActive")
                                                    },
                                                    p = $(` 
                                    <div class="ledger-pair-case">
                                        <div class="data-action-case">
                                            <div class="action-text p">${this.translation("tether.addLedgerPair")}</div>
                                            <!--<div class="action-text">${this.translation("tether.ledgerBlueNotSupported")}</div>-->
                                        </div> 
                                        <div class="action-data-case"></div>
                                        <div class="import-address-data-case"></div>
                                    </div>
                                `),
                                                    l = p.find(".import-address-data-case"),
                                                    f = p.find(".action-data-case"),
                                                    d = h.find(".button-case"),
                                                    a = h.find(".head-case .title"),
                                                    c = $(`<button class="ok">${this.translation("action.back")}</button>`),
                                                    r = $(`<button class="ok notActive">${this.translation("action.apply")}</button>`);
                                                c.on("click", () => {
                                                    c.remove();
                                                    r.remove();
                                                    k()
                                                });
                                                r.on("click", async () => {
                                                    if (!r.hasClass("notActive")) {
                                                        var A = r.clone();
                                                        r.html('<img src="../img/svg/loading.svg" />');
                                                        var B = new LedgerAdapter({
                                                            beforeConnect: async () =>
                                                                !0,
                                                            selectAccount: async D => !0
                                                        });
                                                        try {
                                                            let D = $(`
                                            <div class="error-wrap verifyAddress">
                                                <div class="error-text">${this.translation("tether.verifyAddress")}</div>
                                            </div>
                                        `);
                                                            f.html(D);
                                                            setTimeout(() => {
                                                                D.addClass("show")
                                                            }, 200);
                                                            var C = await B.ledgerUtils.getAddress(0, !0)
                                                        } catch (D) {
                                                            let w;
                                                            B = D.toString();
                                                            switch (!0) {
                                                                case 0 < B.indexOf("0x5515"):
                                                                    w = $(`
                                                    <div class="error-wrap ledgerUnlock">
                                                        <div class="error-text">${this.translation("tether.ledgerUnlock")}</div>
                                                    </div>
                                                `);
                                                                    f.html(w);
                                                                    setTimeout(() => {
                                                                        w.addClass("show")
                                                                    }, 200);
                                                                    break;
                                                                case 0 < B.indexOf("0x650e"):
                                                                    w = $(`
                                                    <div class="error-wrap ledgerTronIn">
                                                        <div class="error-text">
                                                            ${this.translation("tether.ledgerTronIn")}
                                                        </div> 
                                                    </div>
                                                `);
                                                                    f.html(w);
                                                                    setTimeout(() => {
                                                                        w.addClass("show")
                                                                    }, 200);
                                                                    break;
                                                                case 0 < B.indexOf("denied to use Ledger device"):
                                                                    w = $(`
                                                    <div class="error-wrap deviceNotFound">
                                                        <div class="error-text">
                                                            ${this.translation("tether.deviceNotFound")}
                                                        </div> 
                                                    </div>
                                                `);
                                                                    f.html(w);
                                                                    setTimeout(() => {
                                                                        w.addClass("show")
                                                                    }, 200);
                                                                    break;
                                                                case 0 < B.indexOf("0x6985"):
                                                                    c.remove();
                                                                    r.remove();
                                                                    k();
                                                                    return
                                                            }
                                                            r.html(A.html());
                                                            return
                                                        }
                                                        C.address == e.address && C.publicKey == e.publicKey ? (G.address.push(e), G.selectedAddress = e.address, await chrome.storage.local.set({
                                                            tronApp: G
                                                        }), this.runEvent("addAddress", e.address), p.find(".data-action-case").remove(), p.find(".import-address-data-case").remove(), p.find(".action-data-case").remove(), p.append(`
                                            <div class="successfully-address-case">
                                                <div class="icon apply"></div>
                                                <div class="successfully-text">${this.translation("tether.successAddressPairCreated")}</div>
                                            </div>
                                        `), c.remove(), r.remove(), a.html(this.translation("completed.completed"))) : (p.find(".data-action-case").remove(), p.find(".import-address-data-case").remove(), p.find(".action-data-case").remove(), p.append(`
                                            <div class="successfully-address-case">
                                                <div class="icon isError"></div>
                                                <div class="successfully-text">${this.translation("tether.addressesNoMatch")}</div>
                                            </div>
                                        `), c.remove(), r.remove(), a.html(this.translation("errors.error")));
                                                        d.find(".ok").html(this.translation("prompt.button.ok"));
                                                        h.css({
                                                            opacity: 0
                                                        });
                                                        setTimeout(() => {
                                                            h.css({
                                                                opacity: 1
                                                            });
                                                            N(e.address)
                                                        }, 300)
                                                    }
                                                });
                                                let u = await chrome.runtime.sendMessage({
                                                    sender: "panell",
                                                    event: "ledgerPair"
                                                });
                                                u.completed ? (Object.assign(e, u.address), d.prepend(r), d.prepend(c), g(), q(), m.html(p)) : (c.remove(), r.remove(), k())
                                            }, n = async () => {
                                                let e = {
                                                        type: "tronlink",
                                                        userName: E(),
                                                        address: null,
                                                        mnemonic: null,
                                                        privateKey: null,
                                                        publicKey: null,
                                                        balance: 0
                                                    },
                                                    g = async () => {
                                                        e.userName = E();
                                                        let A = $(`
                                        <div class="new-address-case">
                                            <div class="icon tronlink"></div>
                                            <div class="address">${e.address}</div>
                                        </div>
                                    `),
                                                            B = $(`
                                        <div class="user-name-case">  
                                            <div class="accaunt-name">${this.translation("tether.accauntName")}:</div>
                                            <div class="input-wrap"> 
                                                <div class="icon nameAccaunt"></div>
                                                <input name="userNameAddress" value="${e.userName}" maxlength="20" type="text" /> 
                                            </div>
                                        </div>
                                    `),
                                                            C = B.find(".input-wrap"),
                                                            D = C.find('input[name="userNameAddress"]');
                                                        D.on("input", () => {
                                                            let y = new RegExp(/^\s*$/),
                                                                M = D.val();
                                                            y.test(M) ? C.addClass("error") : (C.removeClass("error"), e.userName = E(M));
                                                            q()
                                                        });
                                                        void 0 != G.address.find(y => y.address == e.address) && (B = $(`
                                            <div class="address-error-case error"> 
                                                <div class="icon isError"></div>
                                                <div class="error-value">${this.translation("tether.accountAdded")}</div>
                                            </div>
                                        `));
                                                        let w = await this.tronWeb.trx.getAccount(e.address);
                                                        try {
                                                            "undefined" != typeof w.owner_permission && 1 < w.owner_permission.threshold && (B = $(`
                                            <div class="address-error-case error"> 
                                                <div class="icon isError"></div>
                                                <div class="error-value">${this.translation("tether.accountMultiSign")}</div>
                                            </div>
                                        `))
                                                        } catch (y) {}
                                                        l.html("");
                                                        l.append(A);
                                                        l.append(B);
                                                        return !0
                                                    }, q = () => {
                                                        0 < p.find(".error").length ? r.addClass("notActive") : r.removeClass("notActive")
                                                    }, p = $(` 
                                    <div class="tronlink-pair-case">
                                        <div class="data-action-case">
                                            <div class="action-text p">${this.translation("tether.addTronlink")}</div> 
                                        </div> 
                                        
                                        <div class="import-address-data-case"></div>
                                        <div class="action-data-case"></div>
                                    </div>
                                `), l = p.find(".import-address-data-case"), f = p.find(".action-data-case"), d = h.find(".button-case"), a = h.find(".head-case .title"), c = $(`<button class="ok">${this.translation("action.back")}</button>`), r = $(`<button class="ok notActive">${this.translation("action.apply")}</button>`);
                                                c.on("click", () => {
                                                    c.remove();
                                                    r.remove();
                                                    k()
                                                });
                                                r.on("click", async () => {
                                                    if (!r.hasClass("notActive")) {
                                                        var A = r.clone();
                                                        r.html('<img src="../img/svg/loading.svg" />');
                                                        var B = $(`
                                        <div class="error-wrap ">
                                            <div class="icon warning icon-view"></div>
                                            <div class="error-text">${this.translation("tether.verifyTronLinkAddress")}</div>
                                        </div>
                                    `);
                                                        f.html(B);
                                                        setTimeout(() => {
                                                            B.addClass("show")
                                                        }, 200);
                                                        try {
                                                            var C = await za({
                                                                type: "signMessage",
                                                                msg: `address verification ${e.address}`
                                                            });
                                                            await this.tronWeb.trx.verifyMessageV2(`address verification ${e.address}`, C.replace("0x", "")) == e.address ? (G.address.push(e), G.selectedAddress = e.address, await chrome.storage.local.set({
                                                                    tronApp: G
                                                                }), this.runEvent("addAddress", e.address), p.find(".data-action-case").remove(), p.find(".import-address-data-case").remove(), p.find(".action-data-case").remove(),
                                                                p.append(`
                                                <div class="successfully-address-case">
                                                    <div class="icon apply"></div>
                                                    <div class="successfully-text">${this.translation("tether.successTronlinkPairCreated")}</div>
                                                </div>
                                            `), c.remove(), r.remove(), a.html(this.translation("completed.completed"))) : (p.find(".data-action-case").remove(), p.find(".import-address-data-case").remove(), p.find(".action-data-case").remove(), p.append(`
                                                <div class="successfully-address-case">
                                                    <div class="icon isError"></div>
                                                    <div class="successfully-text">${this.translation("tether.addressesNoMatch")}</div>
                                                </div>
                                            `), c.remove(), r.remove(), a.html(this.translation("errors.error")));
                                                            d.find(".ok").html(this.translation("prompt.button.ok"));
                                                            h.css({
                                                                opacity: 0
                                                            });
                                                            setTimeout(() => {
                                                                h.css({
                                                                    opacity: 1
                                                                });
                                                                N(e.address)
                                                            }, 300)
                                                        } catch (D) {
                                                            B = $(`
                                            <div class="error-wrap">
                                                <div class="icon isError icon-view"></div>
                                                <div class="error-text">${this.translation("tether.cancelSign")}</div>
                                            </div>
                                        `), f.html(B), setTimeout(() => {
                                                                B.addClass("show")
                                                            }, 200), r.html(A.html())
                                                        }
                                                    }
                                                });
                                                let u = a.clone();
                                                a.html(this.translation("tether.addTronlink"));
                                                m.html('\n                                    <div class="loading-case">\n                                        <img src="../img/svg/loading_black.svg" class="img-loading" />    \n                                    </div>\n                                ');
                                                try {
                                                    if (!await this.serverPing()) throw await this.notification(this.translation("tether.error.unexpectedError"),
                                                        this.translation("errors.noServerConnect"), 1E4, "error", "error"), {
                                                        html: `
                                            <div class="popup-error-case">
                                                <div class="icon isError"></div>
                                                <div class="text-error">${this.translation("errors.noServerConnect")}</div>
                                            </div>
                                        `
                                                    };
                                                    let A;
                                                    try {
                                                        A = await za({
                                                            type: "connectWallet"
                                                        }), e.address = A.data.address, d.prepend(r), await g()
                                                    } catch (B) {
                                                        c.remove();
                                                        r.remove();
                                                        k();
                                                        a.html(u.html());
                                                        return
                                                    }
                                                    q();
                                                    m.html(p)
                                                } catch (A) {
                                                    "undefined" != typeof A.html ? m.html(A.html) : k(), d.prepend(c), r.remove(), a.html(u.html())
                                                }
                                            }, k = () => {
                                                let e = [{
                                                        id: "addMyUsdt",
                                                        title: this.translation("tether.generateAccount"),
                                                        description: this.translation("tether.generateAccountDesc"),
                                                        action: K
                                                    }, {
                                                        id: "importMyUsdt",
                                                        title: this.translation("tether.importAccaunt"),
                                                        description: this.translation("tether.importAccauntDesc"),
                                                        action: O
                                                    }, {
                                                        id: "ledgerPair",
                                                        title: this.translation("tether.addLedgerPair"),
                                                        description: this.translation("tether.addLedgerPairDesc"),
                                                        action: v
                                                    }, {
                                                        id: "tronlink",
                                                        title: this.translation("tether.addTronlink"),
                                                        description: this.translation("tether.addTronlinkDesc"),
                                                        action: n
                                                    }],
                                                    g = $('\n                                    <div class="wrap-chosen-type-case">\n                                        <div class="address-options-list"> </div>\n                                    </div>\n                                '),
                                                    q = g.find(".address-options-list");
                                                for (let p = 0; p < e.length; p++) {
                                                    let l = e[p],
                                                        f = $(`
                                        <div class="iteam-options-case">
                                            <div class="icon ${l.id} icon-before"></div>
                                            <div class="data-case">
                                                <p class="title">${l.title}</p>
                                                <div class="description">${l.description}</div>
                                            </div>
                                            <div class="icon angle_right icon-after"></div>
                                        </div>
                                    `);
                                                    q.append(f);
                                                    f.on("click", () => {
                                                        l.action()
                                                    })
                                                }
                                                m.html(g)
                                            }, t = $('\n                                <div class="main-view-addaddress-case">\n                                    <div class="wrap-view"> </div>\n                                </div>\n                            '), m = t.find(".wrap-view");
                                        k();
                                        let h = Ra(this.translation("tether.addAccaunt"), t, L(), this.translation("action.cancel"));
                                        return !0
                                    }, oa = () => {
                                        let K = l => {
                                                v.html("");
                                                let f = $('<div class="wrap"></div>');
                                                for (let d = 0; d < l.length; d++) {
                                                    let a = $(`<div class="${l[d].id} iteam-data-fee">${this.translation(`tether.${l[d].id}`,l[d].parms)}</div>`);
                                                    f.append(a)
                                                }
                                                v.html(f)
                                            },
                                            O = $('\n                                <div class="coin-exchange-case">\n                                    <div class="wrap-exchange">\n                                    \n                                    </div>\n                                </div>\n                            '),
                                            v, n = null,
                                            k = O.find(".wrap-exchange"),
                                            t = this.configuration.tronApp.coins,
                                            m = [];
                                        m.push(JSON.parse(JSON.stringify(t.find(l => "USDT" == l.id))));
                                        m.push(JSON.parse(JSON.stringify(t.find(l => "TFC" == l.id))));
                                        let h = [];
                                        for (let l = 0; l < m.length; l++) {
                                            let f = {};
                                            f.id = L();
                                            let d = m[l];
                                            d.value = "";
                                            f.elWrapExchangeData = $(`
                                    <div class="wrap-exchange-data" order="${l}"></div>
                                `);
                                            f.elExchangeAssetCase = $(`
                                    <div class="exchange-asset-case">
                                        <div class="custom-input-select" type="select">
                                            <div class="select-case">
                                                <div class="value">
                                                    <img src="../img/coin/${d.icon}" class="img-asset-logo" />
                                                    <div class="asset-id">${d.id}</div>
                                                </div>
                                                <div class="icon selectwrap"></div>
                                            </div> 
                                            <div class="option-case"> 
                                            </div>
                                        </div>

                                        <div class="balance-asset-case"> 
                                            <div class="title">${this.translation("tether.table.balance")}:</div>
                                            <div class="value-case loading">
                                                <div class="value"> <span class="value-balance"></span> <span class="abbr">${d.id}</span> </div>
                                                <div class="loading-case">
                                                    <img src="../img/svg/loading_black.svg" class="img-loading" />    
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                `);
                                            f.elCustomInputSelect = f.elExchangeAssetCase.find(".custom-input-select");
                                            f.elSlectCase = f.elCustomInputSelect.find(".select-case");
                                            f.elOptionCase = f.elCustomInputSelect.find(".option-case");
                                            f.elBalanceValueCase = f.elExchangeAssetCase.find(".balance-asset-case .value-case");
                                            f.elBalanceValue = f.elBalanceValueCase.find(".value span.value-balance");
                                            f.elBalanceAbbr = f.elBalanceValueCase.find(".value span.abbr");
                                            let a;
                                            this.getBalanceCoin(d, G.selectedAddress, (c, r) => {
                                                a = c;
                                                f.elBalanceValue.html(`${this.numberFormat(a)}`);
                                                f.elBalanceValueCase.removeClass("loading")
                                            });
                                            f.elSlectCase.on("click", () => {
                                                O.find("*").removeClass("showselect");
                                                f.elCustomInputSelect.addClass("showselect");
                                                let c = h.findIndex(r => r.id == f.id);
                                                h[c].elOptionCase.find("*").removeClass("disabled");
                                                h[c][`coin_${m[c].id}`].addClass("disabled")
                                            });
                                            for (var e = 0; e < t.length; e++) {
                                                let c = t[e];
                                                f[`coin_${c.id}`] = $(`<div class="option" value="deals"><img src="../img/coin/${c.icon}" class="img-asset-logo" /> <span>${c.id}</span></div>`);
                                                f[`coin_${c.id}`].on("click",
                                                    () => {
                                                        let r = h.findIndex(A => A.id == f.id),
                                                            u = m[r].id;
                                                        if (u != c.id && (Object.assign(m[r], JSON.parse(JSON.stringify(c))), f.elExchangeAssetCase.find(".custom-input-select .select-case .value img").attr("src", `../img/coin/${c.icon}`), f.elExchangeAssetCase.find(".custom-input-select .select-case .value .asset-id").html(`${c.id}`), f.elBalanceAbbr.html(c.id), f.elBalanceValueCase.addClass("loading"), f.elCustomInputSelect.removeClass("showselect"), f.elInput.val(""), this.getBalanceCoin(d, G.selectedAddress, (A, B) => {
                                                                a =
                                                                    A;
                                                                f.elBalanceValue.html(`${this.numberFormat(a)}`);
                                                                f.elBalanceValueCase.removeClass("loading")
                                                            }), m[0].id == m[1].id)) switch (r) {
                                                            case 0:
                                                                h[1][`coin_${u}`].trigger("click");
                                                                break;
                                                            case 1:
                                                                h[0][`coin_${u}`].trigger("click")
                                                        }
                                                    });
                                                f.elOptionCase.append(f[`coin_${c.id}`])
                                            }
                                            f.elExchangeInputCase = $('\n                                    <div class="exchange-input-case">\n                                        <div class="exchange-input-wrap">\n                                            <input placeholder="0" type="text" />\n                                            <div class="buttons-case"> \n                                            </div>\n                                        </div>\n                                        <div class="any-data-case">&nbsp;</div>\n                                    </div>\n                                ');
                                            f.elButtonsCase = f.elExchangeInputCase.find(".exchange-input-wrap .buttons-case");
                                            f.elButtomMAX = $(`<div class="button">${this.translation("action.max")}</div>`);
                                            f.elInput = f.elExchangeInputCase.find(".exchange-input-wrap input");
                                            f.elAnyDataCase = f.elExchangeInputCase.find(".any-data-case");
                                            f.elButtomMAX.on("click", () => {
                                                f.elInput.val(a);
                                                f.elInput.trigger("input")
                                            });
                                            f.elInput.on("change", () => {
                                                let c = f.elInput.val();
                                                c = `${+(+c).toFixed(d.decimal+1).replace(/.$/,"")}`;
                                                f.elInput.val(c)
                                            });
                                            f.elInput.on("input",
                                                () => {
                                                    let c = f.elInput.val();
                                                    "." == c[0] && (c = `0${c}`, f.elInput.val(c));
                                                    c = c.replace(",", ".");
                                                    try {
                                                        let r = new RegExp(`^(.{${d.decimal}})`),
                                                            u = c.split(".");
                                                        if (2 > u.length) throw "nofloat";
                                                        u[1] = u[1].length > d.decimal ? u[1].match(r)[0] : u[1];
                                                        c = u.join(".")
                                                    } catch (r) {}
                                                    f.elInput.val(c);
                                                    Number.isNaN(+c) && f.elInput.val("");
                                                    d.value = c;
                                                    clearTimeout(f.calcTimer);
                                                    v.html("");
                                                    h[1].elInput.val("");
                                                    h[0].elAnyDataCase.html("&nbsp;");
                                                    h[1].elAnyDataCase.html("&nbsp;");
                                                    p.addClass("notActive");
                                                    n = null;
                                                    if ("" != h[0].elInput.val()) {
                                                        if (+h[0].elInput.val() <
                                                            this.configuration.tronApp.minAmountExchange) return h[0].elAnyDataCase.html(this.translation("tether.minAmountExchange", {
                                                            amount: this.configuration.tronApp.minAmountExchange,
                                                            coin: m[0].id
                                                        }));
                                                        f.calcTimer = setTimeout(async () => {
                                                            try {
                                                                h[0].elAnyDataCase.html("Calculating price");
                                                                h[1].elAnyDataCase.html("Calculating price");
                                                                let r = await z("exchange", m);
                                                                K([{
                                                                    id: "feemyTether",
                                                                    parms: {
                                                                        tfc: r.tfcFee,
                                                                        tfcUsd: (r.tfcFee * this.coinRateDollar.usdt.price_in_usd).toFixed(3)
                                                                    }
                                                                }]);
                                                                h[1].elInput.val(`${+(h[0].elInput.val()-r.tfcFee).toFixed(d.decimal+
1).replace(/.$/,"")}`);
                                                                h[0].elAnyDataCase.html(`\u2248 $${(h[0].elInput.val()*this.coinRateDollar.usdt.price_in_usd).toFixed(3)}`);
                                                                h[1].elAnyDataCase.html(`\u2248 $${((h[0].elInput.val()-r.tfcFee)*this.coinRateDollar.usdt.price_in_usd).toFixed(3)}`);
                                                                p.removeClass("notActive");
                                                                n = {
                                                                    type: "coinExchange",
                                                                    resource: r.resource,
                                                                    comment: this.translation("tether.coinExchangeData", {
                                                                        from: `${h[0].elInput.val()} ${m[0].id}`,
                                                                        to: `${h[1].elInput.val()} ${m[1].id}`
                                                                    }),
                                                                    direction: [m[0], m[1]],
                                                                    tx: [],
                                                                    amount: [+h[0].elInput.val(),
                                                                        +h[1].elInput.val()
                                                                    ]
                                                                }
                                                            } catch (r) {
                                                                h[1].elAnyDataCase.html("&nbsp;"), n = null, f.elAnyDataCase.html(r)
                                                            }
                                                        }, 500)
                                                    }
                                                });
                                            f.elInput.on("keypress", c => {
                                                if (!(new RegExp(/^[.0-9,]/)).test(c.key)) return c.preventDefault()
                                            });
                                            f.elButtonsCase.append(f.elButtomMAX);
                                            f.elWrapExchangeData.append(f.elExchangeAssetCase);
                                            f.elWrapExchangeData.append(f.elExchangeInputCase);
                                            k.append(f.elWrapExchangeData);
                                            0 == l && (e = $('\n                                        <div class="separator-case">\n                                            <div class="icon arrowDown separator"></div>\n                                            <div class="fee-data-case">\n                                                    \n                                            </div>\n                                        </div>\n                                    '),
                                                v = e.find(".fee-data-case"), e.find(".separator").on("click", () => {
                                                    m.push(m.shift());
                                                    h.push(h.shift());
                                                    for (let c = 0; c < m.length; c++) {
                                                        let r = h[c];
                                                        r.elWrapExchangeData.attr("order", c);
                                                        r.elInput.val("");
                                                        r.elAnyDataCase.html("&nbsp;");
                                                        1 == c ? r.elInput.attr("disabled", "disabled") : r.elInput.removeAttr("disabled")
                                                    }
                                                    K([]);
                                                    p.addClass("notActive")
                                                }), k.append(e));
                                            1 == l ? f.elInput.attr("disabled", "disabled") : f.elInput.removeAttr("disabled");
                                            h.push(f)
                                        }
                                        let g = Ra(this.translation("tether.coinExchange"), O, L(), this.translation("action.cancel")),
                                            q = g.find(".button-case");
                                        g.find(".head-case .title");
                                        let p = $(`<button class="ok notActive">${this.translation("action.confirm")}</button>`);
                                        q.prepend(p);
                                        p.on("click", async () => {
                                            if (!p.hasClass("notActive")) {
                                                var l = p.clone();
                                                p.addClass("notActive");
                                                p.html('<img src="../img/svg/loading.svg" />');
                                                try {
                                                    let d;
                                                    switch (`${n.direction[0].id}${n.direction[1].id}`) {
                                                        case "USDTTFC":
                                                            var f = await S(n.direction[0].address, this.configuration.tronApp.serviceAddress, Math.round(n.amount[0] * I(n.direction[0])));
                                                            f.comment = n.comment;
                                                            d = await aa(n.direction[1].tokenID, this.usedAddress.address, Math.round(n.amount[1] * I(n.direction[1])), null, this.configuration.tronApp.serviceAddress);
                                                            break;
                                                        case "TFCUSDT":
                                                            f = await aa(n.direction[0].tokenID, this.configuration.tronApp.serviceAddress, Math.round(n.amount[0] * I(n.direction[0]))), f.comment = n.comment, d = await S(n.direction[1].address, this.usedAddress.address, Math.round(n.amount[1] * I(n.direction[1])), null, this.configuration.tronApp.serviceAddress)
                                                    }
                                                    if (await x(f)) {
                                                        n.tx.push(f);
                                                        n.tx.push(d);
                                                        await b(200);
                                                        let a = $('\n                                            <div class="loding-case loading">\n                                                <div class="title"></div>\n                                                <div class="result-case">\n                                                    <div class="loading">\n                                                        <img src="../img/svg/loading_black.svg" />\n                                                    </div>\n                                                    <div class="\u0441ompleted-case">\n                                                        <div class="row-case">\n                                                            <div class="icon icon-result"></div>\n                                                            <div class="text text-result"></div> \n                                                        </div>\n                                                        <div class="row-case">\n                                                            <div class="description"></div> \n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        ');
                                                        k.remove();
                                                        p.remove();
                                                        q.find("button.ok").html(`${this.translation("prompt.button.ok")}`);
                                                        let c = a.find(".title"),
                                                            r = a.find(".result-case"),
                                                            u = r.find(".\u0441ompleted-case .row-case .icon-result"),
                                                            A = r.find(".\u0441ompleted-case .row-case .text-result"),
                                                            B = r.find(".\u0441ompleted-case .row-case .description");
                                                        c.html(n.comment);
                                                        O.html(a);
                                                        try {
                                                            if ((await this.post(this.configuration.appData.myTetherApiServer, {
                                                                    type: "coinExchange",
                                                                    data: n.tx
                                                                })).result) {
                                                                u.addClass("selected");
                                                                A.html(this.translation("tether.exchangeAgreed"));
                                                                B.html(this.translation("tether.exchangeTransactionAccepted"));
                                                                a.removeClass("loading");
                                                                await b(3E3);
                                                                for (f = 0; f < this.configuration.tronApp.coins.length; f++) this.runEvent(`coinBalanceUpdatedClick_${this.configuration.tronApp.coins[f].id}`);
                                                                this.runEvent("updateLastOperations")
                                                            } else throw "not accepted";
                                                        } catch (C) {
                                                            u.addClass("ban"), A.html(this.translation("tether.exchangeNoAgreed")), B.html(this.translation("tether.exchangeTransactionNoAccepted")), a.removeClass("loading")
                                                        }
                                                    } else throw "sign reject";
                                                } catch (d) {
                                                    setTimeout(() => {
                                                        p.removeClass("notActive");
                                                        p.html(l.html());
                                                        g.css({
                                                            opacity: 1
                                                        })
                                                    }, 200)
                                                }
                                            }
                                        });
                                        return !0
                                    }, Aa = async K => {
                                        let O = () => {
                                                var ea = l.find(".wrap-sources-address .select-sources-address-case .wrap-iteams .iteam-sources.active");
                                                let Ga = ea.width(),
                                                    pa = .7 * Ga;
                                                ea = +ea.position().left.toFixed(0) + (Ga - pa) / 2;
                                                a.css({
                                                    "margin-left": `${ea+10}px`,
                                                    width: `${pa}px`
                                                })
                                            },
                                            v = ea => {
                                                "undefined" == typeof G[ea] && (G[ea] = []);
                                                ea = G[ea].map(Ga => ({
                                                    address: Ga.address,
                                                    userName: Ga.userName
                                                }));
                                                d.html("");
                                                for (let Ga = 0; Ga < ea.length; Ga++) {
                                                    let pa = ea[Ga];
                                                    if (pa.address ==
                                                        G.selectedAddress) continue;
                                                    let Ja = $(`
                                        <div class="iteam-sources-address">
                                            <div class="name">${pa.userName}</div>
                                            <div class="address">(${pa.address})</div>
                                        </div>
                                    `);
                                                    Ja.on("click", () => {
                                                        u.val(pa.address);
                                                        u.trigger("input")
                                                    });
                                                    d.append(Ja)
                                                }
                                                0 == ea.length && d.html('<div class="empty-addressList">\u0410\u0434\u0440\u0435\u0441\u043e\u0432 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e </div>')
                                            },
                                            n = ea => {
                                                Oa.html("");
                                                switch (ea) {
                                                    case "enter-address":
                                                        m = $(`<button class="ok notActive">${this.translation("action.next")}</button>`);
                                                        m.on("click", async () => {
                                                            w.addClass("show");
                                                            try {
                                                                await t()
                                                            } catch (Ga) {}
                                                            w.removeClass("show");
                                                            m.hasClass("notActive") ||
                                                                (p.find(".wrap-send").removeClass("show"), y.addClass("show"), n("enter-amount"), da.val(""), da.trigger("input"))
                                                        });
                                                        Oa.append(m);
                                                        break;
                                                    case "enter-amount":
                                                        h = $(`<button class="ok">${this.translation("action.back")}</button>`), h.on("click", () => {
                                                            p.find(".wrap-send").removeClass("show");
                                                            l.addClass("show");
                                                            n("enter-address");
                                                            u.trigger("input")
                                                        }), Oa.append(h), e = $(`<button class="ok notActive">${this.translation("action.confirm")}</button>`), e.on("click", async () => {
                                                            if (!e.hasClass("notActive")) {
                                                                ha.removeClass("show");
                                                                ka.html("");
                                                                var Ga = e.clone();
                                                                e.addClass("notActive");
                                                                e.html('<img src="../img/svg/loading.svg" />');
                                                                try {
                                                                    if (!await this.serverPing()) throw await this.notification(this.translation("tether.error.unexpectedError"), this.translation("errors.noServerConnect", {
                                                                        reason: error.msg
                                                                    }), 1E4, "error", "error"), {
                                                                        intercepted: !0,
                                                                        msg: this.translation("errors.noServerConnect"),
                                                                        error: null
                                                                    };
                                                                    let hb;
                                                                    try {
                                                                        var pa = (await this.getBalanceTRC10(this.configuration.tronApp.coins[0].tokenID, G.selectedAddress)).balance;
                                                                        hb = await t()
                                                                    } catch (tb) {
                                                                        throw {
                                                                            intercepted: !0,
                                                                            msg: this.translation("tether.error.noConnectionNetTron"),
                                                                            error: tb
                                                                        };
                                                                    }
                                                                    if (q.amount > hb) throw {
                                                                        intercepted: !0,
                                                                        msg: this.translation("tether.error.notEnoughCoins"),
                                                                        error: null,
                                                                        function: () => {
                                                                            X.addClass("error");
                                                                            ia.html(this.translation("tether.error.errorDesc", {
                                                                                reason: this.translation("tether.error.notEnoughCoins")
                                                                            }));
                                                                            e.addClass("notActive")
                                                                        }
                                                                    };
                                                                    if (Math.round((q.tfcFee + (this.configuration.tronApp.coins[0].id == K.id ? q.amount : 0)) * I(K)) > pa) throw {
                                                                        intercepted: !0,
                                                                        msg: this.translation("tether.error.notEnoughTFC", {
                                                                            coinID: K.id,
                                                                            feecoinName: this.configuration.tronApp.coins[0].id
                                                                        }),
                                                                        error: null,
                                                                        function: () => {
                                                                            ka.find("a").on("click", oa)
                                                                        }
                                                                    };
                                                                    try {
                                                                        q.tx = [], q.tx.push("0" == K.address ? await aa(K.tokenID, q.receiverAddress, Math.round(q.amount * I(K)), this.translation("tether.transferUser", {
                                                                            coinID: K.id,
                                                                            amount: q.amount
                                                                        })) : await S(K.address, q.receiverAddress, Math.round(q.amount * I(K)), this.translation("tether.transferUser", {
                                                                            coinID: K.id,
                                                                            amount: q.amount
                                                                        }))), q.tx.push(await aa(this.configuration.tronApp.coins[0].tokenID, this.configuration.tronApp.serviceAddress,
                                                                            Math.round(q.tfcFee * I(this.configuration.tronApp.coins[0])), this.translation("tether.transferFee", {
                                                                                coinID: K.id,
                                                                                amount: q.amount
                                                                            })))
                                                                    } catch (tb) {
                                                                        throw {
                                                                            intercepted: !0,
                                                                            msg: this.translation("tether.error.transactionFarmError"),
                                                                            error: tb
                                                                        };
                                                                    }
                                                                    try {
                                                                        for (pa = 0; pa < q.tx.length; pa++)
                                                                            if (!await x(q.tx[pa])) throw {
                                                                                intercepted: !0,
                                                                                msg: this.translation("tether.error.transactionNotSigned"),
                                                                                error: null
                                                                            };
                                                                    } catch (tb) {
                                                                        throw tb;
                                                                    }
                                                                    Oa.remove();
                                                                    Ta.find("button.ok").html(`${this.translation("prompt.button.ok")}`);
                                                                    await b(200);
                                                                    let lb = $('\n                                                    <div class="loding-case loading">\n                                                        <div class="title"></div>\n                                                        <div class="result-case">\n                                                            <div class="loading">\n                                                                <img src="../img/svg/loading_black.svg" />\n                                                            </div>\n                                                            <div class="\u0441ompleted-case">\n                                                                <div class="row-case">\n                                                                    <div class="icon icon-result"></div>\n                                                                    <div class="text text-result"></div> \n                                                                </div>\n                                                                <div class="row-case">\n                                                                    <div class="description"></div> \n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                '),
                                                                        xb = lb.find(".title"),
                                                                        qb = lb.find(".result-case"),
                                                                        ub = qb.find(".\u0441ompleted-case .row-case .icon-result"),
                                                                        yb = qb.find(".\u0441ompleted-case .row-case .text-result"),
                                                                        zb = qb.find(".\u0441ompleted-case .row-case .description");
                                                                    xb.html(this.translation("tether.transferUserComment", {
                                                                        amount: q.amount,
                                                                        coinID: K.id,
                                                                        address: q.receiverAddress
                                                                    }));
                                                                    p.html(lb);
                                                                    p.addClass("loading");
                                                                    try {
                                                                        try {
                                                                            var Ja = await this.post(this.configuration.appData.myTetherApiServer, {
                                                                                type: "sendCoin",
                                                                                data: {
                                                                                    tx: q.tx
                                                                                }
                                                                            })
                                                                        } catch (tb) {
                                                                            throw null;
                                                                        }
                                                                        if (Ja.result) {
                                                                            ub.addClass("selected");
                                                                            yb.html(this.translation("tether.sendCoinAgreed"));
                                                                            zb.html(this.translation("tether.sendCoinTransactionAccepted"));
                                                                            Qa.html(this.translation("completed.completed"));
                                                                            lb.removeClass("loading");
                                                                            await b(3E3);
                                                                            for (Ja = 0; Ja < this.configuration.tronApp.coins.length; Ja++) this.runEvent(`coinBalanceUpdatedClick_${this.configuration.tronApp.coins[Ja].id}`);
                                                                            this.runEvent("updateLastOperations")
                                                                        } else throw Ja.error;
                                                                    } catch (tb) {
                                                                        ub.addClass("ban"), yb.html(this.translation("tether.sendCoinNoAgreed")), zb.html(this.translation("tether.sendCoinTransactionNoAccepted")),
                                                                            Qa.html(this.translation("tether.error.errorNum", {
                                                                                num: null != tb ? tb : ""
                                                                            })), lb.removeClass("loading")
                                                                    }
                                                                } catch (hb) {
                                                                    switch (ha.addClass("show"), e.removeClass("notActive"), e.html(Ga.html()), typeof hb.intercepted) {
                                                                        case "undefined":
                                                                            throw this.translation("tether.error.unexpectedError");
                                                                        default:
                                                                            ka.html(this.translation("tether.error.errorDesc", {
                                                                                reason: hb.msg
                                                                            })), "undefined" != typeof hb.function && hb.function()
                                                                    }
                                                                }
                                                            }
                                                        }), Oa.append(e)
                                                }
                                            },
                                            k = ea => {
                                                ya.html("");
                                                let Ga = $('<div class="wrap"></div>');
                                                for (let pa = 0; pa < ea.length; pa++) {
                                                    let Ja =
                                                        $(`<div class="${ea[pa].id} iteam-data-fee">${this.translation(`tether.${ea[pa].id}`,ea[pa].parms)}</div>`);
                                                    Ga.append(Ja)
                                                }
                                                ya.html(Ga)
                                            },
                                            t = async () => new Promise((ea, Ga) => {
                                                    let pa = setTimeout(() => {
                                                        Ga(this.translation("tether.error.unexpectedError"))
                                                    }, 1E4);
                                                    this.getBalanceCoin(K, G.selectedAddress, async (Ja, hb) => {
                                                        clearTimeout(pa);
                                                        Na = Ja;
                                                        M.html(this.translation("tether.available", {
                                                            balance: Ja,
                                                            coinID: K.id
                                                        }));
                                                        ea(Ja)
                                                    })
                                                }), m, h, e, g, q = {
                                                    coin: K,
                                                    senderAddress: G.selectedAddress,
                                                    tx: []
                                                }, p = $('\n                                <div class="coin-send-case">\n                                    <div class="loading-bg">\n                                        <img src="../img/svg/loading_2_black.svg"/>\n                                    </div>\n                                </div>\n                            '),
                                                l = $(`
                                <div class="wrap-send enter-address show">
                                    <div class="input-address-case">
                                        <div class="title">${this.translation("tether.receiverAddress")}</div>
                                        <div class="input-case">
                                            <div class="wrap">
                                                <input name="receiverAddress" autocomplete="off"/>
                                                <div class="icon input-reset"></div>
                                            </div>
                                            <div class="any-data-case"> 
                                                &nbsp;
                                            </div>
                                        </div>
                                        <div class="error-input"> 
                                            <div class="icon warning"></div>
                                            <div class="error-text">&nbsp;</div>
                                        </div>
                                    </div>
                                    <div class="wrap-sources-address show">
                                        <div class="select-sources-address-case">
                                            <div class="wrap-iteams">
                                                <div sources="address" class="iteam-sources active">${this.translation("tether.sourcesAddress.myTetherAddress")}</div>   
                                                <div sources="addressBook" class="iteam-sources">${this.translation("tether.sourcesAddress.addressBook")}</div> 
                                            </div>
                                            <div class="underline-case">
                                                <div class="underline"></div>
                                            </div>
                                        </div>
                                        <div class="list-sources-address-case"> 
                                        </div>
                                    </div>
                                </div>
                            `), f = l.find(".wrap-sources-address"), d = l.find(".wrap-sources-address .list-sources-address-case"), a = l.find(".wrap-sources-address .underline-case .underline"), c = l.find(".wrap-sources-address .select-sources-address-case .wrap-iteams"), r = l.find(".input-address-case .input-case"), u = r.find("input"), A = l.find(".input-address-case .error-input"), B = A.find(".error-text");
                                        var C = l.find(".input-address-case .input-case .input-reset");
                                        let D = r.find(".any-data-case"),
                                            w = p.find(".loading-bg");
                                        C.on("click", () => {
                                            u.val("");
                                            u.focus();
                                            u.trigger("input")
                                        });
                                        u.on("input", () => {
                                            m.addClass("notActive");
                                            D.html("&nbsp;");
                                            let ea = u.val();
                                            "" == ea ? f.addClass("show") : f.removeClass("show");
                                            if (!this.tronWeb.isAddress(ea) && 0 < ea.length || 34 < ea.length || ea == G.selectedAddress) r.addClass("error"), A.addClass("show"), ea == G.selectedAddress ? B.html(this.translation("tether.error.receiverAddressYours")) : B.html(this.translation("tether.error.incorrectAccount"));
                                            else if (r.removeClass("error"), A.removeClass("show"), B.html("&nbsp;"),
                                                "" != ea) {
                                                m.removeClass("notActive");
                                                q.receiverAddress = ea;
                                                try {
                                                    let Ga = G.address.map(pa => ({
                                                        address: pa.address,
                                                        userName: pa.userName
                                                    })).concat("undefined" != typeof G.addressBook ? G.addressBook : []);
                                                    D.html(Ga.find(pa => pa.address == ea).userName)
                                                } catch {
                                                    D.html("&nbsp;")
                                                }
                                            }
                                        });
                                        c.find(".iteam-sources").on("click", ea => {
                                            ea = $(ea.currentTarget);
                                            c.find(".iteam-sources").removeClass("active");
                                            ea.addClass("active");
                                            O();
                                            v(ea.attr("sources"))
                                        });
                                        p.append(l);
                                        v("address");
                                        setTimeout(O, 300);
                                        let y = $(`
                                <div class="wrap-send enter-amount">
                                    <div class="input-amount-case">
                                        <div class="title">${this.translation("tether.amount")}</div>
                                        <div class="input-case"> 
                                            <div class="wrap">
                                                <input name="receiverAmount" autocomplete="off"/>
                                                <div class="buttons-case"> 
                                                    ${this.configuration.tronApp.coins[0].id==K.id?"":'<div class="button max">\u041c\u0430\u043a\u0441.</div>'}
                                                    <div class="icon input-reset"></div>
                                                </div>
                                            </div>
                                            <div class="any-data-case"> 
                                            &nbsp;
                                            </div>
                                            
                                        </div>
                                        <!---->
                                        <div class="available-balance-case">
                                            <span class="balance"></span> 
                                        </div>
                                    </div>
                                    
                                    <div class="fee-data-case"> </div>
                                    <div class="error-input show"> 
                                        <div class="icon warning"></div>
                                        <div class="error-text"> </div>
                                    </div>
                                    
                                </div>
                            `),
                                            M = y.find(".input-amount-case .available-balance-case").find("span.balance"),
                                            X = y.find(".input-amount-case .input-case"),
                                            da = X.find("input"),
                                            ha = y.find(".error-input"),
                                            ka = ha.find(".error-text"),
                                            ia = X.find(".any-data-case");
                                        C = X.find(".buttons-case .max");
                                        let T = X.find(".buttons-case .input-reset"),
                                            ya = y.find(".fee-data-case"),
                                            Na = 0;
                                        C.on("click", () => {
                                            da.val(Na);
                                            da.trigger("input")
                                        });
                                        T.on("click", () => {
                                            da.val("");
                                            da.trigger("input")
                                        });
                                        da.on("change", () => {
                                            let ea = da.val();
                                            ea = `${+(+ea).toFixed(K.decimal+
1).replace(/.$/,"")}`;
                                            da.val(ea)
                                        });
                                        da.on("input", () => {
                                            let ea = da.val();
                                            "." == ea[0] && (ea = `0${ea}`, da.val(ea));
                                            ea = ea.replace(",", ".");
                                            try {
                                                let Ga = new RegExp(`^(.{${K.decimal}})`),
                                                    pa = ea.split(".");
                                                if (2 > pa.length) throw "nofloat";
                                                pa[1] = pa[1].length > K.decimal ? pa[1].match(Ga)[0] : pa[1];
                                                ea = pa.join(".")
                                            } catch (Ga) {}
                                            da.val(ea);
                                            Number.isNaN(+ea) && da.val("");
                                            q.amount = +ea;
                                            clearTimeout(g);
                                            ia.html("&nbsp;");
                                            k([]);
                                            ha.removeClass("show");
                                            X.removeClass("error");
                                            ka.html("&nbsp;");
                                            e.addClass("notActive");
                                            "" != da.val() && 0 !=
                                                da.val() && (e.addClass("notActive"), g = setTimeout(async () => {
                                                    try {
                                                        try {
                                                            if (ea > await t()) throw this.translation("tether.error.notEnoughCoins");
                                                        } catch (hb) {
                                                            throw hb;
                                                        }
                                                        X.removeClass("error");
                                                        ia.html("Calculating price");
                                                        let Ga = await z("sendCoin", q),
                                                            pa = +(Ga.txNetTronFee.usd - +(Ga.tfcFee * this.coinRateDollar.usdt.price_in_usd).toFixed(3)).toFixed(3),
                                                            Ja = [];
                                                        Ja.push({
                                                            id: "feemyTether",
                                                            parms: {
                                                                tfc: Ga.tfcFee,
                                                                tfcUsd: `${+(Ga.tfcFee*this.coinRateDollar.usdt.price_in_usd).toFixed(3)}`
                                                            }
                                                        });
                                                        0 < pa && (Ja.push({
                                                                id: "feeEconomy",
                                                                parms: {
                                                                    economy: `${pa}`
                                                                }
                                                            }),
                                                            Ja.unshift({
                                                                id: "feenetTron",
                                                                parms: {
                                                                    trx: Ga.txNetTronFee.trx,
                                                                    trxUsd: Ga.txNetTronFee.usd
                                                                }
                                                            }));
                                                        k(Ja);
                                                        Object.assign(q, Ga);
                                                        e.removeClass("notActive");
                                                        ia.html(`\u2248 $${(ea*this.coinRateDollar.usdt.price_in_usd).toFixed(3)}`)
                                                    } catch (Ga) {
                                                        X.addClass("error"), ia.html(this.translation("tether.error.errorDesc", {
                                                            reason: Ga
                                                        })), e.addClass("notActive")
                                                    }
                                                }, 500))
                                        });
                                        da.on("keypress", ea => {
                                            if (!(new RegExp(/^[.0-9,]/)).test(ea.key)) return ea.preventDefault()
                                        });
                                        p.append(y);
                                        C = Ra(this.translation("tether.sendToken", {
                                                tokenId: K.id
                                            }),
                                            p, L(), this.translation("action.cancel"));
                                        let Ta = C.find(".button-case"),
                                            Qa = C.find(".head-case .title"),
                                            Oa = $('<div class="atcion-button-wrap"></div>');
                                        Ta.prepend(Oa);
                                        n("enter-address")
                                    }, va = K => {
                                        kb.html("");
                                        if (null != K) {
                                            kb.append(`
                                <div class="wrap-list">  
                                    <!--<div class="title-case">${this.translation("tether.coins")} </div>-->
                                    <div class="optional-action-buttons-case">
                                         
                                    </div>
                                    <div class="table-wrap">
                                        <div class="img-bg-case">
                                            <img src="../img/svg/netTron.svg" />
                                        </div>
                                        <table class="coin-list-table">
                                            <thead>
                                                <tr>
                                                    <th>${this.translation("tether.table.coin")}</th>
                                                    <th>${this.translation("tether.table.coinName")}</th>
                                                    <th>${this.translation("tether.table.balance")}</th>
                                                    <th class="action"></th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            `);
                                            var O = kb.find(".wrap-list"),
                                                v = O.find("table.coin-list-table tbody"),
                                                n = O.find(".optional-action-buttons-case"),
                                                k = $(`
                                <div class="button-case">
                                    <div class="icon exchange"></div>
                                    <div class="button-text">${this.translation("tether.exchange")}</div>
                                </div>
                            `);
                                            k.on("click", () => {
                                                oa()
                                            });
                                            n.append(k);
                                            var t = 0;
                                            for (let m = 0; m < this.configuration.tronApp.coins.length; m++) {
                                                let h = this.configuration.tronApp.coins[m];
                                                n = $(`
                                    <tr>
                                        <td class="coin">
                                            <div class="coin-case">
                                                <img class="icon" src="../img/coin/${h.icon}" />
                                                <div class="text-name">${h.id}</div>  
                                            </div>
                                        </td>
                                        <td>${h.title}</td>
                                        <td class="balanse">
                                            <div class="balance-case loading">
                                                <div class="loading-case">
                                                    <img src="../img/svg/loading_3.svg" />
                                                </div>
                                                <div class="text-value-case">
                                                    <div class="value"></div>
                                                    <div class="value-usd"></div>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="action">
                                            <div class="action-buttons-case">
                                                <div class="action-button update icon"></div>
                                                <div class="action-button get">${this.translation("action.get")}</div>
                                                <div class="action-button send">${this.translation("action.send")}</div>
                                            </div>
                                        </td>
                                    </tr>
                                `);
                                                n.on("mouseenter", () => {
                                                    O.addClass("hideBG")
                                                });
                                                n.on("mouseleave", () => {
                                                    O.removeClass("hideBG")
                                                });
                                                let e = n.find("td.balanse .balance-case");
                                                k = e.find(".text-value-case");
                                                let g = k.find(".value"),
                                                    q = k.find(".value-usd");
                                                k = n.find("td.action .action-buttons-case");
                                                let p = k.find(".action-button.update"),
                                                    l = k.find(".action-button.get");
                                                k.find(".action-button.send").on("click", async () => {
                                                    Aa(h)
                                                });
                                                l.on("click", async () => {
                                                    await H(K, null, h.id)
                                                });
                                                p.on("click", async () => {
                                                    e.addClass("loading");
                                                    await b(300);
                                                    let f = 0;
                                                    for (let d = 0; d < this.configuration.tronApp.coins.length; d++) {
                                                        let a = this.configuration.tronApp.coins[d];
                                                        this.getBalanceCoin(a, K.address, async (c, r) => {
                                                            h.address == a.address && (e.removeClass("loading"), g.html(`${this.numberFormat(c)}`), q.html(`\u2248 $${this.numberFormat((c*this.coinRateDollar.usdt.price_in_usd).toFixed(2))}`));
                                                            f += c * this.coinRateDollar.usdt.price_in_usd;
                                                            d == this.configuration.tronApp.coins.length - 1 && (K.balance = f, await chrome.storage.local.set({
                                                                tronApp: G
                                                            }))
                                                        })
                                                    }
                                                });
                                                this.on(`coinBalanceUpdatedClick_${h.id}`,
                                                    "fillCoinDataClick", async () => {
                                                        p.trigger("click")
                                                    });
                                                this.getBalanceCoin(h, K.address, async (f, d) => {
                                                    e.removeClass("loading");
                                                    g.html(`${this.numberFormat(f)}`);
                                                    q.html(`\u2248 $${this.numberFormat((f*this.coinRateDollar.usdt.price_in_usd).toFixed(2))}`);
                                                    t += f * this.coinRateDollar.usdt.price_in_usd;
                                                    m == this.configuration.tronApp.coins.length - 1 && (K.balance = t, await chrome.storage.local.set({
                                                        tronApp: G
                                                    }))
                                                });
                                                v.append(n)
                                            }
                                        }
                                    }, Wa = K => {
                                        let O = async (l = !0) => {
                                            let f = $(`
                                    <table>
                                        <thead>
                                            <tr> 
                                                <th class="hash">${this.translation("history.id")}</th>
                                                <th>${this.translation("history.time")}</th> 
                                                <th>${this.translation("history.coin")}</th>
                                                <th>${this.translation("history.counterparty")}</th>
                                                <th>${this.translation("history.amoutn")}</th> 
                                            </tr>
                                        </thead>
                                        <tbody>
                                        </tbody>
                                    </table>
                                `),
                                                d = f.find("tbody");
                                            f.find("thead");
                                            var a = $('\n                                    <div class="history-loading-case">\n                                        <img class="svg-loading" src="../img/svg/loading_2.svg" />\n                                    </div>\n                                ');
                                            a.css({
                                                transform: `translateY(${g.scrollTop()}px)`
                                            });
                                            g.append(a);
                                            l ? (p.html(this.translation("filter.lastoperation")), g.addClass("lastoperation")) : (p.html(`${this.translation("filter.description",
{coin:k.coin,transferType:this.translation(`filter.${k.transferType}`),dateFrom:moment(1E3*k.date.from).format("DD.MM.YYYY"),dateTo:moment(1E3*k.date.to-1).format("DD.MM.YYYY")})}`), g.removeClass("lastoperation"));
                                            ab = [{
                                                userName: this.translation("tether.addressServis"),
                                                address: this.configuration.tronApp.serviceAddress
                                            }].concat(G.address.map(y => ({
                                                userName: y.userName,
                                                address: y.address
                                            })).concat(G.addressBook.map(y => ({
                                                userName: y.userName,
                                                address: y.address
                                            }))));
                                            var c = await (async () => {
                                                let y = {
                                                    total: 0,
                                                    arrResult: []
                                                };
                                                if (l) {
                                                    for (var M = 0; M < this.configuration.tronApp.coins.length; M++) {
                                                        var X = {
                                                                limit: 20,
                                                                start: 0,
                                                                sort: "-timestamp",
                                                                count: "true",
                                                                filterTokenValue: "0"
                                                            },
                                                            da = void 0;
                                                        let ka = this.configuration.tronApp.coins[M];
                                                        switch (ka.standard) {
                                                            case "TRC10":
                                                                da = `${this.configuration.tronApp.tronscanapi}/api/trc10/transfer?`;
                                                                X.address = K.address;
                                                                break;
                                                            case "TRC20":
                                                                da = `${this.configuration.tronApp.tronscanapi}/api/filter/trc20/transfers?`, X.relatedAddress = K.address
                                                        }
                                                        X = (new URLSearchParams(X)).toString();
                                                        X = await this.get(`${da}${X}`, {
                                                            "TRON-PRO-API-KEY": "bad2de69-6754-4f6c-ad06-410a8d738303"
                                                        });
                                                        "TRC20" == ka.standard && (y.arrResult = y.arrResult.concat(X.token_transfers.map(ia => ({
                                                            hash: ia.transaction_id,
                                                            timestamp: ia.block_ts,
                                                            coin: ia.tokenInfo.tokenAbbr,
                                                            addressFrom: ia.from_address,
                                                            addressTo: ia.to_address,
                                                            amount: ia.quant,
                                                            amountShort: +ia.quant / I(ka)
                                                        }))));
                                                        "TRC10" == ka.standard && (y.arrResult = y.arrResult.concat(X.data.map(ia => ({
                                                            hash: ia.transactionHash,
                                                            timestamp: ia.timestamp,
                                                            coin: ia.tokenInfo.tokenAbbr,
                                                            addressFrom: ia.transferFromAddress,
                                                            addressTo: ia.transferToAddress,
                                                            amount: ia.amount,
                                                            amountShort: +ia.amount / I(ka)
                                                        }))))
                                                    }
                                                    y.arrResult = y.arrResult.sort((ka, ia) => ka.timestamp < ia.timestamp ? 1 : ka.timestamp > ia.timestamp ? -1 : 0);
                                                    let ha = this.configuration.tronApp.coins.map(ka => ka.id);
                                                    y.arrResult = y.arrResult.filter(ka => ha.includes(ka.coin))
                                                } else {
                                                    M = {
                                                        limit: k.limit,
                                                        start: k.start,
                                                        type: "transfer",
                                                        start_timestamp: Math.round(1E3 * k.date.from),
                                                        end_timestamp: Math.round(1E3 * k.date.to),
                                                        relation: "or"
                                                    };
                                                    let ha = this.configuration.tronApp.coins.find(ka => ka.id == k.coin);
                                                    switch (ha.standard) {
                                                        case "TRC10":
                                                            M.token =
                                                                ha.tokenID;
                                                            M.type = "tx";
                                                            break;
                                                        case "TRC20":
                                                            M.secondType = "20", M.token = ha.address
                                                    }
                                                    switch (k.transferType) {
                                                        case "out":
                                                            M.fromAddress = K.address;
                                                            break;
                                                        case "in":
                                                            M.toAddress = K.address;
                                                            break;
                                                        default:
                                                            M.fromAddress = K.address, M.toAddress = K.address
                                                    }
                                                    da = (new URLSearchParams(M)).toString();
                                                    da = await this.get(`${this.configuration.tronApp.tronscanapi}/api/multi/search?${da}`, {
                                                        "TRON-PRO-API-KEY": "bad2de69-6754-4f6c-ad06-410a8d738303"
                                                    });
                                                    y.total = da.total;
                                                    y.arrResult = "tx" == M.type ? y.arrResult.concat(da.data.map(ka => ({
                                                        hash: ka.hash,
                                                        timestamp: ka.date_created,
                                                        coin: ka.tokenInfo.tokenAbbr,
                                                        addressFrom: ka.owner_address,
                                                        addressTo: ka.toAddress,
                                                        amount: ka.amount,
                                                        amountShort: ka.amount / I(ha)
                                                    }))) : y.arrResult.concat(da.data.map(ka => ({
                                                        hash: ka.hash,
                                                        timestamp: ka.date_created,
                                                        coin: ka.tokenInfo.tokenAbbr,
                                                        addressFrom: ka.from_address,
                                                        addressTo: ka.to_address,
                                                        amount: ka.amount,
                                                        amountShort: ka.amount / I(ha)
                                                    })))
                                                }
                                                return y
                                            })();
                                            a = c.arrResult;
                                            q.html("");
                                            for (let y = 0; y < Math.ceil(c.total / k.limit); y++) {
                                                var r = $(`<div class="nav-button-case">${y+1}</div>`);
                                                r.on("click",
                                                    async () => {
                                                        k.start = 0 == y ? 0 : y * k.limit;
                                                        await O(!1);
                                                        g.scrollTop(0)
                                                    });
                                                var u = k.start / k.limit;
                                                u == y ? r.addClass("select") : r.removeClass("select");
                                                y <= u ? 2 < u - y ? r.addClass(`hide hide${u-y}`) : r.removeClass("hide") : 2 < y - u ? r.addClass(`hide hide${y-u}`) : r.removeClass("hide");
                                                q.append(r)
                                            }
                                            for (r = 0; r < a.length; r++) {
                                                let y = a[r];
                                                var A = `${y.addressFrom.slice(0,15)}.....${y.addressFrom.slice(-7)}`;
                                                c = y.addressFrom;
                                                var B = ab.find(ha => ha.address == y.addressFrom),
                                                    C = `${y.addressTo.slice(0,15)}.....${y.addressTo.slice(-7)}`,
                                                    D = y.addressTo,
                                                    w = ab.find(ha => ha.address == y.addressTo);
                                                u = $("<tr></tr>");
                                                u.append(`<td class="hash">  <a target="_blank" href="${this.configuration.tronApp.tronscanDomain}/index.html#/transaction/${y.hash}">${y.hash.slice(0,9)}.....${y.hash.slice(-5)}</a> </td>`);
                                                u.append(`<td>  ${moment(y.timestamp).format("DD.MM.YYYY HH:mm:ss")} </td>`);
                                                u.append(`<td>  ${y.coin} </td>`);
                                                let M = c == G.selectedAddress ? D : c;
                                                A = $(`
                                        <td class="counterparty">
                                            <div class="counterparty-case">
                                                <div class="short-address">${c==G.selectedAddress?C:A}</div>
                                                <div class="popup-case">
                                                    <div class="address"><div class="is-copied">${this.translation("action.isCopied")}</div>${M}</div>
                                                    <div class="icon copy address-copy"></div>
                                                </div>
                                                <div class="address-name">${c==G.selectedAddress?void 0==w?"":w.userName:void 0==B?"":B.userName}</div>
                                            </div>
                                        </td>
                                    `);
                                                let X = A.find(".popup-case .address .is-copied"),
                                                    da = A.find(".address-name");
                                                this.on(`addressNameChanged${M}`, `fillHistoryList${y.hash}`, ha => {
                                                    da.html(ha)
                                                });
                                                u.on("click", async ha => {
                                                    null == ha.target.closest("a") && (null != ha.target.closest(".address-copy") ? (X.addClass("show"), await navigator.clipboard.writeText(M), setTimeout(() => {
                                                        X.removeClass("show")
                                                    }, 700)) : await v(y.hash))
                                                });
                                                u.append(A);
                                                u.append(`
                                        <td class="amount ${c==G.selectedAddress?"credit":"debit"}">
                                            ${c==G.selectedAddress?"-":"+"} ${y.amountShort}  
                                        </td>
                                    `);
                                                d.append(u)
                                            }
                                            0 == a.length && d.append(`<tr class="no-result"><td colspan="5">${this.translation("tether.table.noresult")}</td></tr>`);
                                            g.html("");
                                            g.append(f);
                                            qa(g);
                                            return !0
                                        }, v = async l => {
                                            let f = $('\n                                    <div class="operation-details-case">\n                                        <div class="history-loading-case">\n                                            <img class="svg-loading" src="../img/svg/loading_2.svg" />\n                                        </div>\n                                    </div>\n                                '),
                                                d = Ra(this.translation("tether.operationDetails"), f, L(), this.translation("action.close"));
                                            d.find(".button-case");
                                            d.find(".head-case .title");
                                            $('<div class="atcion-button-wrap"></div>');
                                            let a = {};
                                            try {
                                                a.tx = await this.tronWeb.trx.getTransaction(l);
                                                f.html("");
                                                let c = $(`
                                        <div class="iteam-data">
                                            <div class="value hash">
                                                <a target="_blank" href="${this.configuration.tronApp.tronscanDomain}/index.html#/transaction/${a.tx.txID}">${a.tx.txID}</a>
                                                <div class="is-copied">${this.translation("action.isCopied")}</div>
                                            </div>
                                            <div class="icon copy"></div>
                                        </div>
                                    `),
                                                    r = c.find(".is-copied");
                                                c.find(".icon.copy").on("click", async () => {
                                                    await navigator.clipboard.writeText(a.tx.txID);
                                                    r.addClass("show");
                                                    setTimeout(() => {
                                                        r.removeClass("show")
                                                    }, 700)
                                                });
                                                f.append(c);
                                                f.append(`
                                        <div class="iteam-data">
                                            <div class="title">${this.translation("tether.status")}</div>
                                            <div class="value">${a.tx.ret[0].contractRet}</div> 
                                        </div>
                                    `);
                                                try {
                                                    a.transactionInfo = await this.tronWeb.trx.getTransactionInfo(a.tx.txID), "undefined" != typeof a.transactionInfo.blockNumber && f.append(`
                                            <div class="iteam-data">
                                                <div class="title">${this.translation("tether.block")}</div>
                                                <div class="value">${a.transactionInfo.blockNumber}</div> 
                                            </div>
                                        `), "undefined" != typeof a.transactionInfo.blockTimeStamp && f.append(`
                                            <div class="iteam-data">
                                                <div class="title">${this.translation("tether.date")}</div>
                                                <div class="value">${moment(a.transactionInfo.blockTimeStamp).format("DD.MM.YYYY HH:mm:ss")}</div> 
                                            </div> 
                                        `)
                                                } catch (u) {}
                                                try {
                                                    let u = await this.post(this.configuration.appData.myTetherApiServer, {
                                                        type: "getTxData",
                                                        data: {
                                                            txID: a.tx.txID
                                                        }
                                                    });
                                                    if (!u.result) throw JSON.stringify(u);
                                                    a.txsContract = u.data;
                                                    let A = a.txsContract.find(B => B.txID == a.tx.txID);
                                                    a.contractType = A.contractType;
                                                    switch (a.contractType) {
                                                        case "sendCoinUser":
                                                            switch (A.target) {
                                                                case "txUser":
                                                                    let B = a.txsContract.find(D => "txFee" == D.target),
                                                                        C = JSON.parse(B.objSendCoin);
                                                                    a.fee = `${C.amount/I(this.configuration.tronApp.coins.find(D=>
D.id==C.coin))} ${C.coin}`;
                                                                    C.fromAddress != K.address && delete a.fee
                                                            }
                                                    }
                                                    a.comment = this.translation(`tether.txComment.${a.contractType}.${A.target}`)
                                                } catch (u) {}
                                                try {
                                                    a.sendCoin = await R(a.tx);
                                                    let u = ab.find(A => A.address == a.sendCoin.fromAddress);
                                                    u = void 0 == u ? "" : u.userName;
                                                    f.append(`
                                            <div class="iteam-data">
                                                <div class="title">${this.translation("tether.addressFrom")}</div>
                                                <div class="value">${a.sendCoin.fromAddress}<div class="address-name">${u}</div></div> 
                                            </div> 
                                        `);
                                                    u = ab.find(A => A.address == a.sendCoin.toAddress);
                                                    u = void 0 == u ? "" : u.userName;
                                                    f.append(`
                                            <div class="iteam-data">
                                                <div class="title">${this.translation("tether.addressTo")}</div>
                                                <div class="value">${a.sendCoin.toAddress}<div class="address-name">${u}</div></div> 
                                            </div> 
                                        `);
                                                    f.append(`
                                            <div class="iteam-data">
                                                <div class="title">${this.translation("tether.amountShort")}</div>
                                                <div class="value">${a.sendCoin.amountShort}  ${a.sendCoin.coinId}</div> 
                                            </div> 
                                        `);
                                                    "undefined" != typeof a.fee && f.append(`
                                            <div class="iteam-data">
                                                <div class="title">${this.translation("tether.fee")}</div>
                                                <div class="value">${a.fee}</div> 
                                            </div> 
                                        `);
                                                    "undefined" != typeof a.comment && f.append(`
                                            <div class="iteam-data">
                                                <div class="title">${this.translation("tether.target")}</div>
                                                <div class="value">${a.comment}</div> 
                                            </div> 
                                        `)
                                                } catch (u) {}
                                            } catch (c) {}
                                        };
                                        mb.html("");
                                        if (null != K) {
                                            var n = $('<div class="filters-block-case"></div>'),
                                                k = {
                                                    date: {
                                                        from: Math.round(moment().startOf("month").valueOf() / 1E3),
                                                        to: Math.round(moment().endOf("month").valueOf() / 1E3)
                                                    },
                                                    transferType: "all",
                                                    coin: "USDT",
                                                    limit: 10,
                                                    address: K.address,
                                                    start: 0
                                                },
                                                t = [{
                                                    id: "date",
                                                    type: "daterange",
                                                    value: `${moment().startOf("month").format("DD.MM.YYYY")} - ${moment().endOf("month").format("DD.MM.YYYY")}`,
                                                    values: null
                                                }, {
                                                    id: "transferType",
                                                    type: "select",
                                                    valuePerf: "filter",
                                                    value: "all",
                                                    values: ["in", "out", "all"]
                                                }, {
                                                    id: "coin",
                                                    type: "select",
                                                    valuePerf: "filter",
                                                    value: "USDT",
                                                    values: this.configuration.tronApp.coins.map(l => l.id)
                                                }, {
                                                    id: "limit",
                                                    type: "select",
                                                    valuePerf: "filter",
                                                    value: "10",
                                                    values: ["10", "20", "50"]
                                                }];
                                            for (var m = 0; m < t.length; m++) {
                                                var h = void 0;
                                                let l = t[m];
                                                var e = $(`<div class="iteam-filter-case ${l.id} ${l.type}"></div>`);
                                                e.append(`
                                    <div class="title-case">
                                        <div class="name-filter">${this.translation(`filter.${l.id}`)}</div>
                                    </div>
                                `);
                                                switch (l.type) {
                                                    case "daterange":
                                                        h = $(`
                                            <div class="filter-case">
                                                <div class="icon calendar"></div> 
                                                <div class="date-value">${l.value}</div>
                                                <div class="icon selectwrap"></div>
                                            </div>
                                        `);
                                                        e.append(h);
                                                        h.daterangepicker({
                                                            autoUpdateInput: !0,
                                                            parentEl: mb,
                                                            startDate: moment().startOf("month").format("DD.MM.YYYY"),
                                                            endDate: moment().endOf("month").format("DD.MM.YYYY"),
                                                            locale: {
                                                                showCustomRangeLabel: !1,
                                                                format: "DD.MM.YYYY",
                                                                separator: " - ",
                                                                firstDay: 1,
                                                                applyLabel: this.translation("daterangepicker.action.apply"),
                                                                cancelLabel: this.translation("daterangepicker.action.cancel"),
                                                                customRangeLabel: this.translation("daterangepicker.ranges.customRangeLabel"),
                                                                monthNames: [this.translation("daterangepicker.monthNames.Jan"),
                                                                    this.translation("daterangepicker.monthNames.Feb"), this.translation("daterangepicker.monthNames.Mar"), this.translation("daterangepicker.monthNames.Apr"), this.translation("daterangepicker.monthNames.May"), this.translation("daterangepicker.monthNames.Jun"), this.translation("daterangepicker.monthNames.Jul"), this.translation("daterangepicker.monthNames.Aug"), this.translation("daterangepicker.monthNames.Sep"), this.translation("daterangepicker.monthNames.Oct"), this.translation("daterangepicker.monthNames.Nov"),
                                                                    this.translation("daterangepicker.monthNames.Dec")
                                                                ],
                                                                daysOfWeek: [this.translation("daterangepicker.daysOfWeek.Su"), this.translation("daterangepicker.daysOfWeek.Mo"), this.translation("daterangepicker.daysOfWeek.Tu"), this.translation("daterangepicker.daysOfWeek.We"), this.translation("daterangepicker.daysOfWeek.Th"), this.translation("daterangepicker.daysOfWeek.Fr"), this.translation("daterangepicker.daysOfWeek.Sa")]
                                                            },
                                                            ranges: {
                                                                [this.translation("daterangepicker.ranges.today")]: [moment(), moment()],
                                                                [this.translation("daterangepicker.ranges.yesterday")]: [moment().subtract(1,
                                                                    "days"), moment().subtract(1, "days")],
                                                                [this.translation("daterangepicker.ranges.Last7Days")]: [moment().subtract(6, "days"), moment()],
                                                                [this.translation("daterangepicker.ranges.Last30Days")]: [moment().subtract(29, "days"), moment()],
                                                                [this.translation("daterangepicker.ranges.ThisMonth")]: [moment().startOf("month"), moment().endOf("month")],
                                                                [this.translation("daterangepicker.ranges.LastMonth")]: [moment().subtract(1, "month").startOf("month"), moment().subtract(1, "month").endOf("month")]
                                                            }
                                                        }, function(a, c, r) {});
                                                        h.on("apply.daterangepicker", function(a, c) {
                                                            $(this).find(".date-value").html(c.startDate.format("DD.MM.YYYY") + " - " + c.endDate.format("DD.MM.YYYY"));
                                                            k.date.from = Math.round(c.startDate.valueOf() / 1E3);
                                                            k.date.to = Math.round(c.endDate.valueOf() / 1E3)
                                                        });
                                                        h.on("cancel.daterangepicker", function(a, c) {
                                                            $(this).find(".date-value").html("")
                                                        });
                                                        h.on("show.daterangepicker", function(a, c) {
                                                            $(this).addClass("showdaterangepicker")
                                                        });
                                                        h.on("hide.daterangepicker", function(a, c) {
                                                            $(this).removeClass("showdaterangepicker")
                                                        });
                                                        break;
                                                    case "select":
                                                        h = $(`
                                            <div class="filter-case">
                                                <div class="icon ${l.id}"></div> 
                                            </div>
                                        `);
                                                        let f = $(`
                                            <div class="custom-input-select" type="select" >
                                                <div class="select-case">
                                                    <div class="value">${this.translation(`${l.valuePerf}.${l.value}`).replace(`${l.valuePerf}.`,"")}</div>
                                                    <div class="icon selectwrap"></div>
                                                </div> 
                                            </div>
                                        `),
                                                            d = $('<div class="option-case"></div>');
                                                        for (let a = 0; a < l.values.length; a++) d.append(`<div class="option" value="${l.values[a]}" >${this.translation(`${l.valuePerf}.${l.values[a]}`).replace(`${l.valuePerf}.`,"")}</div>`);
                                                        f.append(d);
                                                        h.append(f);
                                                        e.append(h);
                                                        f.on("click", a => {
                                                            let c = $(a.currentTarget);
                                                            if (c.hasClass("showselect")) {
                                                                if (null != a.target.closest(".option")) {
                                                                    var r = $(a.target).attr("value");
                                                                    a = $(a.target).html();
                                                                    c.find(".select-case .value").html(a);
                                                                    switch (l.id) {
                                                                        case "strategyName":
                                                                            "all" !=
                                                                            r && (a = strategies.find(u => u.id == r || u.data.userTitle == r), r = void 0 != a ? a.id : "all");
                                                                            k[l.id] = r;
                                                                            break;
                                                                        default:
                                                                            k[l.id] = r
                                                                    }
                                                                }
                                                                return c.removeClass("showselect")
                                                            }
                                                            $('.custom-input-select[type="select"]').removeClass("showselect");
                                                            c.addClass("showselect")
                                                        })
                                                }
                                                n.append(e)
                                            }
                                            var g = $('<div class="history-view-case"></div>'),
                                                q = $(' <div class="page-nav-case"></div> ');
                                            t = $(`
                                <div class="filter-details-case">
                                    <div class="filter-value"></div>
                                    <div class="icon updateHistory icon-updateHistory" title="${this.translation("action.update")}"></div>
                                    <div class="icon input-reset icon-reset" title="${this.translation("action.reset")}"></div>
                                </div>
                            `);
                                            var p = t.find(".filter-value");
                                            m = t.find(".icon-reset");
                                            h = t.find(".icon-updateHistory");
                                            e = $('<div class="iteam-filter-case apply"></div>');
                                            e.append(`
                                <div class="title-case">
                                    <div class="name-filter">&emsp;</div>
                                </div>
                                <div class="filter-case">  
                                    <div class="date-value apply">${this.translation("filter.apply")}</div>  
                                </div>
                            `);
                                            n.append(e);
                                            mb.append(n);
                                            mb.append(g);
                                            mb.append(t);
                                            mb.append(q);
                                            m.on("click", O);
                                            h.on("click", O);
                                            e.on("click", async l => {
                                                k.start = 0;
                                                await O(!1);
                                                g.scrollTop(0)
                                            });
                                            O();
                                            this.on("updateLastOperations", "fillCoinHistory", () => {
                                                g.hasClass("lastoperation") && O()
                                            })
                                        }
                                    }, Ka = () => {
                                        let K = vb.clone(),
                                            O = $('\n                                <div class="main-menu-trc20-container hide">\n                                    <div class="head-case">\n                                        <div class="title"></div>\n                                        <div class="icon close button-close"></div>\n                                    </div>\n                                    <div class="body-menu-case"> \n                                    </div>\n                                    \n                                </div>\n                            ');
                                        K.append(O);
                                        K.insertAfter("main");
                                        setTimeout(() => {
                                            O.removeClass("hide")
                                        }, 100);
                                        let v = O.find(".icon.close"),
                                            n = O.find(".body-menu-case");
                                        K.on("mousedown", m => {
                                            $(m.target).hasClass("all-curtain-blur") && v.trigger("click")
                                        });
                                        v.on("click", async () => {
                                            O.addClass("hide");
                                            await b(500);
                                            K.remove()
                                        });
                                        let k = [{
                                            id: "changePassword",
                                            revealed: !0,
                                            mark: "tether.settings.changePassword",
                                            icon: "changePassword",
                                            func: async m => {
                                                m = $(m.currentTarget).find(".wrap-body");
                                                let h = $('<div class="change-password-case"> </div>'),
                                                    e = $('\n                                    <div class="input-wrap">\n                                        <div class="placeholder"></div>\n                                        <div class="input-case">\n                                            <input type="password" />\n                                            <div class="icon showPass"></div>  \n                                        </div>\n                                    </div>\n                                '),
                                                    g = [];
                                                for (let l = 0; 3 > l; l++) {
                                                    let f = e.clone();
                                                    f.find(".placeholder").html(this.translation(`tether.changePassword.${l}`));
                                                    let d = f.find(".input-case .icon.showPass"),
                                                        a = f.find(".input-case input");
                                                    d.on("mousedown", () => {
                                                        a[0].type = "text";
                                                        a.addClass("active");
                                                        d.on("mouseout", () => {
                                                            d.trigger("mouseup")
                                                        })
                                                    });
                                                    d.on("mouseup", () => {
                                                        a.removeClass("active");
                                                        a[0].type = "password";
                                                        d.unbind("mouseout")
                                                    });
                                                    a.on("input", () => {
                                                        q.removeClass("error");
                                                        a: {
                                                            for (let c = 0; c < g.length; c++)
                                                                if ("" == g[c].val()) {
                                                                    p.addClass("notActive");
                                                                    break a
                                                                } p.removeClass("notActive")
                                                        }
                                                    });
                                                    g.push(a);
                                                    h.append(f)
                                                }
                                                let q = h.find(".input-case"),
                                                    p = $(`<div class="button-save notActive">${this.translation("tether.settings.change")}</div>`);
                                                p.on("click", async () => {
                                                    if (!p.hasClass("notActive")) try {
                                                        var l = this.tronWeb.sha3(g[0].val(), !1);
                                                        if (G.password != l) throw {
                                                            intercepted: !0,
                                                            inputId: [0],
                                                            msg: this.translation("tether.error.invalidPassword")
                                                        };
                                                        if (g[1].val() != g[2].val()) throw {
                                                            intercepted: !0,
                                                            inputId: [1, 2],
                                                            msg: this.translation("tether.error.passwordsNoMatch")
                                                        };
                                                        G.sumErrInpassword = 0;
                                                        await la(this.translation("prompt.title.confirm"),
                                                            this.translation("prompt.topic.changePassword")) && (G.password = this.tronWeb.sha3(g[1].val(), !1), q.find("input").val(""), this.notification(this.translation("completed.completed"), this.translation("completed.completedNewPass"), 5E3, "changePassword"));
                                                        await chrome.storage.local.set({
                                                            tronApp: G
                                                        })
                                                    } catch (f) {
                                                        for (l = 0; l < f.inputId.length; l++) $(h.find(".input-wrap .input-case")[f.inputId[l]]).addClass("error");
                                                        0 == f.inputId && (G.sumErrInpassword++, G.sumErrInpassword == this.configuration.tronApp.maxPasswordInerrors ?
                                                            (await Ba(), v.trigger("click"), Ra(this.translation("errors.error"), $(`<div style="max-width: 370px">${this.translation("errors.limitReached")}</div>`), L()), ca.html(await sa())) : (await chrome.storage.local.set({
                                                                tronApp: G
                                                            }), this.notification(this.translation("errors.error"), this.translation("errors.invalidPassword", {
                                                                try: this.configuration.tronApp.maxPasswordInerrors - G.sumErrInpassword
                                                            }), 7E3, "error", "error")))
                                                    }
                                                });
                                                h.append(p);
                                                m.html(h)
                                            }
                                        }, {
                                            id: "addressBook",
                                            revealed: !0,
                                            mark: "tether.settings.addressBook",
                                            icon: "addressBook",
                                            func: async m => {
                                                let h, e, g = (a = null, c = "") => {
                                                        let r = null == a;
                                                        r && (a = {
                                                            userName: "",
                                                            address: "",
                                                            description: ""
                                                        });
                                                        let u = $(`
                                        <div class="iteam-address-case ${r?"isNew":""}">
                                            <div class="user-name-case">
                                                <div class="icon userAddress"></div>    
                                                <div class="user-name changeable" >
                                                    <span class="book-data">${""!=c?a.userName.replace(new RegExp(`(${c})`,"ig"),'<span class="highlight">$1</span>'):a.userName}</span>
                                                    <input autocomplete="off" name="userName" class="input-book-data" type="text" placeholder="${this.translation("tether.placeholder.userName")}"/>
                                                    <div class="error-case">
                                                        <div class="icon sort_down"></div>
                                                        <div class="text"></div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="address changeable" >
                                                <span class="book-data">${""!=c?a.address.replace(new RegExp(`(${c})`,"ig"),'<span class="highlight">$1</span>'):a.address}</span>
                                                <input autocomplete="off" name="address" class="input-book-data" type="text" placeholder="${this.translation("tether.placeholder.address")}"/>
                                                <div class="error-case"> 
                                                    <div class="icon sort_down"></div>
                                                    <div class="text"></div>
                                                </div>
                                            </div>
                                            <div class="bottom-wrap">
                                                <div class="address-desc changeable">
                                                    <span class="book-data">${""!=c?a.description.replace(new RegExp(`(${c})`,"ig"),'<span class="highlight">$1</span>'):a.description}</span>
                                                    <input autocomplete="off" name="description" class="input-book-data" type="text" placeholder="${this.translation("tether.placeholder.description")}"/>
                                                    <div class="error-case"> 
                                                        <div class="icon sort_down"></div>
                                                        <div class="text"></div>
                                                    </div>
                                                </div>
                                                <div class="action">
                                                    <div class="icon editBg edit-buttom" title="${this.translation("action.edit")}"></div>
                                                    <div class="icon copy copy-button" title="${this.translation("action.copy")}"></div>
                                                    <div class="icon trash" title="${this.translation("action.delete")}"></div>
                                                </div>
                                            </div>
                                        </div> 
                                    `),
                                                            A = u.find(".edit-buttom");
                                                        u.on("mousedown", async B => {
                                                            if (null === B.target.closest("input")) {
                                                                var C = this;
                                                                if (u.hasClass("selected"))
                                                                    if (null !== B.target.closest(".icon"))
                                                                        if (B.target.closest(".copy-button")) {
                                                                            var D = $(B.target.closest(".copy-button"));
                                                                            let M = $(`
                                                        <div class="is-copy-case">
                                                            <div class="is-copy-wrap">
                                                                <div class="icon ok_sign"></div>
                                                                <div class="text">${this.translation("action.addressIsCopied")}</div>
                                                            </div>
                                                            <div class="icon sort_down"></div>
                                                        </div>
                                                    `);
                                                                            await navigator.clipboard.writeText(a.address);
                                                                            D.append(M);
                                                                            setTimeout(async () => {
                                                                                M.addClass("hide");
                                                                                await b(500);
                                                                                M.remove()
                                                                            }, 700)
                                                                        } else if (B.target.closest(".save")) {
                                                                    if (r) {
                                                                        for (D in a) {
                                                                            var w = a[D];
                                                                            B = u.find(`input[name="${D}"]`).siblings(".error-case").find(".text");
                                                                            try {
                                                                                switch (D) {
                                                                                    case "userName":
                                                                                        if ("" == w) throw {
                                                                                            key: D,
                                                                                            text: C.translation("tether.error.noEmpty")
                                                                                        };
                                                                                        break;
                                                                                    case "address":
                                                                                        if (u.find(`input[name="${D}"]`).hasClass("error")) throw 0;
                                                                                        if ("" == w) throw {
                                                                                            key: D,
                                                                                            text: C.translation("tether.error.noEmpty")
                                                                                        };
                                                                                        if (!this.tronWeb.isAddress(w)) throw {
                                                                                            key: D,
                                                                                            text: C.translation("tether.error.invalidAddress")
                                                                                        };
                                                                                        break;
                                                                                    case "description":
                                                                                        if ("" == w) throw {
                                                                                            key: D,
                                                                                            text: C.translation("tether.error.noEmpty")
                                                                                        };
                                                                                }
                                                                            } catch (M) {
                                                                                "object" == typeof M && (B.html(M.text), u.find(`input[name="${M.key}"]`).addClass("error"));
                                                                                return
                                                                            }
                                                                        }
                                                                        G.addressBook.push(a);
                                                                        r = !1;
                                                                        u.removeClass("isNew");
                                                                        b(700).then(() => {
                                                                            C.notification(C.translation("tether.notification.addAddressBookShort", {
                                                                                userName: a.userName
                                                                            }), C.translation("tether.notification.addAddressBook", {
                                                                                address: a.address
                                                                            }), 5E3, "addressbook", "completed")
                                                                        })
                                                                    }
                                                                    A.removeClass("save");
                                                                    u.removeClass("edit");
                                                                    await chrome.storage.local.set({
                                                                        tronApp: G
                                                                    });
                                                                    u.find(".changeable").each(function(M) {
                                                                        let X = $(this).find("span.book-data");
                                                                        switch (M) {
                                                                            case 0:
                                                                                X.html(`${""!=c?a.userName.replace(new RegExp(`(${c})`,"ig"),'<span class="highlight">$1</span>'):a.userName}`);
                                                                                C.runEvent(`addressNameChanged${a.address}`, a.userName);
                                                                                break;
                                                                            case 1:
                                                                                X.html(`${""!=c?a.address.replace(new RegExp(`(${c})`,"ig"),'<span class="highlight">$1</span>'):
a.address}`);
                                                                                break;
                                                                            case 2:
                                                                                X.html(`${""!=c?a.description.replace(new RegExp(`(${c})`,"ig"),'<span class="highlight">$1</span>'):a.description}`)
                                                                        }
                                                                    })
                                                                } else {
                                                                    if (B.target.closest(".editBg")) {
                                                                        A.addClass("save");
                                                                        u.addClass("edit");
                                                                        let M = this.tronWeb;
                                                                        u.find(".changeable").each(function(X) {
                                                                            let da = $(this),
                                                                                ha = da.find(".error-case .text"),
                                                                                ka = da.find("span.book-data"),
                                                                                ia = da.find("input.input-book-data");
                                                                            ia.val(ka.text());
                                                                            ia.removeClass("error");
                                                                            ia.on("input", () => {
                                                                                " " == ia.val() && ia.val("");
                                                                                ia.removeClass("error");
                                                                                switch (X) {
                                                                                    case 0:
                                                                                        try {
                                                                                            if (1 > ia.val().length) throw C.translation("tether.error.noEmpty");
                                                                                        } catch (T) {
                                                                                            return ha.html(T), ia.addClass("error")
                                                                                        }
                                                                                        ia.val(ia.val().substr(0, 20));
                                                                                        a.userName = ia.val();
                                                                                        break;
                                                                                    case 1:
                                                                                        try {
                                                                                            if (1 > ia.val().length) throw C.translation("tether.error.noEmpty");
                                                                                            if (!M.isAddress(ia.val())) throw C.translation("tether.error.invalidAddress");
                                                                                            if (ia.val() == C.configuration.tronApp.serviceAddress) throw C.translation("tether.error.sAddressExists");
                                                                                            let T = G.address.map(Na => Na.address),
                                                                                                ya = G.addressBook.map(Na =>
                                                                                                    Na.address);
                                                                                            if (a.address != ia.val() && T.includes(ia.val())) throw C.translation("tether.error.addressExists");
                                                                                            if (a.address != ia.val() && ya.includes(ia.val())) throw C.translation("tether.error.addressExistsBook");
                                                                                        } catch (T) {
                                                                                            return ha.html(T), ia.addClass("error")
                                                                                        }
                                                                                        a.address = ia.val();
                                                                                        break;
                                                                                    case 2:
                                                                                        try {
                                                                                            if (1 > ia.val().length) throw C.translation("tether.error.noEmpty");
                                                                                        } catch (T) {
                                                                                            return ha.html(T), ia.addClass("error")
                                                                                        }
                                                                                        ia.val(ia.val().substr(0, 30));
                                                                                        a.description = ia.val()
                                                                                }
                                                                            })
                                                                        })
                                                                    }
                                                                    if (B.target.closest(".trash")) {
                                                                        if (!r)
                                                                            if (await la(C.translation("tether.prompt.deleteAddresBookTitle"),
                                                                                    C.translation("tether.prompt.deleteAddresBook", {
                                                                                        address: a.address,
                                                                                        userName: a.userName
                                                                                    }), L())) {
                                                                                let M = a.address,
                                                                                    X = a.userName;
                                                                                C.runEvent(`addressNameChanged${a.address}`, "");
                                                                                a.address = null;
                                                                                G.addressBook = G.addressBook.filter(da => null != da.address);
                                                                                await chrome.storage.local.set({
                                                                                    tronApp: G
                                                                                });
                                                                                b(700).then(() => {
                                                                                    C.notification(C.translation("tether.notification.deleteAddressBookShort", {
                                                                                        userName: X
                                                                                    }), C.translation("tether.notification.deleteAddressBook", {
                                                                                        address: M
                                                                                    }), 5E3, "addressbook", "completed")
                                                                                })
                                                                            } else return;
                                                                        u.addClass("delete");
                                                                        setTimeout(() => {
                                                                            u.remove()
                                                                        }, 300)
                                                                    }
                                                                } else u.hasClass("isNew") || (u.removeClass("selected"), u.removeClass("edit"), u.find(".edit-buttom").removeClass("save"));
                                                                else {
                                                                    h.removeClass("selected");
                                                                    h.removeClass("edit");
                                                                    h.find(".edit-buttom").removeClass("save");
                                                                    h.each(function(M) {
                                                                        let X = $(this);
                                                                        X.hasClass("isNew") && (X.addClass("delete"), setTimeout(() => {
                                                                            X.remove()
                                                                        }, 300))
                                                                    });
                                                                    u.addClass("selected");
                                                                    D = l.scrollTop();
                                                                    B = 0 == u.index() ? u.position().top : u.position().top - 40;
                                                                    w = u.height();
                                                                    var y = l.height();
                                                                    0 > B && l.animate({
                                                                        scrollTop: D + B
                                                                    }, 300, "swing", null);
                                                                    B + 18 + w > y && l.animate({
                                                                        scrollTop: D + 18 + (w - (y - B))
                                                                    }, 300, "swing", null)
                                                                }
                                                            }
                                                        });
                                                        u.find(".changeable input").on("keydown", B => {
                                                            "Enter" == B.key && u.find(".action .save").trigger("mousedown")
                                                        });
                                                        r && (u.find(".icon.userAddress").trigger("mousedown"), A.trigger("mousedown"));
                                                        return u
                                                    },
                                                    q = async (a = "") => {
                                                        let c;
                                                        try {
                                                            c = new RegExp(a.toLowerCase())
                                                        } catch (u) {
                                                            d.val("");
                                                            d.trigger("input");
                                                            return
                                                        }
                                                        let r = G.addressBook.filter(u => c.test(u.userName.toLowerCase()) || c.test(u.address.toLowerCase()) ||
                                                            c.test(u.description.toLowerCase()));
                                                        l.html("");
                                                        for (let u = 0; u < r.length; u++) l.append(g(r[u], a));
                                                        e = $(`
                                        <div class="no-results-case">
                                                <div class="icon ${""==a?"folder_open_alt":"noAccounts"} no-accounts"></div>
                                                <div class="text">${""==a?this.translation("tether.empty"):this.translation("tether.findEmpty")}</div>
                                        </div>
                                    `);
                                                        l.append(e);
                                                        h = l.find(".iteam-address-case")
                                                    };
                                                m = $(m.currentTarget).find(".wrap-body");
                                                let p = $('\n                                    <div class="address-book-case">\n                                        <div class="find-address-wrap">\n                                            <div class="input-case">\n                                                <div class="icon find find-address" title="RegExp"></div>\n                                                <input type="text" name="find-address" />\n                                                <div class="icon addAddress add-Address"></div>\n                                            </div>\n                                        </div>\n                                        <div class="view-book-case"></div>\n                                    </div>\n                                '),
                                                    l = p.find(".view-book-case"),
                                                    f = p.find(".find-address-wrap .add-Address"),
                                                    d = p.find('.find-address-wrap input[name="find-address"]');
                                                d.on("input", () => {
                                                    " " != d.val() && "." != d.val() || d.val("");
                                                    q(d.val())
                                                });
                                                f.on("click", () => {
                                                    if (!(0 < l.find(".iteam-address-case.isNew").length)) {
                                                        var a = g();
                                                        a.addClass("delete");
                                                        setTimeout(() => {
                                                            a.removeClass("delete")
                                                        }, 100);
                                                        e.before(a);
                                                        h = l.find(".iteam-address-case");
                                                        l.animate({
                                                            scrollTop: l.height()
                                                        }, 300, "swing", null)
                                                    }
                                                });
                                                m.html(p);
                                                q()
                                            }
                                        }, {
                                            id: "lock",
                                            revealed: !1,
                                            mark: "tether.settings.lock",
                                            icon: "lock",
                                            func: async () => {
                                                await chrome.storage.session.set({
                                                    session: null
                                                });
                                                $a.html(await Sa());
                                                K.remove()
                                            }
                                        }];
                                        for (let m = 0; m < k.length; m++) {
                                            let h = k[m],
                                                e = $(`
                                    <div class="iteam-menu-case">
                                        <div class="wrap-head">
                                            <div class="icon ${h.icon}"></div>
                                            <div class="text">${this.translation(h.mark)}</div>
                                        </div>
                                        <div class="wrap-body ${h.id}">
                                        </div>
                                    </div>
                                `);
                                            h.revealed && e.find(".wrap-head").append('<div class="icon after angle_right"></div>');
                                            e.on("click", g => {
                                                if (null === g.target.closest(".wrap-body")) {
                                                    var q = $(g.currentTarget);
                                                    if (q.hasClass("unwrap") && null === g.target.closest(".wrap-body")) return q.removeClass("unwrap");
                                                    h.func(g);
                                                    t.removeClass("unwrap");
                                                    e.addClass("unwrap")
                                                }
                                            });
                                            n.append(e)
                                        }
                                        let t = n.find(".iteam-menu-case")
                                    };
                            this.on("addAddress", "walletPanel", async K => {
                                await b(1500);
                                this.notification(this.translation("completed.isAddAddress"),
                                    this.translation("completed.isAddAddressLong", {
                                        address: K
                                    }), 1E4, void 0, "completed")
                            });
                            this.on("deleteAddress", "walletPanel", async K => {
                                await b(1E3);
                                this.notification(this.translation("completed.isDeleteAddress"), this.translation("completed.isDeleteAddressLong", {
                                    address: K
                                }), 1E4, void 0, "completed")
                            });
                            this.on("connectMyTetherServer", "walletPanel", async K => {
                                Da.addClass("connect")
                            });
                            this.on("errorConnectMyTetherServer", "walletPanel", async () => {
                                Da.removeClass("connect");
                                this.notification(this.translation("errors.error"),
                                    this.translation("errors.noServerConnectMyTetherShort"), 5E3, "error", "error")
                            });
                            "undefined" == typeof G.addressBook && (G.addressBook = []);
                            let ab = [{
                                    userName: this.translation("tether.addressServis"),
                                    address: this.configuration.tronApp.serviceAddress
                                }].concat(G.address.map(K => ({
                                    userName: K.userName,
                                    address: K.address
                                })).concat(G.addressBook.map(K => ({
                                    userName: K.userName,
                                    address: K.address
                                })))),
                                U = $(` 
                            <div class="wallet-panel-case">
                                <div class="head-panel-case">
                                    <div class="net-info-case pulse">
                                        <div class="icon net icon-dynamic-case">
                                            <div class="icon pulse"></div>
                                        </div>
                                        <div class="net-text">${this.translation("tether.netName")}</div>
                                    </div>
                                    <div class="selected-wallet-wrap">
                                        <div class="selected-wallet-case">
                                            <div class="wrap-selected"></div>
                                            <div class="icon choice"></div>
                                            <div class="addres-list-case"> 
                                                <div class="head-wrap">
                                                    <div class="title">${this.translation("tether.selectAccount")}</div>
                                                    <div class="icon button-close"></div>
                                                </div>
                                                <div class="find-address-wrap">
                                                    <div class="icon find"></div>
                                                    <input name="findAddress" type="text" placeholder="${this.translation("action.findAccaunt")}"/>
                                                    <div class="icon input-reset"></div>
                                                </div>
                                                <div class="user-address-list"> </div> 
                                            </div>
                                        </div>
                                    </div>

                                    <div class="icon-settings-wrap">
                                        <div class="icon settings"></div>
                                    </div> 
                                </div>
                                <div class="body-panel-case">
                                    <div class="coin-list-wrap">
                                        
                                    </div>
                                    <div class="coin-history-wrap">
                                        
                                    </div>
                                </div>
                            </div>
                        `),
                                Da = U.find(".head-panel-case .icon.pulse"),
                                ua = U.find(".addres-list-case .head-wrap .button-close"),
                                Pa = U.find(".selected-wallet-case"),
                                Ua = U.find(".selected-wallet-case .icon.choice"),
                                Ma = U.find(".selected-wallet-case .addres-list-case"),
                                wa = U.find(".selected-wallet-case .addres-list-case .user-address-list"),
                                Za = U.find(".selected-wallet-case .wrap-selected"),
                                Fa = $(`
                            <div class="add-address-case">
                                <div class="add-address-button">${this.translation("tether.addAddress")}</div>
                            </div>
                        `),
                                cb = Fa.find(".add-address-button"),
                                bb = U.find('input[name="findAddress"]'),
                                Va = U.find(".addres-list-case .find-address-wrap .input-reset"),
                                gb = U.find(".body-panel-case"),
                                kb = U.find(".body-panel-case .coin-list-wrap"),
                                mb = U.find(".body-panel-case .coin-history-wrap"),
                                pb = U.find(".head-panel-case .icon-settings-wrap .icon.settings");
                            Ma.append(Fa);
                            await N(G.selectedAddress);
                            Va.on("click", () => {
                                bb.val("");
                                bb.trigger("input")
                            });
                            bb.on("input", K => {
                                V(bb.val())
                            });
                            cb.on("click", () => {
                                ua.trigger("click");
                                ra()
                            });
                            Ua.on("click", () => {
                                bb.val("");
                                V();
                                Pa.addClass("unveiled");
                                gb.addClass("blur")
                            });
                            ua.on("click", () => {
                                Pa.removeClass("unveiled");
                                gb.removeClass("blur")
                            });
                            pb.on("click", () => {
                                Ka()
                            });
                            this.on("documentClick", "walletPanel", K => {
                                0 < $(K.target).closest(".unveiled").length || 0 < $(K.target).closest(".wrap-min-popup-case").length || 0 < $(K.target).closest(".wrap-prompt-case").length || (Pa.removeClass("unveiled"), gb.removeClass("blur"))
                            });
                            return U
                        }, G = this.storage.tronApp, Ha = (await chrome.storage.session.get("session")).session;
                        G.password ? void 0 != Ha && Ha ? ca.html(await xa()) : ca.html(await Ea()) : ca.html(await sa());
                        return ca
                    }, Ya = async () => {
                        let Ba = $('\n                        <div class="pages-manual-view">\n\n                        </div>    \n                    '),
                            ca = $('\n                        <div class="live-screenshot"> \n                            <svg class="cursor" fill="#fff"  version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000" xml:space="preserve">\n                                <g stroke="#000000" stroke-width="5">\n                                    <path class="right-mouse" d="M768.1,226.1C768.1,101.3,666.899,0,542,0h-22.4v282.6h248.5V226.1z"/>\n                                    <path d="M196.1,738.1c0,124.801,101.2,226.1,226.1,226.1h119.9c124.8,0,226-101.299,226-226.1V357.6h-572V738.1z"/>\n                                    <path class="left-mouse" d="M422.199,0C297.3,0,196.1,101.3,196.1,226.1v56.5h248.5V0H422.199z"/>\n                                </g>\n                            </svg>\n                            <div class="curtain"></div>\n                        </div>\n                    '),
                            sa = $(`
                        <div class="iteam-strategy-case" status="stoped" >
                            <div class="status icon"></div>
                            <div class="glow-run"></div>
                            <img class="logo" src="../img/strategyIcon/thumbnail.svg"/> 
                            <div class="name"></div> 
                            <input class="nameIdit" name="nameIdit" type="text"/>
                            <div class="control-case">
                                <span class="switch-status off hoverUnderline">${this.translation("action.off")}</span>
                                <span class="control icon" action="penetrationLevel_on"> </span>
                                <span class="switch-status on hoverUnderline">${this.translation("action.on")}</span>
                            </div>
                            <div class="context-menu-case" style="top:18px; left:-1000px; opacity: 0;">
                                <div class="iteam-strategy-name-case"></div>
                                <div class="iteam-context-case">
                                    <div class="icon editSetings"></div>
                                    <div class="context-title">${this.translation("strategy.context.editSetings")}</div>
                                </div>
                                <div class="iteam-context-case" action="on">
                                    <div class="icon run"></div>
                                    <div class="context-title">${this.translation("strategy.context.run")}</div>
                                </div>
                                <div class="iteam-context-case">
                                    <div class="icon edit"></div>
                                    <div class="context-title">${this.translation("strategy.context.edit")}</div>
                                </div>
                                <div class="iteam-context-case">
                                    <div class="icon basket"></div>
                                    <div class="context-title">${this.translation("strategy.context.basket")}</div>
                                </div>
                                <div class="iteam-context-case">
                                    <div class="icon createCopy"></div>
                                    <div class="context-title">${this.translation("strategy.context.createCopy")}</div>
                                </div>
                                <div class="iteam-context-case">
                                    <div class="icon logbook"></div>
                                    <div class="context-title">${this.translation("strategy.context.logbook")}</div>
                                </div>
                            </div>
                        </div>
                    `),
                            Ea = $(`
                        <div class="wrap-newstrategy-case">
                            <div class="button-newstr-case">
                                <div class="icon add"></div>
                                <div class="title">${this.translation("strategy.name.create")}</div>
                            </div>
                        </div>
                    `),
                            za = $(`
                        <div class="settings-group-case selected" category="assetCat">
                            <div class="setting-group-head-case">
                                <div class="icon setting-group"></div>
                                <div class="title">${this.translation("strategy.settingsGroup.assetCat.description")}</div>
                            </div>
                            <div class="setting-group-body-case">
                                <div class="assets-selection-case">
                                <div class="wrap-group">
                                    <div class="group-assets-case">
                                    <div class="iteam-group-case selected" groupid="selected">
                                        <div class="icon selected"></div>
                                        <div class="group-name">${this.translation("assetGroups.selected")}</div>
                                    </div>
                                    <div class="iteam-group-case stock" groupid="stock">
                                        <div class="icon stock"></div>
                                        <div class="group-name">${this.translation("assetGroups.stock")}</div>
                                    </div>
                                    <div class="iteam-group-case index" groupid="index">
                                        <div class="icon index"></div>
                                        <div class="group-name">${this.translation("assetGroups.index")}</div>
                                    </div>
                                    <div class="iteam-group-case cryptocurrency" groupid="cryptocurrency">
                                        <div class="icon cryptocurrency"></div>
                                        <div class="group-name">${this.translation("assetGroups.cryptocurrency")}</div>
                                    </div>
                                    <div class="iteam-group-case currency activ" groupid="currency">
                                        <div class="icon currency"></div>
                                        <div class="group-name">${this.translation("assetGroups.currency")}</div>
                                    </div>
                                    <div class="iteam-group-case commodity " groupid="commodity">
                                        <div class="icon commodity"></div>
                                        <div class="group-name">${this.translation("assetGroups.commodity")}</div>
                                    </div>
                                    </div>
                                </div>
                                <div class="view-group-assets">
                                    <div class="search-asset-case">
                                    <div class="input-reset icon"></div>
                                    <input type="text" name="searchAsset" placeholder="${this.translation("action.find")}">
                                    </div>
                                    <div class="wrap-search">
                                    <div class="search-result-asset-case show" style="height: 216px;">
                                        
                                        
                                    </div>
                                    </div>
                                    <div class="control-buttons">
                                    <div class="link-button hoverUnderline" action="selectall">${this.translation("action.selectall")}</div>
                                    </div>
                                </div>
                                </div>
                            </div>
                            </div>
                    
                    `),
                            xa = $(`
                        <div class="settings-group-case selected" category="indicators">
                            <div class="setting-group-head-case">
                                <div class="icon setting-group"></div>
                                <div class="title">${this.translation("strategy.settingsGroup.indicators.description")}</div>
                            </div>
                            <div class="setting-group-body-case">
                                <div class="indicators-selection-case">
                                    <div class="available-indicators-case"> </div>
                                    <div class="view-indicators-case" style="height: 290px;">
                                        <ul class="used-indicators-list ui-sortable"> </ul>
                                        <div class="empty-indicators-list">
                                            <div class="icon info"></div>
                                            <div class="description">${this.translation("indicators.any.emptyIndicators")}</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                    `),
                            G = $(`
                        <div class="settings-group-case selected" category="regulations">
                            <div class="setting-group-head-case">
                                <div class="icon setting-group"></div>
                                <div class="title">${this.translation("strategy.settingsGroup.regulations.description")}</div>
                            </div>
                            <div class="setting-group-body-case"> 
                                <div class="regulations-selection-case">
                                    <div class="wrap-regulations-list">
                                        
                                    </div>
                                </div>
                            </div>
                        </div>
                    `),
                            Ha = $(`
                        <div class="settings-group-case selected" category="martingale">
                            <div class="setting-group-head-case">
                                <div class="icon setting-group"></div>
                                <div class="title">${this.translation("strategy.settingsGroup.martingale.description")}</div> 
                            </div>
                            <div class="setting-group-body-case">
                                <div class="martingale-selection-case" style="height: 280px;">
                                    <ul class="step-martingale-list ui-sortable"></ul>
                                    <div class="empty-martingale-list show">
                                        <div class="icon info"></div>
                                        <div class="description">
                                            ${this.translation("martingale.any.emptyMartingale")}
                                        </div>
                                    </div>
                                    <div class="add-iteam-martingale">
                                        <div class="button">
                                            <div class="icon addMartin"></div>
                                            <div class="title">${this.translation("martingale.addStep")}</div> 
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `),
                            ta = $(`
                        <div class="wallet-panel-case">
                            <div class="head-panel-case">
                                <div class="net-info-case pulse">
                                    <div class="icon net icon-dynamic-case">
                                        <div class="icon pulse connect"></div>
                                    </div>
                                    <div class="net-text">TRON(TRC20)</div>
                                </div>
                                <div class="selected-wallet-wrap">
                                    <div class="selected-wallet-case">
                                        <div class="wrap-selected">
                                            <div class="icon myTron selectedAddress"></div>
                                            <div class="wallet-name-wrap">
                                                <div class="name">my USDT</div>
                                                <div class="address myTron">TCB2hq.....yW2Tx</div>
                                            </div>
                                        </div>
                                        <div class="icon choice"></div>
                                        <div class="addres-list-case">
                                            <div class="head-wrap">
                                                <div class="title">${this.translation("tether.selectAccount")}</div>
                                                <div class="icon button-close"></div>
                                            </div>
                                            <div class="find-address-wrap">
                                                <div class="icon find"></div>
                                                <input name="findAddress" type="text" placeholder="${this.translation("action.findAccaunt")}">
                                                <div class="icon input-reset"></div>
                                            </div>
                                            <div class="user-address-list"> </div>
                                            <div class="add-address-case">
                                                <div class="add-address-button">${this.translation("tether.addAddress")}</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="icon-settings-wrap">
                                    <div class="icon settings"></div>
                                </div>
                            </div>
                            <div class="body-panel-case">
                                <div class="coin-list-wrap">
                                    <div class="wrap-list"> 
                                        <div class="optional-action-buttons-case">

                                            <div class="button-case">
                                                <div class="icon exchange"></div>
                                                <div class="button-text">${this.translation("tether.exchange")}</div>
                                            </div>
                                        </div>
                                        <div class="table-wrap">
                                            <div class="img-bg-case">
                                                <img src="../img/svg/netTron.svg">
                                            </div>
                                            <table class="coin-list-table">
                                                 
                                                <tbody>
                                                    <tr>
                                                        <td class="coin">
                                                            <div class="coin-case">
                                                                <img class="icon" src="../img/coin/usdf.svg">
                                                                <div class="text-name">TFC</div>
                                                            </div>
                                                        </td>
                                                        <td>Feecoin( TRC10 )</td>
                                                        <td class="balanse">
                                                            <div class="balance-case">
                                                                <div class="loading-case">
                                                                    <img src="../img/svg/loading_3.svg">
                                                                </div>
                                                                <div class="text-value-case">
                                                                    <div class="value">0</div>
                                                                    <div class="value-usd">\u2248 $0</div>
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td class="action">
                                                            <div class="action-buttons-case">
                                                                <div class="action-button update icon"></div>
                                                                <div class="action-button get">${this.translation("action.get")}</div>
                                                                <div class="action-button send">${this.translation("action.send")}</div>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td class="coin">
                                                            <div class="coin-case">
                                                                <img class="icon" src="../img/coin/usdt.svg">
                                                                <div class="text-name">USDT</div>
                                                            </div>
                                                        </td>
                                                        <td>Tether( TRC20 )</td>
                                                        <td class="balanse">
                                                            <div class="balance-case">
                                                                <div class="loading-case">
                                                                    <img src="../img/svg/loading_3.svg">
                                                                </div>
                                                                <div class="text-value-case">
                                                                    <div class="value">0</div>
                                                                    <div class="value-usd">\u2248 $0</div>
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td class="action">
                                                            <div class="action-buttons-case">
                                                                <div class="action-button update icon"></div>
                                                                <div class="action-button get">${this.translation("action.get")}</div>
                                                                <div class="action-button send">${this.translation("action.send")}</div>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                                
                            </div>
                        </div>
                    `),
                            ba = F => {
                                let R = (v, n) => {
                                        try {
                                            return +v.toFixed(n.toString().split(".")[1].length)
                                        } catch (k) {
                                            return v.toFixed(0)
                                        }
                                    },
                                    W = (v, n = !1) => {
                                        n && (v = JSON.parse(JSON.stringify(v)));
                                        "undefined" == typeof v.tempID && (v.tempID = L());
                                        let k = $(`<li class="iteam-indicator-case" name="${v.id}" tempID="${v.tempID}"></li>`);
                                        n && (k.addClass("new"), setTimeout(() => {
                                            k.removeClass("new")
                                        }, 500));
                                        k.append(`
                                <div class="data-indicator-case">
                                    <div class="iteam-data icon iteamIndicator"></div>
                                    <div class="iteam-data indicator-name">
                                        ${this.translation(`indicators.names.${v.id}`)} <span>(${this.translation("indicators.any.main")})</span>
                                    </div>
                                    <div class="iteam-data stretch"> </div>
                                    <div class="iteam-data action">
                                        <div class="icon unwrap"></div>
                                        <div class="icon delete"></div>
                                    </div>
                                </div>
                            `);
                                        n = $('<div class="indicator-settings-case"></div>');
                                        let t = $('<div class="descriptionConditionsCase"></div>');
                                        for (let h = 0; h < v.settings.length; h++) {
                                            let e = v.settings[h],
                                                g = $(`
                                    <div class="iteam-settings" name="${e.id}">
                                        <div class="title-settings">${this.translation(`indicators.settings.${e.id}`)}</div>
                                        <div class="stretch"></div>
                                        <div class="custom-input-select" type="${e.type}"> </div>
                                    </div>
                                `);
                                            "undefined" == typeof e.value && (e.value = e.values[0]);
                                            switch (e.type) {
                                                case "inputNotEditable":
                                                    var m = $(`
                                            <div class="icon copy">
                                                <div class="isCopied icon sort_down hide">${this.translation("action.isCopiedLow")}</div>
                                            </div>
                                        `);
                                                    m.find(".isCopied");
                                                    e.value = v.tempID;
                                                    g.find(".custom-input-select").append(`
                                            <div class="select-case">
                                                <div class="value">${e.value}</div> 
                                                 
                                            </div>
                                        `);
                                                    g.find(".custom-input-select .select-case").append(m);
                                                    break;
                                                case "select":
                                                    g.find(".custom-input-select").append(`
                                            <div class="select-case">
                                                <div class="value">${this.translation(`indicators.settingsValues.${e.value}.short`)}</div> 
                                                <div class="icon selectwrap"></div>
                                            </div>
                                        `);
                                                    m = $('<div class="option-case"></div>');
                                                    for (let q = 0; q < e.values.length; q++) {
                                                        let p = e.values[q];
                                                        m.append(`
                                                <div class="option" value="${p}" >${this.translation(`indicators.settingsValues.${p}.short`)}</div>
                                            `);
                                                        "signalDown" == e.id && t.append(`<div class="${this.translation(`indicators.settingsValues.${p}.short`)}">${this.translation(`indicators.settingsValues.${p}.long`)}</div>`)
                                                    }
                                                    g.find(".custom-input-select").append(m);
                                                    break;
                                                case "number":
                                                    g.find(".custom-input-select").append('<button action="-"></button>'), g.find(".custom-input-select").append(`<input type="text" value="${e.value}" parms="${JSON.stringify(e.values)}" />`), g.find(".custom-input-select").append('<button action="+"></button>')
                                            }
                                            n.append(g);
                                            n.append(t);
                                            "api" == v.id && t.addClass("hide")
                                        }
                                        k.append(n);
                                        return k
                                    },
                                    x = this.tutorialData.history,
                                    S = this.tutorialData.logbook,
                                    aa = (v, n, k, t = this.translation("prompt.button.ok")) => {
                                        if (0 < $(`.live-screenshot .wrap-min-popup-live-case .min-popup-case#${k}`).length) return !1;
                                        let m = $(`
                                <div class="wrap-min-popup-live-case">
                                    <div class="min-popup-case" id="${k}">
                                        <div class="head-case"> 
                                            <div class="title">${v}</div>
                                        </div>
                                        <div class="content-case"></div>
                                        <div class="button-case">
                                        </div>
                                    </div>
                                </div>
                            `);
                                        v = $('<div class="button-close icon"></div>');
                                        t = $(`<button class="ok">${t}</button>`);
                                        t.on("click", h => {
                                            m.find(".min-popup-case").removeClass("show");
                                            setTimeout(() => {
                                                m.remove()
                                            }, 100)
                                        });
                                        v.on("click", h => {
                                            m.find(".min-popup-case").removeClass("show");
                                            setTimeout(() => {
                                                m.remove()
                                            }, 100)
                                        });
                                        m.find(".head-case").append(v);
                                        m.find(".content-case").append(n);
                                        m.find(".button-case").append(t);
                                        $(".live-screenshot").append(m);
                                        setTimeout(() => {
                                                m.find(".min-popup-case").addClass("show")
                                            },
                                            100);
                                        return m
                                    },
                                    N = () => {
                                        var v;
                                        let n = this.storage.platform,
                                            k = {
                                                sataus: !1
                                            },
                                            t = async (C = 0, D = !0) => {
                                                let w, y, M, X = async (T, ya) => {
                                                    let Na = $('\n                                        <div class="main-deal-case">\n                                            <div class="tab-case"></div>\n                                            <div class="view-case"></div>\n                                        </div>\n                                    ');
                                                    var Ta = "uid isDemo strategy mstep id asset percentProfit command amount openTimestamp closeTimestamp openPrice closePrice profit session requestId".split(" "),
                                                        Qa = $(`
                                            <div class="iteam-tab-case selected">
                                                <div class="icon details"></div>
                                                <div class="value">${this.translation("dataDeal.details")}</div>
                                            </div>
                                        `),
                                                        Oa = $('<div class="view-deal-list-case view-tabs"></div>');
                                                    for (let lb = 0; lb < Ta.length; lb++) {
                                                        var ea = Ta[lb];
                                                        if ("undefined" != typeof T[ea]) switch (ea) {
                                                            case "command":
                                                                Oa.append(`
                                                    <div class="iteam-data-deal">
                                                        <div class="data-name">${this.translation("dataDeal.command")}</div>
                                                        <div class="data-value">${0==T.command?this.translation("dataDeal.up"):this.translation("dataDeal.down")}</div>
                                                    </div>
                                                `);
                                                                break;
                                                            case "amount":
                                                                Oa.append(`
                                                    <div class="iteam-data-deal">
                                                        <div class="data-name">${this.translation(`dataDeal.${ea}`)}</div>
                                                        <div class="data-value">${T[ea]} ${T.account\u0421urrency}</div>
                                                    </div>
                                                `);
                                                                break;
                                                            case "profit":
                                                                if (!T.isClosed) break;
                                                                Oa.append(`
                                                    <div class="iteam-data-deal">
                                                        <div class="data-name">${this.translation(`dataDeal.${ea}`)}</div>
                                                        <div class="data-value">${T[ea]} ${T.account\u0421urrency}</div>
                                                    </div>
                                                `);
                                                                break;
                                                            case "percentProfit":
                                                                Oa.append(`
                                                    <div class="iteam-data-deal">
                                                        <div class="data-name">${this.translation("dataDeal.percentProfit")}</div>
                                                        <div class="data-value">${T.percentProfit||""} %</div>
                                                    </div>
                                                `);
                                                                break;
                                                            case "strategy":
                                                                Oa.append(`
                                                    <div class="iteam-data-deal">
                                                        <div class="data-name">${this.translation("dataDeal.strategy")}</div>
                                                        <div class="data-value">${void 0==g.title[T.strategy]?T.altStrategyName:g.title[T.strategy]}</div>
                                                    </div> 
                                                `);
                                                                break;
                                                            case "isDemo":
                                                                Oa.append(`
                                                    <div class="iteam-data-deal">
                                                        <div class="data-name">${this.translation("dataDeal.accauntType")}</div>
                                                        <div class="data-value">${T.isDemo?this.translation("dataDeal.demo"):this.translation("dataDeal.real")}</div>
                                                    </div>    
                                                `);
                                                                break;
                                                            case "closeTimestamp":
                                                                if (!T.isClosed) break;
                                                                Oa.append(`
                                                    <div class="iteam-data-deal">
                                                        <div class="data-name">${this.translation(`dataDeal.${ea}`)}</div>
                                                        <div class="data-value">${moment(1E3*T[ea]).format("DD.MM.YYYY HH:mm:ss")}</div>
                                                    </div>
                                                `);
                                                                break;
                                                            case "openTimestamp":
                                                                Oa.append(`
                                                    <div class="iteam-data-deal">
                                                        <div class="data-name">${this.translation(`dataDeal.${ea}`)}</div>
                                                        <div class="data-value">${moment(1E3*T[ea]).format("DD.MM.YYYY HH:mm:ss")}</div>
                                                    </div>
                                                `);
                                                                break;
                                                            case "openMs":
                                                                Oa.append(`
                                                    <div class="iteam-data-deal">
                                                        <div class="data-name">${this.translation(`dataDeal.${ea}`)}</div>
                                                        <div class="data-value">${T[ea]} ${this.translation("time.ms")}</div>
                                                    </div>
                                                `);
                                                                break;
                                                            case "closeMs":
                                                                Oa.append(`
                                                    <div class="iteam-data-deal">
                                                        <div class="data-name">${this.translation(`dataDeal.${ea}`)}</div>
                                                        <div class="data-value">${T[ea]} ${this.translation("time.ms")}</div>
                                                    </div>
                                                `);
                                                                break;
                                                            case "closePrice":
                                                                if (!T.isClosed) break;
                                                                Oa.append(`
                                                    <div class="iteam-data-deal">
                                                        <div class="data-name">${this.translation(`dataDeal.${ea}`)}</div>
                                                        <div class="data-value">${T[ea]}</div>
                                                    </div>
                                                `);
                                                                break;
                                                            case "session":
                                                                (() => {
                                                                    let qb = $('<div class="iteam-data-deal"> </div>'),
                                                                        ub = $(`<div class="button-open-logs-book">${this.translation("action.openInLogsBook")}</div>`);
                                                                    qb.append(ub);
                                                                    ub.on("click", async () => {
                                                                        $("body").addClass("wait");
                                                                        await H(T.strategy, e, T.requestId);
                                                                        $("body").removeClass("wait")
                                                                    });
                                                                    Oa.append(qb)
                                                                })();
                                                                break;
                                                            case "mstep":
                                                                var Ga = $(`
                                                    <div class="iteam-data-deal">
                                                        <div class="data-name">${this.translation(`dataDeal.${ea}`)}</div>
                                                    </div>
                                                `),
                                                                    pa = $(`<div class="data-value"><div class="link">${T[ea]}</div> </div>`);
                                                                pa.on("click", async () => {
                                                                    let qb = d.martinSeries.find(ub => ub.find(yb => yb.requestId == T.requestId));
                                                                    da(qb, T.requestId)
                                                                });
                                                                ea = $(`<div class="data-value">${T[ea]}</div>`);
                                                                Ga.append(ya ? ea : pa);
                                                                Oa.append(Ga);
                                                                break;
                                                            case "requestId":
                                                                let xb = d.martinSeries.find(qb => qb.find(ub => ub.requestId == T.requestId));
                                                                if (2 > xb.length || ya) break;
                                                                Ga = $('<div class="iteam-data-deal"> </div>');
                                                                pa = $(`<div class="button-open-martin-series">${this.translation("action.openMartinSeries")}</div>`);
                                                                pa.on("click", async () => {
                                                                    await da(xb, T.requestId)
                                                                });
                                                                Ga.append(pa);
                                                                Oa.append(Ga);
                                                                break;
                                                            default:
                                                                Oa.append(`
                                                    <div class="iteam-data-deal">
                                                        <div class="data-name">${this.translation(`dataDeal.${ea}`)}</div>
                                                        <div class="data-value">${T[ea]}</div>
                                                    </div>
                                                `)
                                                        }
                                                    }
                                                    var Ja = $(`
                                            <div class="iteam-tab-case">
                                                <div class="icon comments"></div>
                                                <div class="value">${this.translation("dataDeal.comments")}</div>
                                            </div>
                                        `),
                                                        hb = $('<div class="view-comments-list-case view-tabs"> </div> ');
                                                    for (ya = 0; ya < T.comments.length; ya++) {
                                                        let lb = T.comments[ya];
                                                        Ta = $(`
                                            <div class="iteam-data-comment">
                                                <div class="comment-time-case">
                                                    <div class="icon calendar"></div>
                                                    <div class="time-value">${moment(1E3*lb.date).format("DD.MM.YYYY HH:mm:ss")}</div>
                                                </div>
                                                <div class="comment-case"> </div>
                                            </div>
                                        
                                        `);
                                                        Ta.find(".comment-case").append(lb.mark.map(xb => this.translation(xb, lb.parms)));
                                                        hb.append(Ta)
                                                    }
                                                    Na.find(".tab-case").append(Qa);
                                                    Na.find(".view-case").append(Oa);
                                                    Na.find(".tab-case").append(Ja);
                                                    Na.find(".view-case").append(hb);
                                                    Qa.on("click", lb => {
                                                        Na.find(".tab-case .iteam-tab-case").removeClass("selected");
                                                        Na.find(".view-tabs").removeClass("selected");
                                                        Qa.addClass("selected");
                                                        Oa.addClass("selected")
                                                    });
                                                    Ja.on("click", lb => {
                                                        Na.find(".tab-case .iteam-tab-case").removeClass("selected");
                                                        Na.find(".view-tabs").removeClass("selected");
                                                        Ja.addClass("selected");
                                                        hb.addClass("selected")
                                                    });
                                                    Qa.click();
                                                    setTimeout(() => {
                                                        Na.css({
                                                            "min-height": `${Na.height()}px`
                                                        });
                                                        Na.find(".view-case").css({
                                                            height: `${Na.find(".view-case").height()+9}px`
                                                        });
                                                        Na.find(".view-case").css({
                                                            width: `${Na.find(".view-case").width()+9}px`
                                                        })
                                                    }, 200);
                                                    aa(this.translation("dataDeal.dealInfo"), Na, "deal")
                                                }, da = async (T, ya = null) => {
                                                    let Na = T[0];
                                                    var Ta = "id strategy openTimestamp profit countSteps session".split(" ");
                                                    let Qa = $(' <div class="main-martin-series-case"> </div> '),
                                                        Oa = $('<div class="general-information-list"></div>');
                                                    for (var ea = 0; ea < Ta.length; ea++) {
                                                        let pa;
                                                        switch (Ta[ea]) {
                                                            case "id":
                                                                pa = $(`
                                                    <div class="information-iteam-case">
                                                        <div class="iteam-title">${this.translation("dataDeal.mid")}</div>
                                                        <div class="iteam-value">${Na.id}</div>
                                                    </div>
                                                `);
                                                                break;
                                                            case "strategy":
                                                                pa = $(`
                                                    <div class="information-iteam-case">
                                                        <div class="iteam-title">${this.translation("dataDeal.strategy")}</div>
                                                        <div class="iteam-value">${void 0==g.title[Na.strategy]?Na.altStrategyName:g.title[Na.strategy]}</div>
                                                    </div>
                                                `);
                                                                break;
                                                            case "openTimestamp":
                                                                pa = $(`
                                                    <div class="information-iteam-case">
                                                        <div class="iteam-title">${this.translation("dataDeal.openTimestamp")}</div>
                                                        <div class="iteam-value">${moment(1E3*Na.openTimestamp).format("DD.MM.YYYY HH:mm:ss")}</div>
                                                    </div>
                                                `);
                                                                break;
                                                            case "profit":
                                                                var Ga = T.reduce((Ja, hb) => Ja + hb.profit, 0);
                                                                pa = $(`
                                                    <div class="information-iteam-case">
                                                        <div class="iteam-title">${this.translation("dataDeal.profit")}</div>
                                                        <div class="iteam-value">${Ga.toFixed(2)} ${Na.account\u0421urrency}</div>
                                                    </div>
                                                `);
                                                                break;
                                                            case "countSteps":
                                                                pa = $(`
                                                    <div class="information-iteam-case">
                                                        <div class="iteam-title">${this.translation("history.countSteps")}:</div>
                                                        <div class="iteam-value">${T.reduce((Ja,hb)=>hb.mstep>Ja?hb.mstep:Ja,0)}</div>
                                                    </div>
                                                `);
                                                                break;
                                                            case "session":
                                                                (() => {
                                                                    pa = $('<div class="information-iteam-case"></div>');
                                                                    let Ja = $(`<div class="button-open-logs-book">${this.translation("action.openInLogsBook")}</div>`);
                                                                    pa.append(Ja);
                                                                    Ja.on("click", () => {
                                                                        H(Na.strategy, e, Na.tsID)
                                                                    })
                                                                })()
                                                        }
                                                        Oa.append(pa)
                                                    }
                                                    Ta = $(`
                                        <div class="wrap-deal-list">
                                            <table>
                                                <thead>
                                                    <tr>
                                                        <th></th>
                                                        <th>${this.translation("history.step")}</th>
                                                        <th>${this.translation("history.asset")}</th>
                                                        <th>${this.translation("history.amount")}</th>
                                                        <th>${this.translation("history.openTime")}</th>
                                                        <th>${this.translation("history.state")}</th>
                                                        <th>${this.translation("history.profit")}</th> 
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                </tbody>
                                            </table>
                                            
                                        </div>
                                    `);
                                                    ea = Ta.find("tbody");
                                                    for (Ga = 0; Ga < T.length; Ga++) {
                                                        let pa = T[Ga],
                                                            Ja = $(`
                                            <tr ${pa.requestId==ya?'class="no-activ"':""}>
                                                <td><div class="icon ${0==pa.command?"dealup":"dealdown"}"></div></td>  
                                                <td>${pa.mstep||" "}</td>
                                                <td>${pa.asset}</td>
                                                <td>${pa.amount} $</td>
                                                <td>${moment(1E3*pa.openTimestamp).format("DD.MM.YYYY HH:mm:ss")}</td>
                                                <td>${this.translation(`dealState.${pa.state}`)}</td>
                                                <td class="profit ${0<pa.profit?"win":"loose"}">${pa.isClosed?`${pa.account\u0421urrency} ${pa.profit.toFixed(2)} (${pa.percentProfit}%)`:"-"}</td> 
                                            </tr>
                                        `);
                                                        ea.append(Ja);
                                                        Ja.on("click", async hb => {
                                                            $("body").addClass("wait");
                                                            await X(pa, "martinSeries");
                                                            $("body").removeClass("wait")
                                                        })
                                                    }
                                                    Qa.append(Oa);
                                                    Qa.append(Ta);
                                                    aa(this.translation("dataDeal.martinSeriesInfo"), Qa, "mg")
                                                };
                                                D && (r.addClass("hide"), await b(100), setTimeout(() => {
                                                    r.removeClass("hide")
                                                }, 10));
                                                var ha = r.height();
                                                switch (p.group) {
                                                    case "deals":
                                                        var ka = d.deals.filter(T => T.openTimestamp < p.date.from || T.openTimestamp > p.date.to || !T.isDemo && "demo" == p.accountType || T.isDemo &&
                                                            "real" == p.accountType || "all" != p.strategyName && p.strategyName != T.strategy ? !1 : !0);
                                                        v = ka.length;
                                                        h = Math.round((ha - 60) / 30);
                                                        C *= h;
                                                        w = $('<table class="table-view-history-case"></table>');
                                                        y = $(`
                                            <thead>
                                                <tr>
                                                    <th></th> 
                                                    <th>${this.translation("history.strategy")}</th>
                                                    <th>${this.translation("history.expiration")}</th>
                                                    <th>${this.translation("history.asset")}</th>
                                                    <th>${this.translation("history.openTime")}</th>
                                                    <th>${this.translation("history.amount")}</th>
                                                    <th>${this.translation("history.state")}</th>
                                                    <th>${this.translation("history.profit")}</th>
                                                </tr>
                                            </thead>
                                        `);
                                                        M = $(`
                                            <tbody class="nothingWasFound">
                                                <tr>
                                                    <td colspan="${y.find("th").length}">${this.translation("history.nothingWasFound")}</td>
                                                </tr>     
                                            </tbody>
                                        `);
                                                        for (ha = 0; ha < h; ha++, C++) {
                                                            if (void 0 == ka[C]) continue;
                                                            let T = ka[C];
                                                            M.hasClass("nothingWasFound") && (M = $("<tbody></tbody>"));
                                                            let ya = $(`
                                                <tr class = "${T.addOnline&&!D?"add-online":""}${T.updateOnline&&!D?" update":""}">
                                                    <td><div class="icon ${0==T.command?"dealup":"dealdown"}"></div></td>
                                                    <td ${void 0==g.title[T.strategy]?`title="${this.translation("history.remoteStrategy")}"`:""}  class="${void 0==g.title[T.strategy]?"remote-strategy":""}">${void 0==g.title[T.strategy]?T.altStrategyName:g.title[T.strategy]}</td>
                                                    <td>S${T.time||"--"}</td>
                                                    <td class="td-asset"><div>${T.asset}</td>
                                                    <td>${moment(1E3*T.openTimestamp).format("DD.MM.YYYY HH:mm:ss")}</td>
                                                    <td>${T.amount} $</td>
                                                    <td>${this.translation(`dealState.${T.state}`)} </td>
                                                    <td><span class="${0<T.profit?"profit":"loss"}">${T.isClosed?`$${T.profit}`:"-"}</span>${T.isClosed?`<span>(${T.percentProfit}%)</span>`:""}</td>
                                                </tr>
                                            `);
                                                            M.append(ya);
                                                            setTimeout(() => {
                                                                ya.hasClass("add-online") && ya.removeClass("add-online");
                                                                ya.hasClass("update") && ya.removeClass("update");
                                                                delete T.addOnline;
                                                                delete T.updateOnline
                                                            }, 300);
                                                            ya.on("click", async Na => {
                                                                $("body").addClass("wait");
                                                                await X(T);
                                                                $("body").removeClass("wait")
                                                            })
                                                        }
                                                        break;
                                                    case "martinSeries":
                                                        for (ka = d.martinSeries.filter(T => {
                                                                let ya = T[0];
                                                                return 1 == T.length || ya.openTimestamp < p.date.from || ya.openTimestamp > p.date.to || !ya.isDemo && "demo" == p.accountType ||
                                                                    ya.isDemo && "real" == p.accountType || "all" != p.strategyName && p.strategyName != ya.strategy ? !1 : !0
                                                            }), v = ka.length, h = Math.round((ha - 60) / 30), C *= h, w = $('<table class="table-view-history-case"></table>'), y = $(`
                                            <thead>
                                                <tr>
                                                    <th></th>
                                                    <th>${this.translation("history.strategy")}</th>
                                                    <th>${this.translation("history.asset")}</th>
                                                    <th>${this.translation("history.countSteps")}</th>
                                                    <th>${this.translation("history.openTime")}</th>
                                                    <th>${this.translation("history.profit")}</th>
                                                </tr> 
                                            </thead>
                                        `), M = $(`
                                            <tbody class="nothingWasFound">
                                                <tr>
                                                    <td colspan="${y.find("th").length}">${this.translation("history.nothingWasFound")}</td>
                                                </tr>     
                                            </tbody>
                                        `), ha = 0; ha < h; ha++, C++) {
                                                            let T = ka[C];
                                                            if (void 0 == T) continue;
                                                            let ya = T[0];
                                                            var ia = T.filter(Qa => {
                                                                if (Qa.updateOnline) return delete Qa.updateOnline, !0
                                                            }).length;
                                                            let Na = T.reduce((Qa, Oa) => Qa + Oa.profit, 0);
                                                            M.hasClass("nothingWasFound") && (M = $("<tbody></tbody>"));
                                                            let Ta = $(`
                                                <tr class = "ms ${ya.addOnline&&!D?"add-online":""}${ia&&!D?" update":""}">
                                                    <td><div class="icon ${0==ya.command?"dealup":"dealdown"}"></div></td>
                                                    <td>${void 0==g.title[ya.strategy]?ya.altStrategyName:g.title[ya.strategy]}</td>
                                                    <td class="td-asset"><div>${ya.asset}</td>
                                                    <td class="td-asset"><div>${T.reduce((Qa,Oa)=>Oa.mstep>Qa?Oa.mstep:Qa,0)}</td>
                                                    <td>${moment(1E3*ya.openTimestamp).format("DD.MM.YYYY HH:mm:ss")}</td>
                                                    <td><span class="${0<Na?"profit":"loss"}">$${Na.toFixed(2)}</span></td
                                                     
                                                </tr>
                                            
                                            `);
                                                            M.append(Ta);
                                                            setTimeout(() => {
                                                                Ta.hasClass("add-online") && Ta.removeClass("add-online");
                                                                Ta.hasClass("update") && Ta.removeClass("update");
                                                                delete ya.addOnline
                                                            }, 300);
                                                            Ta.on("click", async Qa => {
                                                                $("body").addClass("wait");
                                                                await da(T);
                                                                $("body").removeClass("wait")
                                                            })
                                                        }
                                                }
                                                u.html("");
                                                D = $('<div class="nav-button-case prev"> <div class="icon prev-icon"> </div>');
                                                ka = $('<div class="nav-button-case next"> <div class="icon next-icon"> </div>');
                                                ha = Math.ceil(v / h);
                                                for (let T = 0; T <
                                                    ha && !(0 == T && T + 1 >= ha); T++) {
                                                    let ya = $(`<div class="nav-button-case">${T+1}</div>`);
                                                    0 == T && u.append(D);
                                                    ya.on("click", async () => {
                                                        if (ya.hasClass("select")) return !1;
                                                        $("body").addClass("wait");
                                                        k.sataus = !0;
                                                        clearTimeout(k.timeout);
                                                        r.html(await t(T));
                                                        k.timeout = setTimeout(() => {
                                                            k.sataus = !1
                                                        }, 500);
                                                        $("body").removeClass("wait")
                                                    });
                                                    ia = C / h - 1;
                                                    ia == T ? (ya.addClass("select"), T + 1 == Math.ceil(v / h) ? ka.addClass("hide-no-click") : (ka.removeClass("hide-no-click"), ka.on("click", async () => {
                                                        $("body").addClass("wait");
                                                        k.sataus = !0;
                                                        clearTimeout(k.timeout);
                                                        r.html(await t(T + 1));
                                                        k.timeout = setTimeout(() => {
                                                            k.sataus = !1
                                                        }, 500);
                                                        $("body").removeClass("wait")
                                                    })), 0 == T ? D.addClass("hide-no-click") : (D.removeClass("hide-no-click"), D.on("click", async () => {
                                                        $("body").addClass("wait");
                                                        k.sataus = !0;
                                                        clearTimeout(k.timeout);
                                                        r.html(await t(T - 1));
                                                        k.timeout = setTimeout(() => {
                                                            k.sataus = !1
                                                        }, 500);
                                                        $("body").removeClass("wait")
                                                    }))) : ya.removeClass("select");
                                                    T <= ia ? 2 < ia - T ? ya.addClass(`hide hide${ia-T}`) : ya.removeClass("hide") : 2 < T - ia ? ya.addClass(`hide hide${T-ia}`) : ya.removeClass("hide");
                                                    T + 1 != Math.ceil(v / h) && 0 != T || ya.removeClass("hide");
                                                    (7 > T - ia && -7 < T - ia || 0 == T || T + 1 == Math.ceil(v / h)) && u.append(ya);
                                                    T + 1 == Math.ceil(v / h) && u.append(ka)
                                                }
                                                w.append(y);
                                                w.append(M);
                                                return w
                                            }, m = (C, D = !1) => {
                                                C.openTimestamp -= 60 * n.serverTimeZoneOffset;
                                                C.closeTimestamp -= 60 * n.serverTimeZoneOffset;
                                                let w;
                                                D && (w = d.deals.find(y => y.requestId == C.requestId));
                                                void 0 != w ? Object.assign(w, C, {
                                                    updateOnline: !0
                                                }) : (d.deals.unshift(C), "undefined" == typeof d.servisObjMartin[C.tsID] && (d.servisObjMartin[C.tsID] = [], d.martinSeries.unshift(d.servisObjMartin[C.tsID])),
                                                    d.servisObjMartin[C.tsID].push(C))
                                            };
                                        var h = v = void 0;
                                        let e = this.storage.strategies,
                                            g = {
                                                title: {},
                                                arrAvailableValues: []
                                            };
                                        for (var q = 0; q < e.length; q++) g.title[e[q].id] = "undefined" == typeof e[q].data.userTitle ? this.translation(e[q].data.title) : e[q].data.userTitle, g.arrAvailableValues.push("undefined" != typeof e[q].data.userTitle ? e[q].data.userTitle : e[q].id);
                                        let p = {
                                                date: {
                                                    from: 1704056400,
                                                    to: 1.924981199999E9
                                                },
                                                accountType: "demo",
                                                strategyName: "all",
                                                group: "deals"
                                            },
                                            l = JSON.parse(JSON.stringify(p)),
                                            f = [];
                                        f = x;
                                        let d = {
                                            martinSeries: [],
                                            deals: [],
                                            servisObjMartin: {}
                                        };
                                        f.forEach(m);
                                        var a = [{
                                            id: "date",
                                            type: "daterange",
                                            value: `${moment(1E3*p.date.from).format("DD.MM.YYYY")} - ${moment(1E3*p.date.to).format("DD.MM.YYYY")}`,
                                            values: null
                                        }, {
                                            id: "accountType",
                                            type: "select",
                                            valuePerf: "filter",
                                            value: p.accountType || "demo",
                                            values: ["real", "demo"]
                                        }, {
                                            id: "strategyName",
                                            type: "select",
                                            valuePerf: "strategy.name",
                                            value: p.strategyName || "all",
                                            values: ["all"].concat(g.arrAvailableValues)
                                        }, {
                                            id: "group",
                                            type: "select",
                                            valuePerf: "filter",
                                            value: p.group || "deals",
                                            values: ["deals",
                                                "martinSeries"
                                            ]
                                        }];
                                        q = $(' <div class="history-wrap-ls"> </div> ');
                                        let c = $('<div class="filters-block-case"></div>'),
                                            r = $('<div class="wrap-view-history"></div>'),
                                            u = $('<div class="page-nav-case"></div>');
                                        for (var A = 0; A < a.length; A++) {
                                            let C, D = a[A],
                                                w = $(`<div class="iteam-filter-case ${D.id} ${D.type}"></div>`);
                                            w.append(`
                                    <div class="title-case">
                                        <div class="name-filter">${this.translation(`filter.${D.id}`)}</div>
                                    </div>
                                `);
                                            switch (D.type) {
                                                case "daterange":
                                                    C = $(`
                                            <div class="filter-case">
                                                <div class="icon calendar"></div> 
                                                <div class="date-value">${D.value}</div>
                                                <div class="icon selectwrap"></div>
                                            </div>
                                        `);
                                                    w.append(C);
                                                    C.daterangepicker({
                                                        autoUpdateInput: !0,
                                                        parentEl: q,
                                                        startDate: moment(1E3 * p.date.from).format("DD.MM.YYYY"),
                                                        endDate: moment(1E3 * p.date.to).format("DD.MM.YYYY"),
                                                        locale: {
                                                            showCustomRangeLabel: !1,
                                                            format: "DD.MM.YYYY",
                                                            separator: " - ",
                                                            firstDay: 1,
                                                            applyLabel: this.translation("daterangepicker.action.apply"),
                                                            cancelLabel: this.translation("daterangepicker.action.cancel"),
                                                            customRangeLabel: this.translation("daterangepicker.ranges.customRangeLabel"),
                                                            monthNames: [this.translation("daterangepicker.monthNames.Jan"),
                                                                this.translation("daterangepicker.monthNames.Feb"), this.translation("daterangepicker.monthNames.Mar"), this.translation("daterangepicker.monthNames.Apr"), this.translation("daterangepicker.monthNames.May"), this.translation("daterangepicker.monthNames.Jun"), this.translation("daterangepicker.monthNames.Jul"), this.translation("daterangepicker.monthNames.Aug"), this.translation("daterangepicker.monthNames.Sep"), this.translation("daterangepicker.monthNames.Oct"), this.translation("daterangepicker.monthNames.Nov"),
                                                                this.translation("daterangepicker.monthNames.Dec")
                                                            ],
                                                            daysOfWeek: [this.translation("daterangepicker.daysOfWeek.Su"), this.translation("daterangepicker.daysOfWeek.Mo"), this.translation("daterangepicker.daysOfWeek.Tu"), this.translation("daterangepicker.daysOfWeek.We"), this.translation("daterangepicker.daysOfWeek.Th"), this.translation("daterangepicker.daysOfWeek.Fr"), this.translation("daterangepicker.daysOfWeek.Sa")]
                                                        },
                                                        ranges: {
                                                            [this.translation("daterangepicker.ranges.today")]: [moment(), moment()],
                                                            [this.translation("daterangepicker.ranges.yesterday")]: [moment().subtract(1,
                                                                "days"), moment().subtract(1, "days")],
                                                            [this.translation("daterangepicker.ranges.Last7Days")]: [moment().subtract(6, "days"), moment()],
                                                            [this.translation("daterangepicker.ranges.Last30Days")]: [moment().subtract(29, "days"), moment()],
                                                            [this.translation("daterangepicker.ranges.ThisMonth")]: [moment().startOf("month"), moment().endOf("month")],
                                                            [this.translation("daterangepicker.ranges.LastMonth")]: [moment().subtract(1, "month").startOf("month"), moment().subtract(1, "month").endOf("month")]
                                                        }
                                                    }, function(X, da, ha) {});
                                                    C.on("apply.daterangepicker", function(X, da) {
                                                        $(this).find(".date-value").html(da.startDate.format("DD.MM.YYYY") + " - " + da.endDate.format("DD.MM.YYYY"));
                                                        l.date.from = da.startDate.valueOf() / 1E3;
                                                        l.date.to = da.endDate.valueOf() / 1E3
                                                    });
                                                    C.on("cancel.daterangepicker", function(X, da) {
                                                        $(this).find(".date-value").html("")
                                                    });
                                                    C.on("show.daterangepicker", function(X, da) {
                                                        $(this).addClass("showdaterangepicker")
                                                    });
                                                    C.on("hide.daterangepicker", function(X, da) {
                                                        $(this).removeClass("showdaterangepicker")
                                                    });
                                                    break;
                                                case "select":
                                                    C =
                                                        $(`
                                            <div class="filter-case">
                                                <div class="icon ${D.id}"></div> 
                                            </div>
                                        `);
                                                    let y = $(`
                                            <div class="custom-input-select" type="select" >
                                                <div class="select-case">
                                                    <div class="value">${this.translation(`${D.valuePerf}.${D.value}`).replace(`${D.valuePerf}.`,"")}</div>
                                                    <div class="icon selectwrap"></div>
                                                </div> 
                                            </div>
                                        `),
                                                        M = $('<div class="option-case"></div>');
                                                    for (let X = 0; X < D.values.length; X++) M.append(`<div class="option" value="${D.values[X]}" >${this.translation(`${D.valuePerf}.${D.values[X]}`).replace(`${D.valuePerf}.`,"")}</div>`);
                                                    y.append(M);
                                                    C.append(y);
                                                    w.append(C);
                                                    y.on("click", X => {
                                                        let da = $(X.currentTarget);
                                                        if (da.hasClass("showselect")) {
                                                            if (null != X.target.closest(".option")) {
                                                                var ha = $(X.target).attr("value");
                                                                X = $(X.target).html();
                                                                da.find(".select-case .value").html(X);
                                                                switch (D.id) {
                                                                    case "strategyName":
                                                                        "all" != ha && (X = e.find(ka => ka.id == ha || ka.data.userTitle == ha), ha = void 0 != X ? X.id : "all");
                                                                        l[D.id] = ha;
                                                                        break;
                                                                    default:
                                                                        l[D.id] = ha
                                                                }
                                                            }
                                                            return da.removeClass("showselect")
                                                        }
                                                        $('.custom-input-select[type="select"]').removeClass("showselect");
                                                        da.addClass("showselect")
                                                    })
                                            }
                                            c.append(w)
                                        }
                                        a = $(`
                                <div class="iteam-filter-case apply">
                                    <div class="title-case">
                                        <div class="name-filter">&emsp;</div>
                                    </div>
                                    <div class="filter-case">  
                                        <div class="date-value">${this.translation("filter.apply")}</div>  
                                    </div>
                                </div>
                            `);
                                        A = $(`
                                <div class="iteam-filter-case delete">
                                    <div class="title-case">
                                        <div class="name-filter">&emsp;</div>
                                    </div>
                                    <div class="filter-case">  
                                        <div class="date-value">${this.translation("filter.deleteHistory")}</div>  
                                    </div>
                                </div>
                            `);
                                        a.on("click", async C => {
                                            C = JSON.stringify(p.date) != JSON.stringify(l.date);
                                            Object.assign(p, JSON.parse(JSON.stringify(l)));
                                            C && (d = {
                                                martinSeries: [],
                                                deals: [],
                                                servisObjMartin: {}
                                            }, f = x, f.forEach(m));
                                            r.html(await t())
                                        });
                                        A.on("click", async () => {
                                            $("body").addClass("wait");
                                            d = {
                                                martinSeries: [],
                                                deals: [],
                                                servisObjMartin: {}
                                            };
                                            f = [];
                                            f.forEach(m);
                                            r.html(await t(0, !0));
                                            $("body").removeClass("wait")
                                        });
                                        a.click();
                                        c.append(a);
                                        c.append(A);
                                        q.append(c);
                                        q.append(r);
                                        q.append(u);
                                        let B;
                                        this.on("windowResize",
                                            "history", () => {
                                                r.addClass("hide");
                                                clearTimeout(B);
                                                B = setTimeout(async () => {
                                                    r.html(await t())
                                                }, 700)
                                            });
                                        return q
                                    },
                                    E = () => {
                                        let v = $('\n                                <div class="shop-wrap">\n                                    <div class="shop-category-list-case"></div>\n                                    <div class="shop-category-view-case"></div>\n                                </div>\n                            '),
                                            n = v.find(".shop-category-list-case"),
                                            k = v.find(".shop-category-view-case");
                                        this.configuration.shop =
                                            this.configuration.shop.sort((m, h) => {
                                                switch (!0) {
                                                    case m.timePublication < h.timePublication:
                                                        return 1;
                                                    case m.timePublication > h.timePublication:
                                                        return -1;
                                                    case m.timePublication == h.timePublication:
                                                        return 0
                                                }
                                            });
                                        for (let m = 0, h = {}, e; m < this.configuration.shop.length; m++) {
                                            var t = this.configuration.shop[m];
                                            e = h[t.category];
                                            "undefined" == typeof h[t.category] && (h[t.category] = {
                                                tab: $(`
                                            <div class="category-iteam-case ${t.category}">
                                                <div class="icon"></div>
                                                <div class="category-name">${this.translation(`shop.categories.${t.category}`)}</div>
                                            </div>
                                        `),
                                                view: $('<div class="wrap-view-category-case"></div>')
                                            }, e = h[t.category], n.append(e.tab), k.append(e.view), e.tab.on("click", g => {
                                                n.find(".category-iteam-case").removeClass("select");
                                                k.find(".wrap-view-category-case").removeClass("show");
                                                e.tab.addClass("select");
                                                e.view.addClass("show")
                                            }));
                                            switch (t.category) {
                                                case "strategy":
                                                    t = $(`
                                            <div class="iteam-category-case">
                                                <img class="label-new ${t.timePublication>Math.round(moment().subtract(3,"month").valueOf()/1E3)?"show":""}" src="../img/strategyIcon/new.png"/>
                                                <div class="title">${this.translation(`strategy.name.${t.id}`)}</div>
                                                <div class="description-case">
                                                    <div class="logo"><img src="../img/strategyIcon/thumbnail.svg" width="50px" /></div>
                                                    <div class="description">
                                                        <div class="wrap-content">
                                                            ${this.translation(`strategy.description.${t.id}`,{spanUp:'<br><span class="icon up"></span>',spanDown:'<br><span class="icon down"></span>'})}
                                                        </div>
                                                        <span class="unwrap hoverUnderline">${this.translation("action.unwrap")}</span>
                                                    </div>
                                                    <div class="action-case">

                                                        <div class="action-button">
                                                            <div class="icon download"></div>
                                                            <div class="action-title">${this.translation("action.add")}</div>
                                                        </div>

                                                    </div>
                                                </div>
                                            </div>
                                        `);
                                                    t.find(".description-case .description span.unwrap");
                                                    t.find(".description-case .action-case .action-button");
                                                    e.view.append(t);
                                                    break;
                                                case "mtExpert":
                                                    e.view.append(`<div style="color: #9aa6c5; text-align: center;margin-top: 15px;">${this.translation("shop.products.noOffers")}</div>`);
                                                    break;
                                                case "promoCodes":
                                                    t = $(`
                                            <div class="iteam-category-case promoCodes">
                                                <img class="label-new ${t.timePublication>Math.round(moment().subtract(3,"month").valueOf()/1E3)?"show":""}" src="../img/strategyIcon/new.png"/>
                                                <div class="title">${this.translation(t.title)}</div>
                                                <div class="description-case">
                                                    <!--<div class="logo"><img src="../img/promocode.png"/></div>-->
                                                    <div class="description">
                                                        <div class="wrap-content">
                                                            ${t.data}
                                                        </div>
                                                    </div>
                                                    <div class="action-case"> 
                                                        <div class="action-button">
                                                            <div class="icon copy"></div>
                                                            <div class="action-title">${this.translation("action.copy")}</div>
                                                        </div>

                                                    </div>
                                                </div>
                                            </div>
                                        `), t.find(".description-case .action-case .action-button"), e.view.append(t)
                                            }
                                            m + 1 == this.configuration.shop.length && h.strategy.tab.click()
                                        }
                                        return v
                                    },
                                    H = async (v, n, k = !1) => {
                                        let t = d => {
                                                let a = C => {
                                                        let D = $('<div class="iteam-body-case"></div>');
                                                        for (let X in C) {
                                                            let da = C[X];
                                                            switch (X) {
                                                                case "assets":
                                                                    var w = $(`
                                                    <div class="any-data-case assets">
                                                        <div class="any-data-head">${this.translation("logsBook.iteamTitle.assets")}</div>
                                                        <div class="any-data-body"></div>
                                                    </div>
                                                `);
                                                                    let ha = w.find(".any-data-body");
                                                                    da.forEach(T => {
                                                                        ha.append(`<div class="any-data-iteam-asset">${T}</div>`)
                                                                    });
                                                                    D.append(w);
                                                                    break;
                                                                case "indicatorsSetings":
                                                                    w = $(`
                                                    <div class="any-data-case indicators">
                                                        <div class="any-data-head">${this.translation("logsBook.iteamTitle.indicators")}</div>
                                                        <div class="any-data-body"></div>
                                                    </div>
                                                `);
                                                                    let ka = w.find(".any-data-body");
                                                                    da.forEach((T, ya) => {
                                                                        let Na = $(`
                                                        <div class="any-data-iteam-indicator-case">
                                                            <div class="any-data-iteam-indicator-head">${this.translation("logsBook.iteamTitle.indicator",{index:ya+1,name:this.translation(`indicators.names.${T.id}`)})}</div>
                                                            <div class="any-data-iteam-indicator-body"></div> 
                                                        </div>
                                                    `),
                                                                            Ta = Na.find(".any-data-iteam-indicator-body");
                                                                        for (let Ga in T) {
                                                                            let pa = T[Ga];
                                                                            switch (Ga) {
                                                                                case "indparms":
                                                                                    var Qa = $(`
                                                                    <div class="indparms-indicator-case iteam-indicator">
                                                                        <!---<div class="indparms-indicator-head">${this.translation("logsBook.iteamTitle.parms")}</div>--->
                                                                        <div class="indparms-indicator-body"></div>
                                                                    </div>
                                                                `),
                                                                                        Oa = Qa.find(".indparms-indicator-body");
                                                                                    for (let Ja in pa)
                                                                                        if ("timeInspection" != Ja || 0 == ya) {
                                                                                            var ea = pa[Ja];
                                                                                            ea = $(`
                                                                        <div class="iteam-setting-value-case">
                                                                            <div class="iteam-setting-name">${this.translation(`indicators.settings.${Ja}`)}</div>
                                                                            <div class="iteam-setting-value">${isNaN(+ea)&&"indId"!=Ja?this.translation(`indicators.settingsValues.${ea}`):ea}</div>
                                                                        </div>
                                                                    `);
                                                                                            Oa.append(ea)
                                                                                        } Ta.append(Qa);
                                                                                    break;
                                                                                case "conditions":
                                                                                    Qa = $(`
                                                                    <div class="conditions-indicator-case iteam-indicator">
                                                                        <!---<div class="conditions-indicator-head">${this.translation("logsBook.iteamTitle.conditions")}</div>--->
                                                                        <div class="conditions-indicator-body"></div>
                                                                    </div>
                                                                `).find(".conditions-indicator-body");
                                                                                    for (let Ja in pa) Oa = pa[Ja], Oa = $(`
                                                                        <div class="iteam-conditions-case ${Ja}">
                                                                            <div class="iteam-conditions-name">${this.translation(`logsBook.iteamTitle.${Ja}`)}</div>
                                                                            <div class="iteam-conditions-value">${this.translation(`indicators.settingsValues.${Oa}.long`)}</div>
                                                                        </div>
                                                                    `), Qa.append(Oa);
                                                                                    Ta.append(Qa)
                                                                            }
                                                                        }
                                                                        ka.append(Na)
                                                                    });
                                                                    D.append(w);
                                                                    break;
                                                                case "regulationsSetings":
                                                                    w = $(`
                                                    <div class="any-data-case regulations">
                                                        <div class="any-data-head">${this.translation("logsBook.iteamTitle.regulations")}</div>
                                                        <div class="any-data-body"></div>
                                                    </div>
                                                `);
                                                                    var y = w.find(".any-data-body");
                                                                    for (let T in da) {
                                                                        var M = da[T];
                                                                        M = $(`
                                                        <div class="iteam-regulation-value-case ${T}">
                                                            <div class="iteam-regulation-name">${this.translation(`regulations.settings.${T}`)}</div>
                                                            <div class="iteam-regulation-value">${isNaN(+M)&&"timeFrom"!=T?this.translation(`regulations.settingsValues.${M}`):M}</div>
                                                        </div>
                                                    `);
                                                                        y.append(M)
                                                                    }
                                                                    D.append(w);
                                                                    break;
                                                                case "martingaleSetings":
                                                                    w = $(`
                                                    <div class="any-data-case martingaleSetings">
                                                        <div class="any-data-head">${this.translation("logsBook.iteamTitle.martingaleSetings")}</div>
                                                        <div class="any-data-body"></div>
                                                    </div>
                                                `);
                                                                    let ia = w.find(".any-data-body");
                                                                    da.forEach((T, ya) => {
                                                                        ya = $(`
                                                        <div class="martin-step-case">
                                                            <div class="martin-step-head">${this.translation("martingale.stepn",{index:ya+1})}</div>
                                                            <div class="martin-step-body"></div>
                                                        </div>
                                                    `);
                                                                        let Na = ya.find(".martin-step-body");
                                                                        for (let Qa in T)
                                                                            if ("actionDecreaseProfit" != Qa && "autoRatio" != Qa) {
                                                                                var Ta = T[Qa];
                                                                                Ta = $(`
                                                            <div class="martin-step-seting-case ${Qa}">
                                                                <div class="martin-step-seting-name">${"minProfit"==Qa?`${this.translation(`martingale.settings.${Qa}`)} ${Ta} %`:this.translation(`martingale.settings.${Qa}`)}</div>
                                                                <div class="martin-step-seting-value">${"ratio"==Qa?"on"==T.autoRatio?this.translation("martingale.settingsValues.autoCalculation"):Ta:"minProfit"==Qa?this.translation(`martingale.settingsValues.${T.actionDecreaseProfit}`):isNaN(+Ta)?this.translation(`martingale.settingsValues.${Ta}`):Ta}</div>
                                                            </div>
                                                        `);
                                                                                Na.append(Ta)
                                                                            } ia.append(ya)
                                                                    });
                                                                    D.append(w);
                                                                    break;
                                                                case "updateAssets":
                                                                    w = $('\n                                                    <div class="any-data-case updateAssets"> \n                                                        <div class="any-data-body"></div>\n                                                    </div>\n                                                ');
                                                                    y = w.find(".any-data-body");
                                                                    for (let T in da) M = da[T], M = $(`
                                                        <div class="asset-data-case ${M.available?"":"no-available"} ${M.isChange?"is-change":""}">
                                                            <div class="asset-title-case">${T}</div>
                                                            <div class="asset-value-case">
                                                                <div class="available-value">${M.available?"&#10004;":"&#10008;"}</div>
                                                                <div class="profit-value">${M.profit}%</div>
                                                                <div class="minExp-value">${M.minExp}c.</div>
                                                            </div>
                                                        </div>
                                                    `), y.append(M);
                                                                    D.append(w)
                                                            }
                                                        }
                                                        return D
                                                    },
                                                    c = $('\n                                    <div class="iteam-logbook-wrap">\n                                        <div class="iteam-head-case"> \n                                            <div class="iteam-date"></div>\n                                            <div class="iteam-title"></div>\n                                        </div>\n                                    </div>\n                                '),
                                                    r = c.find(".iteam-head-case"),
                                                    u = r.find(".iteam-date"),
                                                    A = r.find(".iteam-title"),
                                                    B = $('\n                                    <div class="icon unwrap"></div>\n                                ');
                                                9 < JSON.stringify(d.anyData).length && (c.addClass("wrap"), r.append(B), B.on("click", () => {
                                                    c.hasClass("wrap") ? (c.removeClass("wrap"), B.addClass("wrap")) : (c.addClass("wrap"), B.removeClass("wrap"))
                                                }));
                                                switch (d.type.split(":")[1]) {
                                                    case "launch":
                                                        u.html(moment(1E3 * d.timestamp).format("DD.MM.YYYY HH:mm:ss"));
                                                        A.html(this.translation("logsBook.iteamTitle.launch"));
                                                        c.append(a(d.anyData));
                                                        break;
                                                    case "changes":
                                                        u.html(moment(1E3 * d.timestamp).format("DD.MM.YYYY HH:mm:ss"));
                                                        A.html(this.translation("logsBook.iteamTitle.changed"));
                                                        c.append(a(d.anyData));
                                                        break;
                                                    case "stopped":
                                                        u.html(moment(1E3 * d.timestamp).format("DD.MM.YYYY HH:mm:ss"));
                                                        A.html(d.log.mark.map(C => this.translation(C, d.log.parms)).join(" "));
                                                        break;
                                                    case "note":
                                                        u.html(moment(1E3 * d.timestamp).format("DD.MM.YYYY HH:mm:ss"));
                                                        A.html(d.log.mark.map(C => this.translation(C, d.log.parms)).join(" "));
                                                        A.attr("title",
                                                            A.text());
                                                        break;
                                                    case "updateAssets":
                                                        u.html(moment(1E3 * d.timestamp).format("DD.MM.YYYY HH:mm:ss"));
                                                        A.html(this.translation("logsBook.iteamTitle.informationAssets"));
                                                        c.append(a(d.anyData));
                                                        break;
                                                    default:
                                                        return
                                                }
                                                c.find("f").on("click", C => {
                                                    C = $(C.currentTarget);
                                                    g.val(C.html());
                                                    g.trigger("input")
                                                });
                                                return c
                                            },
                                            m = async d => {
                                                q.html('<div class="curtain-find-case"> <img src="../img/svg/loading_2_black.svg" /> </div>');
                                                for (var a = 0; d < h.length && a < (f.pageLimit || 300); d++, a++) {
                                                    var c = t(h[d]);
                                                    q.append(c);
                                                    var r = q[0].scrollHeight >
                                                        q[0].clientHeight ? !0 : !1;
                                                    if (r) {
                                                        c.remove();
                                                        f.pageLimit = a;
                                                        break
                                                    }
                                                }
                                                let u = f.pageLimit;
                                                p.html('<div class="nav-button-case hide hideEmpty">0</div>');
                                                d = $('<div class="nav-button-case prev"> <div class="icon prev-icon"> </div>');
                                                r = $('<div class="nav-button-case next"> <div class="icon next-icon"> </div>');
                                                for (let A = 0; A < Math.ceil(h.length / u); A++) 0 == A && p.html(""), a = $(`<div class="nav-button-case">${A+1}</div>`), 0 == A && p.append(d), a.on("click", async () => {
                                                        f.forIteam = 0 == A ? 0 : A * u;
                                                        m(f.forIteam)
                                                    }), c = f.forIteam / u, c ==
                                                    A ? (a.addClass("select"), A + 1 == Math.ceil(h.length / u) ? r.addClass("hide-no-click") : (r.removeClass("hide-no-click"), r.on("click", () => {
                                                        f.forIteam = (A + 1) * u;
                                                        m(f.forIteam)
                                                    })), 0 == A ? d.addClass("hide-no-click") : (d.removeClass("hide-no-click"), d.on("click", () => {
                                                        f.forIteam = (A - 1) * u;
                                                        m(f.forIteam)
                                                    }))) : a.removeClass("select"), A <= c ? 2 < c - A ? a.addClass(`hide hide${c-A}`) : a.removeClass("hide") : 2 < A - c ? a.addClass(`hide hide${A-c}`) : a.removeClass("hide"), A + 1 != Math.ceil(h.length / u) && 0 != A || a.removeClass("hide"), (6 > A - c && -6 < A - c ||
                                                        0 == A || A + 1 == Math.ceil(h.length / u)) && p.append(a), A + 1 == Math.ceil(h.length / u) && p.append(r);
                                                g.trigger("input")
                                            }, h = S;
                                        n = n.find(d => d.id == v);
                                        let e = $(`
                                <div class="logbook-strategy-case">
                                    <div class="logbook-strategy-filter-case">
                                        <div class="input-filter-wrap">
                                            <input type="text" name="logbookFilter" placeholder="${this.translation("logsBook.filter")}" autocomplete="off"/>
                                            <div class="input-reset icon"></div>
                                        </div>
                                        <div class="update-logbook-case">
                                            <div class="icon updateHistory icon-update-logbook"></div>
                                            <div class="count-new-write icon sort_down hide"> 9 </div>
                                        </div>
                                    </div> 
                                    <div class="logbook-strategy-body find">
                                        <div class="curtain-find-case"> <img src="../img/svg/loading_2_black.svg" /> </div>
                                    </div>
                                    <div class="page-nav-case">
                                        <div class="nav-button-case hide hideEmpty">${0}</div> 
                                    </div>
                                </div>
                            `),
                                            g = e.find('input[name="logbookFilter"]'),
                                            q = e.find(".logbook-strategy-body"),
                                            p = e.find(".page-nav-case"),
                                            l = e.find(".input-reset.icon");
                                        e.find(".icon-update-logbook");
                                        e.find(".count-new-write");
                                        aa(this.translation("logsBook.strategyLogbook", {
                                            strategy: "undefined" == typeof n.data.userTitle ? this.translation(n.data.title) : n.data.userTitle
                                        }), e, "lb", this.translation("action.close"));
                                        if (0 == h.length) return e.append(`
                                    <div class="empty-log-book">${this.translation("logsBook.emptyLogBook")}</div>
                                `);
                                        e.addClass("log-book-view");
                                        let f = {
                                            forIteam: 0
                                        };
                                        m(0);
                                        g.on("input", () => {
                                            let d = g.val();
                                            " " == d && (d = "", g.val(d));
                                            if ("" == d) e.find(".iteam-logbook-wrap").removeClass("highlighted");
                                            else {
                                                var a = new RegExp(d.toLowerCase());
                                                $(".iteam-logbook-wrap").each(function(c) {
                                                    c = $(this);
                                                    let r = c.text().toLowerCase();
                                                    a.test(r) ? c.addClass("highlighted") : c.removeClass("highlighted")
                                                })
                                            }
                                        });
                                        l.on("click", () => {
                                            g.val("");
                                            g.trigger("input")
                                        });
                                        k ? (q.addClass("find"), n = h.findIndex(d => "undefined" != typeof d.log &&
                                            "object" == typeof d.log.parms && JSON.stringify(d.log.parms).includes(k)), f.forIteam = void 0 != f.pageLimit ? n - n % f.pageLimit : 0, m(f.forIteam), g.val(k), g.trigger("input")) : (k = "AUDCHF_otc_6247485326026896", q.addClass("find"), n = h.findIndex(d => "undefined" != typeof d.log && "object" == typeof d.log.parms && JSON.stringify(d.log.parms).includes(k)), f.forIteam = void 0 != f.pageLimit ? n - n % f.pageLimit : 0, m(f.forIteam));
                                        q.removeClass("find")
                                    }, Q = () => {
                                        this.runEvent("liveStop", !0);
                                        this.on("liveStop", "liveFunction", () => {});
                                        let v =
                                            ca.clone();
                                        v.addClass("open-settings");
                                        let n = sa.clone(),
                                            k = sa.clone();
                                        k.addClass("two");
                                        n.find(".name").html(this.translation("strategy.name.bbLine"));
                                        n.find(".iteam-strategy-name-case").html(this.translation("strategy.name.bbLine"));
                                        k.find(".name").html(this.translation("strategy.name.keltnerChannel"));
                                        k.find(".iteam-strategy-name-case").html(this.translation("strategy.name.keltnerChannel"));
                                        v.append(n);
                                        v.append(k);
                                        v.find(".cursor");
                                        return v
                                    };
                                var V = () => {
                                        this.runEvent("liveStop", !0);
                                        let v = !1;
                                        this.on("liveStop",
                                            "liveFunction", () => {
                                                v = !0
                                            });
                                        let n = ca.clone();
                                        n.addClass("open-settings");
                                        let k = sa.clone(),
                                            t = sa.clone();
                                        t.addClass("two");
                                        let m = Ea.clone(),
                                            h = m.find(".button-newstr-case");
                                        k.find(".name").html(this.translation("strategy.name.myStrategy"));
                                        k.find(".iteam-strategy-name-case").html(this.translation("strategy.name.myStrategy"));
                                        t.find(".name").html(this.translation("strategy.name.myStrategy"));
                                        t.find(".iteam-strategy-name-case").html(this.translation("strategy.name.myStrategy"));
                                        k.css({
                                            opacity: "0"
                                        });
                                        t.css({
                                            opacity: "0"
                                        });
                                        t.css({
                                            left: "40px"
                                        });
                                        n.append(k);
                                        n.append(t);
                                        n.append(m);
                                        let e = n.find(".cursor");
                                        k.find(".context-menu-case");
                                        (async () => {
                                            for (;;) try {
                                                if (v) break;
                                                await b(100);
                                                t.find(".name").html(this.translation("strategy.name.myStrategy"));
                                                t.find(".iteam-strategy-name-case").html(this.translation("strategy.name.myStrategy"));
                                                k.css({
                                                    opacity: "0"
                                                });
                                                t.css({
                                                    opacity: "0"
                                                });
                                                e.css({
                                                    top: "16px",
                                                    left: "100px"
                                                });
                                                await b(400);
                                                h.addClass("hover");
                                                await b(2E3);
                                                e.attr("class", "cursor click-left");
                                                h.addClass("action");
                                                await b(150);
                                                e.attr("class", "cursor");
                                                h.removeClass("action");
                                                await b(150);
                                                t.css({
                                                    opacity: "1"
                                                });
                                                t.addClass("edit");
                                                let g = t.find('input[name="nameIdit"]');
                                                g.val(t.find("div.name").html());
                                                g.focus().select();
                                                await b(700);
                                                g.val("");
                                                let q = this.translation("strategy.name.grail"),
                                                    p = "";
                                                for (let l = 0; l < q.length; l++) p += q[l], g.val(p), await b(250);
                                                t.find(".name").html(p);
                                                await b(700);
                                                e.css({
                                                    top: "70px",
                                                    left: "100px"
                                                });
                                                await b(500);
                                                h.removeClass("hover");
                                                await b(1500);
                                                e.attr("class", "cursor click-left");
                                                await b(150);
                                                e.attr("class",
                                                    "cursor");
                                                await b(100);
                                                t.removeClass("edit");
                                                await b(700);
                                                e.css({
                                                    top: "0px",
                                                    left: "0px"
                                                });
                                                await b(2E3)
                                            } catch {
                                                break
                                            }
                                        })();
                                        return n
                                    },
                                    ra = () => {
                                        this.runEvent("liveStop", !0);
                                        let v = !1;
                                        this.on("liveStop", "liveFunction", () => {
                                            v = !0
                                        });
                                        let n = ca.clone();
                                        n.addClass("open-settings");
                                        let k = sa.clone(),
                                            t = sa.clone();
                                        t.addClass("two");
                                        k.find(".name").html(this.translation("strategy.name.bbLine"));
                                        k.find(".iteam-strategy-name-case").html(this.translation("strategy.name.bbLine"));
                                        t.find(".name").html(this.translation("strategy.name.keltnerChannel"));
                                        t.find(".iteam-strategy-name-case").html(this.translation("strategy.name.keltnerChannel"));
                                        n.append(k);
                                        n.append(t);
                                        let m = n.find(".cursor"),
                                            h = k.find(".context-menu-case");
                                        (async () => {
                                            for (;;) try {
                                                if (v) break;
                                                await b(100);
                                                m.css({
                                                    top: "20px",
                                                    left: "57px"
                                                });
                                                await b(500);
                                                k.addClass("hover");
                                                await b(2E3);
                                                m.attr("class", "cursor click-left");
                                                k.addClass("action");
                                                await b(100);
                                                k.removeClass("action");
                                                m.attr("class", "cursor");
                                                await b(3E3);
                                                m.attr("class", "cursor click-right");
                                                k.addClass("action");
                                                await b(100);
                                                k.removeClass("action");
                                                m.attr("class", "cursor");
                                                k.addClass("context-menu-show");
                                                h.css({
                                                    top: "18px",
                                                    left: "65px",
                                                    opacity: "1"
                                                });
                                                await b(300);
                                                m.css({
                                                    top: "70px",
                                                    left: "120px"
                                                });
                                                await b(1E3);
                                                h.find(".iteam-context-case:nth-child(2)").addClass("hover");
                                                await b(1200);
                                                m.attr("class", "cursor click-left");
                                                h.find(".iteam-context-case:nth-child(2)").addClass("action");
                                                await b(200);
                                                m.attr("class", "cursor");
                                                h.find(".iteam-context-case:nth-child(2)").removeClass("action");
                                                await b(150);
                                                k.removeClass("context-menu-show");
                                                h.find(".iteam-context-case:nth-child(2)").removeClass("hover");
                                                h.css({
                                                    top: "18px",
                                                    left: "65px",
                                                    opacity: "0"
                                                });
                                                await b(1E3);
                                                m.css({
                                                    top: "0px",
                                                    left: "0px"
                                                });
                                                await b(1E3);
                                                k.removeClass("hover");
                                                await b(1E3)
                                            } catch {
                                                break
                                            }
                                        })();
                                        return n
                                    },
                                    oa = () => {
                                        this.runEvent("liveStop", !0);
                                        let v = !1;
                                        this.on("liveStop", "liveFunction", () => {
                                            v = !0
                                        });
                                        let n = ca.clone();
                                        n.addClass("open-settings");
                                        let k = sa.clone(),
                                            t = sa.clone();
                                        t.addClass("two");
                                        k.find(".name").html(this.translation("strategy.name.bbLine"));
                                        k.find(".iteam-strategy-name-case").html(this.translation("strategy.name.bbLine"));
                                        t.find(".name").html(this.translation("strategy.name.keltnerChannel"));
                                        t.find(".iteam-strategy-name-case").html(this.translation("strategy.name.keltnerChannel"));
                                        n.append(k);
                                        n.append(t);
                                        let m = n.find(".cursor"),
                                            h = k.find(".context-menu-case");
                                        (async () => {
                                            for (;;) try {
                                                if (v) break;
                                                t.attr("status", "stoped");
                                                k.attr("status", "stoped");
                                                await b(100);
                                                m.css({
                                                    top: "205px",
                                                    left: "91px"
                                                });
                                                await b(700);
                                                t.addClass("hover");
                                                await b(2E3);
                                                m.attr("class", "cursor click-left");
                                                t.find(".switch-status.on").addClass("action");
                                                await b(100);
                                                t.find(".switch-status.on").removeClass("action");
                                                m.attr("class",
                                                    "cursor");
                                                t.attr("status", "trade");
                                                await b(2E3);
                                                m.css({
                                                    top: "20px",
                                                    left: "57px"
                                                });
                                                await b(300);
                                                t.removeClass("hover");
                                                await b(300);
                                                k.addClass("hover");
                                                await b(2E3);
                                                m.attr("class", "cursor click-right");
                                                k.addClass("action");
                                                await b(100);
                                                k.removeClass("action");
                                                m.attr("class", "cursor");
                                                await b(100);
                                                k.addClass("context-menu-show");
                                                h.css({
                                                    top: "18px",
                                                    left: "65px",
                                                    opacity: "1"
                                                });
                                                await b(300);
                                                m.css({
                                                    top: "70px",
                                                    left: "120px"
                                                });
                                                await b(1E3);
                                                h.find(".iteam-context-case:nth-child(2)").addClass("hover");
                                                m.css({
                                                    top: "100px",
                                                    left: "120px"
                                                });
                                                await b(500);
                                                h.find(".iteam-context-case:nth-child(2)").removeClass("hover");
                                                h.find(".iteam-context-case:nth-child(3)").addClass("hover");
                                                await b(1500);
                                                m.attr("class", "cursor click-left");
                                                h.find(".iteam-context-case:nth-child(3)").addClass("action");
                                                await b(150);
                                                h.find(".iteam-context-case:nth-child(3)").removeClass("action");
                                                m.attr("class", "cursor");
                                                await b(100);
                                                h.find(".iteam-context-case:nth-child(3)").removeClass("hover");
                                                k.removeClass("context-menu-show");
                                                h.css({
                                                    top: "18px",
                                                    left: "65px",
                                                    opacity: "0"
                                                });
                                                k.attr("status", "trade");
                                                await b(1E3);
                                                m.css({
                                                    top: "0px",
                                                    left: "0px"
                                                });
                                                await b(1E3);
                                                k.removeClass("hover");
                                                await b(2E3)
                                            } catch {
                                                break
                                            }
                                        })();
                                        return n
                                    },
                                    Aa = () => {
                                        this.runEvent("liveStop", !0);
                                        let v = !1;
                                        this.on("liveStop", "liveFunction", () => {
                                            v = !0
                                        });
                                        let n = ca.clone();
                                        n.addClass("open-settings");
                                        let k = sa.clone(),
                                            t = sa.clone();
                                        t.addClass("two");
                                        k.find(".name").html(this.translation("strategy.name.bbLine"));
                                        k.find(".iteam-strategy-name-case").html(this.translation("strategy.name.bbLine"));
                                        t.find(".name").html(this.translation("strategy.name.keltnerChannel"));
                                        t.find(".iteam-strategy-name-case").html(this.translation("strategy.name.keltnerChannel"));
                                        n.append(k);
                                        n.append(t);
                                        let m = n.find(".cursor"),
                                            h = k.find(".context-menu-case");
                                        h.find(".iteam-context-case:nth-child(3)").html(`
                                <div class="icon stop"></div>
                                <div class="context-title">${this.translation("strategy.context.stop")}</div>
                            `);
                                        (async () => {
                                            for (;;) try {
                                                if (v) break;
                                                await b(100);
                                                k.attr("status", "trade");
                                                t.attr("status", "trade");
                                                m.css({
                                                    top: "205px",
                                                    left: "30px"
                                                });
                                                await b(1E3);
                                                t.addClass("hover");
                                                await b(1100);
                                                m.attr("class", "cursor click-left");
                                                t.find(".switch-status.off").addClass("action");
                                                await b(200);
                                                t.find(".switch-status.off").removeClass("action");
                                                m.attr("class", "cursor");
                                                await b(100);
                                                t.attr("status", "stoped");
                                                await b(1500);
                                                m.css({
                                                    top: "20px",
                                                    left: "60px"
                                                });
                                                await b(500);
                                                t.removeClass("hover");
                                                await b(500);
                                                k.addClass("hover");
                                                await b(1E3);
                                                m.attr("class", "cursor click-right");
                                                k.addClass("action");
                                                await b(150);
                                                k.removeClass("action");
                                                m.attr("class", "cursor");
                                                await b(100);
                                                k.addClass("context-menu-show");
                                                h.css({
                                                    top: "18px",
                                                    left: "65px",
                                                    opacity: "1"
                                                });
                                                await b(300);
                                                m.css({
                                                    top: "70px",
                                                    left: "120px"
                                                });
                                                await b(1E3);
                                                h.find(".iteam-context-case:nth-child(2)").addClass("hover");
                                                m.css({
                                                    top: "100px",
                                                    left: "120px"
                                                });
                                                await b(500);
                                                h.find(".iteam-context-case:nth-child(2)").removeClass("hover");
                                                h.find(".iteam-context-case:nth-child(3)").addClass("hover");
                                                await b(1500);
                                                m.attr("class", "cursor click-left");
                                                h.find(".iteam-context-case:nth-child(3)").addClass("action");
                                                await b(150);
                                                h.find(".iteam-context-case:nth-child(3)").removeClass("action");
                                                m.attr("class", "cursor");
                                                await b(100);
                                                k.removeClass("context-menu-show");
                                                h.css({
                                                    top: "18px",
                                                    left: "65px",
                                                    opacity: "0"
                                                });
                                                h.find(".iteam-context-case:nth-child(3)").removeClass("hover");
                                                k.attr("status", "stoped");
                                                m.css({
                                                    top: "0px",
                                                    left: "0px"
                                                });
                                                await b(1E3);
                                                k.removeClass("hover");
                                                await b(2E3)
                                            } catch {
                                                break
                                            }
                                        })();
                                        return n
                                    },
                                    va = () => {
                                        this.runEvent("liveStop", !0);
                                        let v = !1;
                                        this.on("liveStop", "liveFunction", () => {
                                            v = !0
                                        });
                                        let n = ca.clone();
                                        n.addClass("open-settings");
                                        let k = sa.clone(),
                                            t = sa.clone();
                                        t.addClass("two");
                                        k.find(".name").html(this.translation("strategy.name.bbLine"));
                                        k.find(".iteam-strategy-name-case").html(this.translation("strategy.name.bbLine"));
                                        t.find(".name").html(this.translation("strategy.name.keltnerChannel"));
                                        t.find(".iteam-strategy-name-case").html(this.translation("strategy.name.keltnerChannel"));
                                        n.append(k);
                                        n.append(t);
                                        let m = n.find(".cursor"),
                                            h = k.find(".context-menu-case");
                                        (async () => {
                                            for (;;) try {
                                                if (v) break;
                                                k.removeClass("hover");
                                                k.removeClass("context-menu-show");
                                                h.css({
                                                    top: "18px",
                                                    left: "65px",
                                                    opacity: "0"
                                                });
                                                await b(1E3);
                                                k.css({
                                                    display: "flex"
                                                });
                                                m.css({
                                                    top: "20px",
                                                    left: "57px"
                                                });
                                                await b(500);
                                                k.addClass("hover");
                                                await b(2200);
                                                m.attr("class", "cursor click-right");
                                                k.addClass("action");
                                                await b(100);
                                                k.removeClass("action");
                                                m.attr("class", "cursor");
                                                await b(150);
                                                k.addClass("context-menu-show");
                                                h.css({
                                                    top: "18px",
                                                    left: "65px",
                                                    opacity: "1"
                                                });
                                                await b(300);
                                                m.css({
                                                    top: "155px",
                                                    left: "120px"
                                                });
                                                await b(300);
                                                for (let e = 2; 6 > e; e++) h.find(`.iteam-context-case:nth-child(${e})`).addClass("hover"), await b(200), 5 > e || (await b(1E3), m.attr("class", "cursor click-left"), h.find(`.iteam-context-case:nth-child(${e})`).addClass("action"), await b(100), h.find(`.iteam-context-case:nth-child(${e})`).removeClass("action"), m.attr("class", "cursor")), h.find(`.iteam-context-case:nth-child(${e})`).removeClass("hover");
                                                await b(150);
                                                k.css({
                                                    display: "none"
                                                });
                                                await b(300);
                                                m.css({
                                                    top: "0px",
                                                    left: "0px"
                                                });
                                                await b(1500)
                                            } catch {
                                                break
                                            }
                                        })();
                                        return n
                                    };
                                let Wa = () => {
                                        this.runEvent("liveStop", !0);
                                        let v = !1;
                                        this.on("liveStop", "liveFunction", () => {
                                            v = !0
                                        });
                                        let n = ca.clone();
                                        n.addClass("open-settings");
                                        let k = sa.clone(),
                                            t = sa.clone();
                                        t.addClass("two");
                                        k.find(".name").html(this.translation("strategy.name.bbLine"));
                                        k.find(".iteam-strategy-name-case").html(this.translation("strategy.name.bbLine"));
                                        t.find(".name").html(`${this.translation("strategy.name.bbLine")}(1)`);
                                        t.find(".iteam-strategy-name-case").html(`${this.translation("strategy.name.bbLine")}(1)`);
                                        n.append(k);
                                        n.append(t);
                                        let m = n.find(".cursor"),
                                            h = k.find(".context-menu-case");
                                        (async () => {
                                            for (;;) try {
                                                if (v) break;
                                                t.css({
                                                    display: "none"
                                                });
                                                t.find(".name").html(`${this.translation("strategy.name.bbLine")}(1)`);
                                                t.find(".iteam-strategy-name-case").html(`${this.translation("strategy.name.bbLine")}(1)`);
                                                await b(1E3);
                                                k.css({
                                                    display: "flex"
                                                });
                                                m.css({
                                                    top: "20px",
                                                    left: "57px"
                                                });
                                                await b(500);
                                                k.addClass("hover");
                                                await b(2200);
                                                m.attr("class", "cursor click-right");
                                                k.addClass("action");
                                                await b(100);
                                                k.removeClass("action");
                                                m.attr("class", "cursor");
                                                await b(150);
                                                k.addClass("context-menu-show");
                                                h.css({
                                                    top: "18px",
                                                    left: "65px",
                                                    opacity: "1"
                                                });
                                                await b(300);
                                                m.css({
                                                    top: "175px",
                                                    left: "120px"
                                                });
                                                await b(300);
                                                for (var e = 2; 7 > e; e++) h.find(`.iteam-context-case:nth-child(${e})`).addClass("hover"), await b(200), 6 > e ? h.find(`.iteam-context-case:nth-child(${e})`).removeClass("hover") : (await b(1E3), m.attr("class", "cursor click-left"), h.find(`.iteam-context-case:nth-child(${e})`).addClass("action"), await b(100), h.find(`.iteam-context-case:nth-child(${e})`).removeClass("action"),
                                                    m.attr("class", "cursor"), k.removeClass("hover"), await b(150), k.removeClass("context-menu-show"), h.find(`.iteam-context-case:nth-child(${e})`).removeClass("hover"), h.css({
                                                        top: "18px",
                                                        left: "65px",
                                                        opacity: "0"
                                                    }));
                                                await b(150);
                                                t.css({
                                                    display: "flex"
                                                });
                                                t.addClass("edit");
                                                let g = t.find('input[name="nameIdit"]');
                                                g.val(t.find("div.name").html());
                                                g.focus().select();
                                                await b(700);
                                                g.val("");
                                                let q = this.translation("strategy.name.grail");
                                                e = "";
                                                for (let p = 0; p < q.length; p++) e += q[p], g.val(e), await b(250);
                                                t.find(".name").html(e);
                                                await b(700);
                                                m.attr("class", "cursor click-left");
                                                await b(150);
                                                m.attr("class", "cursor");
                                                await b(100);
                                                t.removeClass("edit");
                                                await b(700);
                                                m.css({
                                                    top: "0px",
                                                    left: "0px"
                                                });
                                                await b(700);
                                                k.addClass("hover");
                                                await b(300);
                                                k.removeClass("hover");
                                                await b(1E3)
                                            } catch {
                                                break
                                            }
                                        })();
                                        return n
                                    },
                                    Ka = () => {
                                        this.runEvent("liveStop", !0);
                                        this.on("liveStop", "liveFunction", () => {});
                                        let v = ca.clone();
                                        v.addClass("settings");
                                        let n = za.clone();
                                        n.find(".group-assets-case");
                                        let k = n.find(".search-result-asset-case");
                                        v.append(n);
                                        v.find(".cursor");
                                        this.storage.availableAssets.filter(t => "currency" == t.group).forEach(t => {
                                            let m = 0 < t.id.indexOf("otc") ? "append" : "prepend",
                                                h = Y(t).filter(g => void 0 != g),
                                                e = $("<div></div>");
                                            for (let g = 0; g < h.length; g++) e.append(`<span class="flag-icon flag-icon--${h[g]}"></span>`);
                                            k[m](`
                                    <div class="wrap">
                                        <input type="checkbox" id="${t.id}"/>
                                        <label class="iteam-asset-case" for="${t.id}"> 
                                            <div class="img-bg-asset ${1==h.length?"flag-one":""}">${e.html()}</div>
                                            <div class="title-asset">${t.title}</div>
                                        </label>
                                    </div>
                                `)
                                        });
                                        return v
                                    },
                                    ab = () => {
                                        this.runEvent("liveStop", !0);
                                        let v = !1;
                                        this.on("liveStop", "liveFunction", () => {
                                            v = !0
                                        });
                                        let n = ca.clone();
                                        n.addClass("settings");
                                        let k = za.clone(),
                                            t = k.find(".group-assets-case"),
                                            m = k.find(".search-result-asset-case");
                                        n.append(k);
                                        let h = n.find(".cursor");
                                        (async () => {
                                            for (;;) try {
                                                if (v) break;
                                                t.find(".iteam-group-case").removeClass("activ");
                                                t.find(".iteam-group-case.currency").addClass("activ");
                                                await b(100);
                                                h.css({
                                                    left: "60px",
                                                    top: "75px"
                                                });
                                                let e = this.storage.availableAssets.filter(g =>
                                                    "currency" == g.group);
                                                e.forEach(g => {
                                                    let q = 0 < g.id.indexOf("otc") ? "append" : "prepend",
                                                        p = Y(g).filter(f => void 0 != f),
                                                        l = $("<div></div>");
                                                    for (let f = 0; f < p.length; f++) l.append(`<span class="flag-icon flag-icon--${p[f]}"></span>`);
                                                    m[q](`
                                                <div class="wrap">
                                                    <input type="checkbox" id="${g.id}"/>
                                                    <label class="iteam-asset-case" for="${g.id}"> 
                                                        <div class="img-bg-asset ${1==p.length?"flag-one":""}">${l.html()}</div>
                                                        <div class="title-asset">${g.title}</div>
                                                    </label>
                                                </div>
                                            `)
                                                });
                                                await b(1E3);
                                                t.find(".iteam-group-case.cryptocurrency").addClass("hover");
                                                await b(1E3);
                                                await b(300);
                                                h.attr("class", "cursor click-left");
                                                t.find(".iteam-group-case").removeClass("activ");
                                                await b(150);
                                                h.attr("class", "cursor");
                                                t.find(".iteam-group-case.cryptocurrency").addClass("activ");
                                                t.find(".iteam-group-case.cryptocurrency").removeClass("hover");
                                                m.removeClass("show");
                                                await b(150);
                                                m.html("");
                                                e = this.storage.availableAssets.filter(g => "cryptocurrency" ==
                                                    g.group);
                                                e.forEach(g => {
                                                    let q = 0 < g.id.indexOf("otc") ? "append" : "prepend",
                                                        p = Y(g).filter(f => void 0 != f),
                                                        l = $("<div></div>");
                                                    for (let f = 0; f < p.length; f++) l.append(`<span class="flag-icon flag-icon--${p[f]}"></span>`);
                                                    m[q](`
                                                <div class="wrap">
                                                    <input type="checkbox" id="${g.id}"/>
                                                    <label class="iteam-asset-case" for="${g.id}"> 
                                                        <div class="img-bg-asset ${1==p.length?"flag-one":""}">${l.html()}</div>
                                                        <div class="title-asset">${g.title}</div>
                                                    </label>
                                                </div>
                                            `)
                                                });
                                                await b(150);
                                                m.addClass("show");
                                                h.css({
                                                    left: "60px",
                                                    top: "110px"
                                                });
                                                await b(1E3);
                                                t.find(".iteam-group-case.commodity").addClass("hover");
                                                await b(1E3);
                                                h.attr("class", "cursor click-left");
                                                t.find(".iteam-group-case").removeClass("activ");
                                                await b(150);
                                                h.attr("class", "cursor");
                                                t.find(".iteam-group-case.commodity").addClass("activ");
                                                t.find(".iteam-group-case.commodity").removeClass("hover");
                                                m.removeClass("show");
                                                await b(150);
                                                m.html("");
                                                e = this.storage.availableAssets.filter(g =>
                                                    "commodity" == g.group);
                                                e.forEach(g => {
                                                    let q = 0 < g.id.indexOf("otc") ? "append" : "prepend",
                                                        p = Y(g).filter(f => void 0 != f),
                                                        l = $("<div></div>");
                                                    for (let f = 0; f < p.length; f++) l.append(`<span class="flag-icon flag-icon--${p[f]}"></span>`);
                                                    m[q](`
                                                <div class="wrap">
                                                    <input type="checkbox" id="${g.id}"/>
                                                    <label class="iteam-asset-case" for="${g.id}"> 
                                                        <div class="img-bg-asset ${1==p.length?"flag-one":""}">${l.html()}</div>
                                                        <div class="title-asset">${g.title}</div>
                                                    </label>
                                                </div>
                                            `)
                                                });
                                                await b(150);
                                                m.addClass("show");
                                                h.css({
                                                    left: "60px",
                                                    top: "145px"
                                                });
                                                await b(1E3);
                                                t.find(".iteam-group-case.stock").addClass("hover");
                                                await b(1E3);
                                                h.attr("class", "cursor click-left");
                                                t.find(".iteam-group-case").removeClass("activ");
                                                await b(150);
                                                h.attr("class", "cursor");
                                                t.find(".iteam-group-case.stock").addClass("activ");
                                                t.find(".iteam-group-case.stock").removeClass("hover");
                                                m.removeClass("show");
                                                await b(150);
                                                m.html("");
                                                e = this.storage.availableAssets.filter(g =>
                                                    "stock" == g.group);
                                                e.forEach(g => {
                                                    let q = 0 < g.id.indexOf("otc") ? "append" : "prepend",
                                                        p = Y(g).filter(f => void 0 != f),
                                                        l = $("<div></div>");
                                                    for (let f = 0; f < p.length; f++) l.append(`<span class="flag-icon flag-icon--${p[f]}"></span>`);
                                                    m[q](`
                                                <div class="wrap">
                                                    <input type="checkbox" id="${g.id}"/>
                                                    <label class="iteam-asset-case" for="${g.id}"> 
                                                        <div class="img-bg-asset ${1==p.length?"flag-one":""}">${l.html()}</div>
                                                        <div class="title-asset">${g.title}</div>
                                                    </label>
                                                </div>
                                            `)
                                                });
                                                await b(150);
                                                m.addClass("show");
                                                h.css({
                                                    left: "60px",
                                                    top: "180px"
                                                });
                                                await b(1E3);
                                                t.find(".iteam-group-case.index").addClass("hover");
                                                await b(1E3);
                                                h.attr("class", "cursor click-left");
                                                t.find(".iteam-group-case").removeClass("activ");
                                                await b(150);
                                                h.attr("class", "cursor");
                                                t.find(".iteam-group-case.index").addClass("activ");
                                                t.find(".iteam-group-case.index").removeClass("hover");
                                                m.removeClass("show");
                                                await b(150);
                                                m.html("");
                                                e = this.storage.availableAssets.filter(g =>
                                                    "index" == g.group);
                                                e.forEach(g => {
                                                    let q = 0 < g.id.indexOf("otc") ? "append" : "prepend",
                                                        p = Y(g).filter(f => void 0 != f),
                                                        l = $("<div></div>");
                                                    for (let f = 0; f < p.length; f++) l.append(`<span class="flag-icon flag-icon--${p[f]}"></span>`);
                                                    m[q](`
                                                <div class="wrap">
                                                    <input type="checkbox" id="${g.id}"/>
                                                    <label class="iteam-asset-case" for="${g.id}"> 
                                                        <div class="img-bg-asset ${1==p.length?"flag-one":""}">${l.html()}</div>
                                                        <div class="title-asset">${g.title}</div>
                                                    </label>
                                                </div>
                                            `)
                                                });
                                                await b(150);
                                                m.addClass("show");
                                                h.css({
                                                    left: "60px",
                                                    top: "40px"
                                                });
                                                await b(100);
                                                t.find(".iteam-group-case.stock").addClass("hover");
                                                await b(150);
                                                t.find(".iteam-group-case.stock").removeClass("hover");
                                                await b(100);
                                                t.find(".iteam-group-case.commodity").addClass("hover");
                                                await b(150);
                                                t.find(".iteam-group-case.commodity").removeClass("hover");
                                                await b(100);
                                                t.find(".iteam-group-case.cryptocurrency").addClass("hover");
                                                await b(150);
                                                t.find(".iteam-group-case.cryptocurrency").removeClass("hover");
                                                await b(130);
                                                t.find(".iteam-group-case.currency").addClass("hover");
                                                await b(1E3);
                                                h.attr("class", "cursor click-left");
                                                t.find(".iteam-group-case").removeClass("activ");
                                                await b(150);
                                                h.attr("class", "cursor");
                                                t.find(".iteam-group-case.currency").addClass("activ");
                                                t.find(".iteam-group-case.currency").removeClass("hover");
                                                m.removeClass("show");
                                                await b(150);
                                                m.html("");
                                                e = this.storage.availableAssets.filter(g => "currency" == g.group);
                                                e.forEach(g => {
                                                    let q = 0 < g.id.indexOf("otc") ? "append" : "prepend",
                                                        p = Y(g).filter(f =>
                                                            void 0 != f),
                                                        l = $("<div></div>");
                                                    for (let f = 0; f < p.length; f++) l.append(`<span class="flag-icon flag-icon--${p[f]}"></span>`);
                                                    m[q](`
                                                <div class="wrap">
                                                    <input type="checkbox" id="${g.id}"/>
                                                    <label class="iteam-asset-case" for="${g.id}"> 
                                                        <div class="img-bg-asset ${1==p.length?"flag-one":""}">${l.html()}</div>
                                                        <div class="title-asset">${g.title}</div>
                                                    </label>
                                                </div>
                                            `)
                                                });
                                                await b(150);
                                                m.addClass("show")
                                            } catch {
                                                break
                                            }
                                        })();
                                        return n
                                    },
                                    U = () => {
                                        this.runEvent("liveStop", !0);
                                        let v = !1;
                                        this.on("liveStop", "liveFunction", () => {
                                            v = !0
                                        });
                                        let n = ca.clone();
                                        n.addClass("settings");
                                        let k = za.clone(),
                                            t = k.find(".group-assets-case"),
                                            m = k.find(".search-result-asset-case");
                                        n.append(k);
                                        let h = n.find(".cursor");
                                        (async () => {
                                            for (;;) try {
                                                if (v) break;
                                                await b(100);
                                                let e = [];
                                                t.find(".iteam-group-case").removeClass("activ");
                                                t.find(".iteam-group-case.currency").addClass("activ");
                                                let g = this.storage.availableAssets.filter(c => "currency" == c.group);
                                                g.forEach(c => {
                                                    let r = 0 < c.id.indexOf("otc") ? "append" : "prepend",
                                                        u = Y(c).filter(B => void 0 != B),
                                                        A = $("<div></div>");
                                                    for (let B = 0; B < u.length; B++) A.append(`<span class="flag-icon flag-icon--${u[B]}"></span>`);
                                                    m[r](`
                                                <div class="wrap">
                                                    <input type="checkbox" id="${c.id}"/>
                                                    <label class="iteam-asset-case" for="${c.id}"> 
                                                        <div class="img-bg-asset ${1==u.length?"flag-one":""}">${A.html()}</div>
                                                        <div class="title-asset">${c.title}</div>
                                                    </label>
                                                </div>
                                            `)
                                                });
                                                let q = m.find(".wrap:nth-child(1)"),
                                                    p = q.offset(),
                                                    l = n.offset();
                                                p.top -= l.top - 20;
                                                p.left -= l.left - 40;
                                                h.css(p);
                                                await b(2300);
                                                h.attr("class", "cursor click-left");
                                                await b(150);
                                                h.attr("class", "cursor");
                                                q.find("input").attr("checked", "checked");
                                                await b(500);
                                                q = m.find(".wrap:nth-child(3)");
                                                e.push(q.find("input").attr("id"));
                                                p = q.offset();
                                                l = n.offset();
                                                p.top -= l.top - 20;
                                                p.left -= l.left - 40;
                                                h.css(p);
                                                await b(2300);
                                                h.attr("class", "cursor click-left");
                                                await b(150);
                                                h.attr("class",
                                                    "cursor");
                                                q.find("input").attr("checked", "checked");
                                                await b(500);
                                                q = m.find(".wrap:nth-child(6)");
                                                e.push(q.find("input").attr("id"));
                                                p = q.offset();
                                                l = n.offset();
                                                p.top -= l.top - 20;
                                                p.left -= l.left - 40;
                                                h.css(p);
                                                await b(2300);
                                                h.attr("class", "cursor click-left");
                                                await b(150);
                                                h.attr("class", "cursor");
                                                q.find("input").attr("checked", "checked");
                                                await b(500);
                                                q = m.find(".wrap:nth-child(1)");
                                                p = q.offset();
                                                l = n.offset();
                                                p.top -= l.top - 20;
                                                p.left -= l.left - 40;
                                                h.css(p);
                                                await b(2300);
                                                h.attr("class", "cursor click-left");
                                                await b(150);
                                                h.attr("class", "cursor");
                                                q.find("input").removeAttr("checked");
                                                await b(500);
                                                let f = t.find(".iteam-group-case.selected"),
                                                    d = f.offset();
                                                l = n.offset();
                                                d.top -= l.top - 10;
                                                d.left -= l.left - 40;
                                                h.css(d);
                                                await b(1E3);
                                                f.addClass("hover");
                                                await b(1300);
                                                h.attr("class", "cursor click-left");
                                                t.find(".iteam-group-case").removeClass("activ");
                                                await b(150);
                                                h.attr("class", "cursor");
                                                t.find(".iteam-group-case.selected").addClass("activ");
                                                f.removeClass("hover");
                                                m.removeClass("show");
                                                await b(300);
                                                m.html("");
                                                g = this.storage.availableAssets.filter(c =>
                                                    e.includes(c.id));
                                                g.forEach(c => {
                                                    let r = 0 < c.id.indexOf("otc") ? "append" : "prepend",
                                                        u = Y(c).filter(B => void 0 != B),
                                                        A = $("<div></div>");
                                                    for (let B = 0; B < u.length; B++) A.append(`<span class="flag-icon flag-icon--${u[B]}"></span>`);
                                                    m[r](`
                                                <div class="wrap">
                                                    <input type="checkbox" id="${c.id}" checked="checked"/>
                                                    <label class="iteam-asset-case" for="${c.id}"> 
                                                        <div class="img-bg-asset ${1==u.length?"flag-one":""}">${A.html()}</div>
                                                        <div class="title-asset">${c.title}</div>
                                                    </label>
                                                </div>
                                            `)
                                                });
                                                m.addClass("show");
                                                await b(1E3);
                                                f = t.find(".iteam-group-case.currency");
                                                d = f.offset();
                                                l = n.offset();
                                                d.top -= l.top - 10;
                                                d.left -= l.left - 40;
                                                h.css(d);
                                                await b(1E3);
                                                f.addClass("hover");
                                                await b(1300);
                                                h.attr("class", "cursor click-left");
                                                t.find(".iteam-group-case").removeClass("activ");
                                                await b(150);
                                                h.attr("class", "cursor");
                                                t.find(".iteam-group-case.currency").addClass("activ");
                                                f.removeClass("hover");
                                                m.removeClass("show");
                                                await b(300);
                                                m.html("");
                                                g = this.storage.availableAssets.filter(c =>
                                                    "currency" == c.group);
                                                g.forEach(c => {
                                                    let r = 0 < c.id.indexOf("otc") ? "append" : "prepend",
                                                        u = Y(c).filter(B => void 0 != B),
                                                        A = $("<div></div>");
                                                    for (let B = 0; B < u.length; B++) A.append(`<span class="flag-icon flag-icon--${u[B]}"></span>`);
                                                    m[r](`
                                                <div class="wrap">
                                                    <input type="checkbox" id="${c.id}" ${e.includes(c.id)?'checked="checked"':""} />
                                                    <label class="iteam-asset-case" for="${c.id}"> 
                                                        <div class="img-bg-asset ${1==u.length?"flag-one":""}">${A.html()}</div>
                                                        <div class="title-asset">${c.title}</div>
                                                    </label>
                                                </div>
                                            `)
                                                });
                                                m.addClass("show");
                                                b(1E3);
                                                let a = k.find('[action="selectall"]');
                                                d = a.offset();
                                                l = n.offset();
                                                d.top -= l.top - 10;
                                                d.left -= l.left - 20;
                                                h.css(d);
                                                await b(2300);
                                                h.attr("class", "cursor click-left");
                                                await b(150);
                                                h.attr("class", "cursor");
                                                a.html(this.translation("action.removeall"));
                                                m.find("input").attr("checked", "checked");
                                                await b(1E3);
                                                h.attr("class", "cursor click-left");
                                                await b(150);
                                                h.attr("class", "cursor");
                                                a.html(this.translation("action.selectall"));
                                                m.find("input").removeAttr("checked");
                                                await b(1E3);
                                                h.css({
                                                    top: 0,
                                                    left: 0
                                                });
                                                await b(2E3)
                                            } catch {
                                                break
                                            }
                                        })();
                                        return n
                                    },
                                    Da = () => {
                                        this.runEvent("liveStop", !0);
                                        let v = !1;
                                        this.on("liveStop", "liveFunction", () => {
                                            v = !0
                                        });
                                        let n = ca.clone();
                                        n.addClass("settings");
                                        let k = za.clone(),
                                            t = k.find(".group-assets-case"),
                                            m = k.find(".search-result-asset-case");
                                        n.append(k);
                                        let h = n.find(".cursor");
                                        (async () => {
                                            for (;;) try {
                                                if (v) break;
                                                await b(100);
                                                t.find(".iteam-group-case").removeClass("activ");
                                                t.find(".iteam-group-case.currency").addClass("activ");
                                                let e = this.storage.availableAssets.filter(f =>
                                                    "currency" == f.group);
                                                e.forEach(f => {
                                                    let d = 0 < f.id.indexOf("otc") ? "append" : "prepend",
                                                        a = Y(f).filter(r => void 0 != r),
                                                        c = $("<div></div>");
                                                    for (let r = 0; r < a.length; r++) c.append(`<span class="flag-icon flag-icon--${a[r]}"></span>`);
                                                    m[d](`
                                                <div class="wrap">
                                                    <input type="checkbox" id="${f.id}"/>
                                                    <label class="iteam-asset-case" for="${f.id}"> 
                                                        <div class="img-bg-asset ${1==a.length?"flag-one":""}">${c.html()}</div>
                                                        <div class="title-asset">${f.title}</div>
                                                    </label>
                                                </div>
                                            `)
                                                });
                                                let g = k.find('[name="searchAsset"]'),
                                                    q = g.offset(),
                                                    p = n.offset();
                                                q.top -= p.top - 10;
                                                q.left -= p.left - 100;
                                                h.css(q);
                                                await b(2300);
                                                h.attr("class", "cursor click-left");
                                                await b(150);
                                                h.attr("class", "cursor");
                                                g.focus();
                                                await b(800);
                                                let l = "";
                                                for (let f = 0; 6 > f; f++) {
                                                    l += "eurusd" [f];
                                                    g.val(l);
                                                    let d = l,
                                                        a = ":" == d[0];
                                                    0 == f && t.find(".iteam-group-case").addClass("deactivated");
                                                    let c = [];
                                                    if (a) try {
                                                        a = new RegExp(d.substring(1)), c = this.storage.availableAssets.filter(r => a.test(r.id.toLowerCase()) ||
                                                            a.test(r.title.toLowerCase()))
                                                    } catch {} else c = this.storage.availableAssets.filter(r => r.id.toLowerCase().indexOf(d.toLowerCase()) + 1 || r.title.toLowerCase().indexOf(d.toLowerCase()) + 1);
                                                    m.html("");
                                                    c.forEach(r => {
                                                        let u = 0 < r.id.indexOf("otc") ? "append" : "prepend",
                                                            A = Y(r).filter(C => void 0 != C),
                                                            B = $("<div></div>");
                                                        for (let C = 0; C < A.length; C++) B.append(`<span class="flag-icon flag-icon--${A[C]}"></span>`);
                                                        m[u](`
                                                    <div class="wrap">
                                                        <input type="checkbox" id="${r.id}"/>
                                                        <label class="iteam-asset-case" for="${r.id}"> 
                                                            <div class="img-bg-asset ${1==A.length?"flag-one":""}">${B.html()}</div>
                                                            <div class="title-asset">${r.title}</div>
                                                        </label>
                                                    </div>
                                                `)
                                                    });
                                                    await b(500)
                                                }
                                                await b(2E3);
                                                g.val("");
                                                g.blur();
                                                m.removeClass("show");
                                                await b(300);
                                                m.html("");
                                                e = this.storage.availableAssets.filter(f => "currency" == f.group);
                                                e.forEach(f => {
                                                    let d = 0 < f.id.indexOf("otc") ? "append" : "prepend",
                                                        a = Y(f).filter(r => void 0 != r),
                                                        c = $("<div></div>");
                                                    for (let r = 0; r < a.length; r++) c.append(`<span class="flag-icon flag-icon--${a[r]}"></span>`);
                                                    m[d](`
                                                <div class="wrap">
                                                    <input type="checkbox" id="${f.id}"/>
                                                    <label class="iteam-asset-case" for="${f.id}"> 
                                                        <div class="img-bg-asset ${1==a.length?"flag-one":""}">${c.html()}</div>
                                                        <div class="title-asset">${f.title}</div>
                                                    </label>
                                                </div>
                                            `)
                                                });
                                                m.addClass("show");
                                                t.find(".iteam-group-case").removeClass("deactivated");
                                                await b(1E3);
                                                q = t.find(".iteam-group-case.currency").offset();
                                                p = n.offset();
                                                q.top -= p.top - 10;
                                                q.left -= p.left - 40;
                                                h.css(q);
                                                await b(2500)
                                            } catch {
                                                break
                                            }
                                        })();
                                        return n
                                    },
                                    ua = () => {
                                        this.runEvent("liveStop", !0);
                                        this.on("liveStop", "liveFunction", () => {});
                                        let v = ca.clone();
                                        v.addClass("settings");
                                        let n = xa.clone(),
                                            k = n.find(".available-indicators-case"),
                                            t = n.find("ul.used-indicators-list");
                                        n.find(".view-indicators-case");
                                        this.configuration.availableIndicators.forEach((h, e) => {
                                            k.append(`
                                   <div class="iteam-indicators-case" indicator="${h.otherData.iconImg}">
                                        <img class="img-icon" src="../img/indicators/${h.otherData.iconImg}">
                                        <div class="title">${this.translation(`indicators.names.${h.id}`)}</div>
                                        <div class="action icon add"></div>
                                    </div> 
                                `)
                                        });
                                        t.append(W(this.configuration.availableIndicators.find(h => "bb" == h.id)));
                                        t.append(W(this.configuration.availableIndicators.find(h => "rsi" == h.id)));
                                        v.append(n);
                                        v.find(".cursor");
                                        v.find(".curtain").addClass("shaded");
                                        let m = $('<div class="general-information hide"></div>');
                                        b(10).then(() => {
                                            m.html(this.translation("manual.pages.generalInformationIcators"));
                                            let h = v.offset(),
                                                e = t.offset();
                                            e.top -= h.top;
                                            e.left -= h.left;
                                            m.css(e);
                                            m.removeClass("hide");
                                            setTimeout(() => {
                                                    m.addClass("show")
                                                },
                                                10)
                                        }).catch(console.log);
                                        v.append(m);
                                        return v
                                    },
                                    Pa = () => {
                                        this.runEvent("liveStop", !0);
                                        let v = !1;
                                        this.on("liveStop", "liveFunction", () => {
                                            v = !0
                                        });
                                        let n = ca.clone();
                                        n.addClass("settings");
                                        let k = xa.clone(),
                                            t = k.find(".available-indicators-case"),
                                            m = k.find("ul.used-indicators-list");
                                        k.find(".view-indicators-case");
                                        let h = k.find(".empty-indicators-list");
                                        h.addClass("show");
                                        this.configuration.availableIndicators.forEach((g, q) => {
                                            t.append(`
                                   <div class="iteam-indicators-case" indicator="${g.id}">
                                        <img class="img-icon" src="../img/indicators/${g.otherData.iconImg}">
                                        <div class="title">${this.translation(`indicators.names.${g.id}`)}</div>
                                        <div class="action icon add"></div>
                                    </div> 
                                `)
                                        });
                                        n.append(k);
                                        let e = n.find(".cursor");
                                        (async () => {
                                            await b(100);
                                            if (605 > n.width()) return n.css({
                                                opacity: 1,
                                                width: n.width,
                                                height: n.height()
                                            }), n.trigger("stopped"), n.html(`
                                        <div class="not-screen-size-case">
                                            <div class="content-wrap">
                                                <div class="icon isError"></div>
                                                <div class="text"> ${this.translation("warnings.notEnoughScreenWidth")}</div>
                                            </div>
                                        </div> 
                                    `);
                                            for (;;) try {
                                                if (v) break;
                                                await b(100);
                                                let g = t.find('[indicator="bb"] .action.add'),
                                                    q = g.offset(),
                                                    p = n.offset();
                                                q.top -= p.top - 6;
                                                q.left -= p.left + 6;
                                                e.css(q);
                                                await b(1E3);
                                                g.parent(".iteam-indicators-case").addClass("hover");
                                                await b(1E3);
                                                g.addClass("hover");
                                                await b(800);
                                                e.attr("class", "cursor click-left");
                                                await b(100);
                                                e.attr("class", "cursor");
                                                await b(100);
                                                h.removeClass("show");
                                                let l = W(this.configuration.availableIndicators.find(a => "bb" == a.id), !0);
                                                m.append(l);
                                                await b(300);
                                                l.addClass("unwrap");
                                                let f = l,
                                                    d = g;
                                                g = t.find('[indicator="rsi"]');
                                                q = g.offset();
                                                p = n.offset();
                                                q.top -= p.top - 10;
                                                q.left -= p.left - 70;
                                                e.css(q);
                                                await b(300);
                                                d.removeClass("hover");
                                                await b(700);
                                                d.parent(".iteam-indicators-case").removeClass("hover");
                                                g.addClass("hover");
                                                await b(1E3);
                                                g.addClass("hover");
                                                d = g;
                                                await b(800);
                                                e.attr("class", "cursor click-left");
                                                await b(100);
                                                e.attr("class", "cursor");
                                                await b(200);
                                                e.attr("class", "cursor click-left");
                                                await b(100);
                                                e.attr("class", "cursor");
                                                await b(100);
                                                l.removeClass("unwrap");
                                                l = W(this.configuration.availableIndicators.find(a => "rsi" == a.id), !0);
                                                m.append(l);
                                                await b(300);
                                                l.addClass("unwrap");
                                                await b(300);
                                                g = f.find(".icon.delete");
                                                q = g.offset();
                                                p = n.offset();
                                                q.top -= p.top - 6;
                                                q.left -= p.left;
                                                e.css(q);
                                                await b(300);
                                                d.removeClass("hover");
                                                await b(2E3);
                                                e.attr("class", "cursor click-left");
                                                await b(100);
                                                e.attr("class", "cursor");
                                                await b(100);
                                                f.addClass("remove");
                                                await b(300);
                                                f.remove();
                                                await b(500);
                                                g = l.find(".icon.delete");
                                                q = g.offset();
                                                p = n.offset();
                                                q.top -= p.top - 6;
                                                q.left -= p.left;
                                                e.css(q);
                                                await b(2300);
                                                e.attr("class", "cursor click-left");
                                                await b(100);
                                                e.attr("class", "cursor");
                                                await b(100);
                                                l.addClass("remove");
                                                await b(300);
                                                l.remove();
                                                h.addClass("show");
                                                await b(1E3)
                                            } catch {
                                                break
                                            }
                                        })();
                                        return n
                                    },
                                    Ua = () => {
                                        this.runEvent("liveStop", !0);
                                        this.on("liveStop", "liveFunction", () => {});
                                        let v = ca.clone();
                                        v.addClass("settings");
                                        let n = xa.clone(),
                                            k = n.find(".available-indicators-case");
                                        n.find("ul.used-indicators-list");
                                        n.find(".view-indicators-case");
                                        n.find(".empty-indicators-list").addClass("show");
                                        this.configuration.availableIndicators.forEach((t,
                                            m) => {
                                            k.append(`
                                   <div class="iteam-indicators-case" indicator="${t.otherData.iconImg}">
                                        <img class="img-icon" src="../img/indicators/${t.otherData.iconImg}">
                                        <div class="title">${this.translation(`indicators.names.${t.id}`)}</div>
                                        <div class="action icon add"></div>
                                    </div> 
                                `)
                                        });
                                        v.append(n);
                                        v.find(".cursor");
                                        v.find(".curtain").addClass("shaded");
                                        return v
                                    },
                                    Ma = () => {
                                        this.runEvent("liveStop", !0);
                                        let v = !1;
                                        this.on("liveStop", "liveFunction", () => {
                                            v = !0
                                        });
                                        let n = ca.clone();
                                        n.addClass("settings");
                                        let k = xa.clone(),
                                            t = k.find(".available-indicators-case"),
                                            m = k.find("ul.used-indicators-list");
                                        k.find(".view-indicators-case");
                                        let h = k.find(".empty-indicators-list");
                                        h.addClass("show");
                                        this.configuration.availableIndicators.forEach((g, q) => {
                                            t.append(`
                                   <div class="iteam-indicators-case" indicator="${g.id}">
                                        <img class="img-icon" src="../img/indicators/${g.otherData.iconImg}">
                                        <div class="title">${this.translation(`indicators.names.${g.id}`)}</div>
                                        <div class="action icon add"></div>
                                    </div> 
                                `)
                                        });
                                        n.append(k);
                                        let e = n.find(".cursor");
                                        (async () => {
                                            try {
                                                await b(100);
                                                if (605 > n.width()) return n.css({
                                                    opacity: 1,
                                                    width: n.width,
                                                    height: n.height()
                                                }), n.trigger("stopped"), n.html(`
                                            <div class="not-screen-size-case">
                                                <div class="content-wrap">
                                                    <div class="icon isError"></div>
                                                    <div class="text"> ${this.translation("warnings.notEnoughScreenWidth")}</div>
                                                </div>
                                            </div> 
                                        `);
                                                for (;;) try {
                                                    if (v) break;
                                                    await b(100);
                                                    m.html("");
                                                    h.addClass("show");
                                                    let g = t.find('[indicator="api"] .action.add'),
                                                        q = g.offset(),
                                                        p = n.offset();
                                                    q.top -= p.top - 6;
                                                    q.left -= p.left + 6;
                                                    e.css(q);
                                                    await b(1E3);
                                                    g.parent(".iteam-indicators-case").addClass("hover");
                                                    await b(700);
                                                    g.addClass("hover");
                                                    await b(300);
                                                    await b(800);
                                                    e.attr("class", "cursor click-left");
                                                    await b(100);
                                                    e.attr("class", "cursor");
                                                    await b(100);
                                                    h.removeClass("show");
                                                    let l = W(this.configuration.availableIndicators.find(r =>
                                                        "api" == r.id), !0);
                                                    m.append(l);
                                                    await b(300);
                                                    l.addClass("unwrap");
                                                    await b(400);
                                                    g.parent(".iteam-indicators-case").removeClass("hover");
                                                    g.removeClass("hover");
                                                    let f = l.find('.indicator-settings-case .iteam-settings[name="server"]');
                                                    g = f.find(".title-settings");
                                                    q = g.offset();
                                                    p = n.offset();
                                                    q.top -= p.top - 10;
                                                    q.left -= p.left + 10;
                                                    e.css(q);
                                                    await b(2500);
                                                    g.addClass("highlight");
                                                    q.left += g.width();
                                                    e.css(q);
                                                    await b(2E3);
                                                    let d = f.find(".custom-input-select");
                                                    g = d.find(".icon.selectwrap");
                                                    q = g.offset();
                                                    p = n.offset();
                                                    q.top -=
                                                        p.top - 7;
                                                    q.left -= p.left + 3;
                                                    e.css(q);
                                                    await b(2300);
                                                    e.attr("class", "cursor click-left");
                                                    await b(100);
                                                    e.attr("class", "cursor");
                                                    d.addClass("showselect");
                                                    await b(400);
                                                    g = d.find(".option-case").find(".option:nth-child(2)");
                                                    q = g.offset();
                                                    p = n.offset();
                                                    q.top -= p.top - 10;
                                                    q.left -= p.left - 10;
                                                    e.css(q);
                                                    await b(1E3);
                                                    g.addClass("hover");
                                                    await b(1E3);
                                                    e.attr("class", "cursor click-left");
                                                    await b(100);
                                                    e.attr("class", "cursor");
                                                    d.removeClass("showselect");
                                                    g.removeClass("hover");
                                                    d.find(".select-case .value").html(g.html());
                                                    await b(1E3);
                                                    f.find(".title-settings").removeClass("highlight");
                                                    f = l.find('.indicator-settings-case .iteam-settings[name="indId"]');
                                                    g = f.find(".title-settings");
                                                    q = g.offset();
                                                    p = n.offset();
                                                    q.top -= p.top - 10;
                                                    q.left -= p.left + 10;
                                                    e.css(q);
                                                    await b(2500);
                                                    g.addClass("highlight");
                                                    q.left += g.width();
                                                    e.css(q);
                                                    await b(2E3);
                                                    g = f.find(".icon.copy");
                                                    q = g.offset();
                                                    p = n.offset();
                                                    q.top -= p.top - 10;
                                                    q.left -= p.left;
                                                    e.css(q);
                                                    await b(2E3);
                                                    await b(300);
                                                    e.attr("class", "cursor click-left");
                                                    await b(100);
                                                    e.attr("class", "cursor");
                                                    await b(100);
                                                    g.find(".isCopied.icon").removeClass("hide");
                                                    await b(600);
                                                    g.find(".isCopied.icon").addClass("hide");
                                                    await b(2E3);
                                                    let a = $('<div class="scrin-case"></div>'),
                                                        c = $('<img src="../img/screenshots/tradingview_1.png" />');
                                                    a.html(c);
                                                    n.append(a);
                                                    await b(500);
                                                    c.css({
                                                        transform: "scale(2.5) translateY(20%)"
                                                    });
                                                    await b(3E3);
                                                    c.css({
                                                        transform: "scale(2.5) translateY(-15%)"
                                                    });
                                                    await b(5E3);
                                                    c.css({
                                                        transform: "none"
                                                    });
                                                    await b(3E3);
                                                    c.attr("src", "../img/screenshots/tradingview_2.png");
                                                    await b(500);
                                                    c.css({
                                                        transform: "scale(2.5) translateY(20%)"
                                                    });
                                                    await b(3E3);
                                                    c.css({
                                                        transform: "scale(2.5) translateY(-15%)"
                                                    });
                                                    await b(5E3);
                                                    c.css({
                                                        transform: "none"
                                                    });
                                                    await b(3E3);
                                                    a.remove();
                                                    f.find(".title-settings").removeClass("highlight");
                                                    await b(1E3)
                                                } catch (g) {
                                                    break
                                                }
                                            } catch {}
                                        })();
                                        return n
                                    },
                                    wa = v => {
                                        this.runEvent("liveStop", !0);
                                        let n = !1;
                                        this.on("liveStop", "liveFunction", () => {
                                            n = !0
                                        });
                                        let k = ca.clone();
                                        k.addClass("settings");
                                        let t = xa.clone(),
                                            m = t.find(".available-indicators-case"),
                                            h = t.find("ul.used-indicators-list");
                                        t.find(".view-indicators-case");
                                        let e = t.find(".empty-indicators-list");
                                        e.addClass("show");
                                        this.configuration.availableIndicators.forEach((q,
                                            p) => {
                                            m.append(`
                                   <div class="iteam-indicators-case" indicator="${q.id}">
                                        <img class="img-icon" src="../img/indicators/${q.otherData.iconImg}">
                                        <div class="title">${this.translation(`indicators.names.${q.id}`)}</div>
                                        <div class="action icon add"></div>
                                    </div> 
                                `)
                                        });
                                        k.append(t);
                                        let g = k.find(".cursor");
                                        (async () => {
                                            try {
                                                await b(100);
                                                if (605 > k.width()) return k.css({
                                                    opacity: 1,
                                                    width: k.width,
                                                    height: k.height()
                                                }), k.trigger("stopped"), k.html(`
                                            <div class="not-screen-size-case">
                                                <div class="content-wrap">
                                                    <div class="icon isError"></div>
                                                    <div class="text"> ${this.translation("warnings.notEnoughScreenWidth")}</div>
                                                </div>
                                            </div> 
                                        `);
                                                let p = m.find('[indicator="bb"] .action.add'),
                                                    l = p.offset(),
                                                    f = k.offset();
                                                l.top -= f.top - 6;
                                                l.left -= f.left + 6;
                                                g.css(l);
                                                await b(1E3);
                                                p.parent(".iteam-indicators-case").addClass("hover");
                                                await b(700);
                                                p.addClass("hover");
                                                await b(300);
                                                await b(800);
                                                g.attr("class", "cursor click-left");
                                                await b(100);
                                                g.attr("class", "cursor");
                                                await b(100);
                                                e.removeClass("show");
                                                let d = W(this.configuration.availableIndicators.find(a => "bb" == a.id), !0);
                                                h.append(d);
                                                await b(300);
                                                d.addClass("unwrap");
                                                await b(400);
                                                p.parent(".iteam-indicators-case").removeClass("hover");
                                                for (p.removeClass("hover");;) try {
                                                    if (n) break;
                                                    await b(100);
                                                    let a = d.find(`.indicator-settings-case .iteam-settings[name="${v}"]`);
                                                    p = a.find(".title-settings");
                                                    l = p.offset();
                                                    f = k.offset();
                                                    l.top -= f.top - 10;
                                                    l.left -= f.left + 10;
                                                    g.css(l);
                                                    await b(2500);
                                                    p.addClass("highlight");
                                                    l.left += p.width();
                                                    g.css(l);
                                                    await b(2E3);
                                                    let c = a.find(".custom-input-select");
                                                    switch (c.attr("type")) {
                                                        case "select":
                                                            p = c.find(".icon.selectwrap");
                                                            l = p.offset();
                                                            f = k.offset();
                                                            l.top -=
                                                                f.top - 7;
                                                            l.left -= f.left + 3;
                                                            g.css(l);
                                                            await b(2300);
                                                            g.attr("class", "cursor click-left");
                                                            await b(100);
                                                            g.attr("class", "cursor");
                                                            c.addClass("showselect");
                                                            await b(400);
                                                            let r = c.find(".option-case");
                                                            p = r.find(".option:nth-child(2)");
                                                            l = p.offset();
                                                            f = k.offset();
                                                            l.top -= f.top - 10;
                                                            l.left -= f.left - 10;
                                                            g.css(l);
                                                            await b(1E3);
                                                            p.addClass("hover");
                                                            await b(1E3);
                                                            g.attr("class", "cursor click-left");
                                                            await b(100);
                                                            g.attr("class", "cursor");
                                                            c.removeClass("showselect");
                                                            p.removeClass("hover");
                                                            c.find(".select-case .value").html(p.html());
                                                            await b(1E3);
                                                            p = a.find(".icon.selectwrap");
                                                            l = p.offset();
                                                            f = k.offset();
                                                            l.top -= f.top - 7;
                                                            l.left -= f.left + 3;
                                                            g.css(l);
                                                            await b(2300);
                                                            g.attr("class", "cursor click-left");
                                                            await b(100);
                                                            g.attr("class", "cursor");
                                                            c = p.closest(".custom-input-select");
                                                            c.addClass("showselect");
                                                            await b(400);
                                                            r = c.find(".option-case");
                                                            p = r.find(".option:nth-child(1)");
                                                            l = p.offset();
                                                            f = k.offset();
                                                            l.top -= f.top - 10;
                                                            l.left -= f.left - 10;
                                                            g.css(l);
                                                            await b(700);
                                                            p.addClass("hover");
                                                            await b(1300);
                                                            g.attr("class", "cursor click-left");
                                                            await b(100);
                                                            g.attr("class",
                                                                "cursor");
                                                            c.removeClass("showselect");
                                                            p.removeClass("hover");
                                                            c.find(".select-case .value").html(p.html());
                                                            break;
                                                        case "number":
                                                            p = c.find('button[action="-"]');
                                                            l = p.offset();
                                                            f = k.offset();
                                                            l.top -= f.top - 7;
                                                            l.left -= f.left;
                                                            g.css(l);
                                                            await b(2300);
                                                            for (var q = 0; 4 > q; q++) g.attr("class", "cursor click-left"), p.addClass("active"), await b(100), g.attr("class", "cursor"), p.removeClass("active"), c.find('input[type="text"]').val(+c.find('input[type="text"]').val() - 1), await b(300);
                                                            p = c.find('button[action="+"]');
                                                            l = p.offset();
                                                            f = k.offset();
                                                            l.top -= f.top - 7;
                                                            l.left -= f.left;
                                                            g.css(l);
                                                            await b(2300);
                                                            for (q = 0; 4 > q; q++) g.attr("class", "cursor click-left"), p.addClass("active"), await b(100), g.attr("class", "cursor"), p.removeClass("active"), c.find('input[type="text"]').val(+c.find('input[type="text"]').val() + 1), await b(300)
                                                    }
                                                    await b(1E3);
                                                    a.find(".title-settings").removeClass("highlight")
                                                } catch {
                                                    break
                                                }
                                            } catch {}
                                        })();
                                        return k
                                    },
                                    Za = () => {
                                        this.runEvent("liveStop", !0);
                                        this.on("liveStop", "liveFunction", () => {});
                                        let v = (q, p) => {
                                                try {
                                                    return +q.toFixed(p.toString().split(".")[1].length)
                                                } catch (l) {
                                                    return q.toFixed(0)
                                                }
                                            },
                                            n = ca.clone();
                                        n.addClass("settings");
                                        let k = G.clone(),
                                            t = k.find(".wrap-regulations-list"),
                                            m = JSON.parse(JSON.stringify(this.configuration.availableRegulations));
                                        for (let q = 0; q < m.length; q++) {
                                            let p = m[q],
                                                l = $('<div class="iteam-settings"></div>');
                                            l.append(`<div class="title-settings">${this.translation(`regulations.settings.${p.id}`)}</div>`);
                                            l.append('<div class="stretch"></div>');
                                            l.append(`<div class="custom-input-select" type="${p.type}"> </div>`);
                                            l.on("click", '.custom-input-select[type="select"]', f => {
                                                let d =
                                                    $(f.currentTarget);
                                                if (d.hasClass("showselect")) {
                                                    if (null != f.target.closest(".option")) {
                                                        var a = $(f.target).attr("value");
                                                        f = $(f.target).html();
                                                        d.find(".select-case .value").html(f);
                                                        p.value = a
                                                    }
                                                    return d.removeClass("showselect")
                                                }
                                                $('.custom-input-select[type="select"]').removeClass("showselect");
                                                d.addClass("showselect")
                                            });
                                            l.on("click", ".custom-input-select button", f => {
                                                f = $(f.currentTarget);
                                                let d = f.siblings("input"),
                                                    a = +d.val(),
                                                    c = JSON.parse(d.attr("parms"));
                                                switch (f.attr("action")) {
                                                    case "+":
                                                        a += c[3];
                                                        a > c[2] &&
                                                            (a = c[2]);
                                                        break;
                                                    case "-":
                                                        a -= c[3], a < c[1] && (a = c[1])
                                                }
                                                d.val(v(a, c[3]));
                                                p.value = v(a, c[3])
                                            });
                                            l.on("keyup", ".custom-input-select input", f => {
                                                let d = $(f.currentTarget),
                                                    a = ["", " ", "-", "."],
                                                    c = +d.val();
                                                if (isNaN(c) && !a.includes(f.key)) d.val(p.value);
                                                else {
                                                    let r = JSON.parse(d.attr("parms"));
                                                    c > r[2] && (c = r[2]);
                                                    a.includes(f.key) || (p.value = v(c, r[3]), d.val(v(c, r[3])))
                                                }
                                            });
                                            l.on("keydown", ".custom-input-select input", f => {
                                                let d = ["Backspace", "-", "."];
                                                (isNaN(+f.key) && !d.includes(f.key) || " " == f.key) && f.preventDefault()
                                            });
                                            l.on("change",
                                                ".custom-input-select input", f => {
                                                    f = $(f.currentTarget);
                                                    let d = +f.val();
                                                    if (isNaN(d) || "" == f.val()) f.val(p.value);
                                                    else {
                                                        let a = JSON.parse(f.attr("parms"));
                                                        d > a[2] && (d = a[2]);
                                                        d < a[1] && (d = a[1]);
                                                        p.value = v(d, a[3]);
                                                        f.val(v(d, a[3]))
                                                    }
                                                });
                                            l.on("click", '.custom-input-select[type="time"]', f => {
                                                f = $(f.currentTarget);
                                                f.hasClass("showselect");
                                                $('.custom-input-select[type="select"]').removeClass("showselect");
                                                f.addClass("showselect")
                                            });
                                            "undefined" == typeof p.value && (p.value = p.values[0]);
                                            switch (p.type) {
                                                case "select":
                                                    l.find(".custom-input-select").append(`
                                            <div class="select-case">
                                                <div class="value">${this.translation(`regulations.settingsValues.${p.value}.short`)}</div> 
                                                <div class="icon selectwrap"></div>
                                            </div>
                                        `);
                                                    var h = $('<div class="option-case"></div>');
                                                    for (let d = 0; d < p.values.length; d++) {
                                                        let a = p.values[d];
                                                        h.append(`
                                                <div class="option" value="${a}" >${this.translation(`regulations.settingsValues.${a}.short`)}</div>
                                            `)
                                                    }
                                                    l.find(".custom-input-select").append(h);
                                                    break;
                                                case "time":
                                                    let f = $(`
                                            <div class="select-case">
                                                <div class="value">${p.value}</div>
                                                <div class="icon time"></div>
                                            </div>
                                        `);
                                                    h = p.value.replace("-", ":").split(":");
                                                    l.find(".custom-input-select").append(f);
                                                    l.find(".custom-input-select").append(`
                                            <div class="option-case time">     
                                                <div class="time-case">
                                                    <div class="time-select-case" parms="[0,23,1]" name="hFrom"> 
                                                        <div class="button up icon"></div> 
                                                        <div class="value center">${h[0]}</div> 
                                                        <div class="button down icon"></div>
                                                    </div>
                                                    <div class="separator">:</div>
                                                    <div class="time-select-case" parms="[0,59,1]" name="mFrom">
                                                        <div class="button up icon"></div> 
                                                        <div class="value center">${h[1]}</div> 
                                                        <div class="button down icon"></div>
                                                    </div>
                
                                                    <div class="separator">-</div>
                
                                                    <div class="time-select-case" parms="[0,23,1]" name="hTo">
                                                        <div class="button up icon"></div> 
                                                        <div class="value center">${h[2]}</div> 
                                                        <div class="button down icon"></div>
                                                    </div>
                                                    <div class="separator">:</div>
                                                    <div class="time-select-case" parms="[0,59,1]" name="mTo">
                                                        <div class="button up icon"></div> 
                                                        <div class="value center">${h[3]}</div> 
                                                        <div class="button down icon"></div>
                                                    </div>
                                                </div>
                                            </div>
                                        `);
                                                    l.on("click", ".time-select-case", d => {
                                                        let a = C => {
                                                                C = +C;
                                                                return 10 > C ? `0${C}` : `${C}`
                                                            },
                                                            c = {
                                                                hFrom: l.find('.time-select-case[name="hFrom"] .value.center').html(),
                                                                mFrom: l.find('.time-select-case[name="mFrom"] .value.center').html(),
                                                                hTo: l.find('.time-select-case[name="hTo"] .value.center').html(),
                                                                mTo: l.find('.time-select-case[name="mTo"] .value.center').html()
                                                            },
                                                            r = $(d.currentTarget);
                                                        var u;
                                                        let A, B = JSON.parse(r.attr("parms"));
                                                        null != d.target.closest(".up") && (u = "up");
                                                        null !=
                                                            d.target.closest(".down") && (u = "down");
                                                        d = +r.find(".value.center").html();
                                                        switch (u) {
                                                            case "up":
                                                                u = d + B[2];
                                                                u > B[1] && (u = B[0]);
                                                                c[r.attr("name")] = u;
                                                                r.find(".value.bottom,.value.top").remove();
                                                                A = $(`<div class="value bottom">${a(u)}</div>`);
                                                                r.append(A);
                                                                r.find(".value.center").removeClass("center").addClass("top");
                                                                setTimeout(() => {
                                                                    A.removeClass("bottom").addClass("center")
                                                                }, 100);
                                                                break;
                                                            case "down":
                                                                u = d - B[2], u < B[0] && (u = B[1]), c[r.attr("name")] = u, r.find(".value.bottom,.value.top").remove(), A = $(`<div class="value top">${a(u)}</div>`),
                                                                    r.append(A), r.find(".value.center").removeClass("center").addClass("bottom"), setTimeout(() => {
                                                                        A.removeClass("top").addClass("center")
                                                                    }, 100)
                                                        }
                                                        p.value = `${a(c.hFrom)}:${a(c.mFrom)}-${a(c.hTo)}:${a(c.mTo)}`;
                                                        f.find(".value").html(p.value)
                                                    });
                                                    break;
                                                case "number":
                                                    l.find(".custom-input-select").append('<button action="-"></button>'), l.find(".custom-input-select").append(`<input type="text" value="${p.value}" parms="${JSON.stringify(p.values)}" />`), l.find(".custom-input-select").append('<button action="+"></button>')
                                            }
                                            t.append(l)
                                        }
                                        n.append(k);
                                        let e = k.find(".wrap-regulations-list");
                                        n.find(".cursor");
                                        n.find(".curtain").addClass("shaded");
                                        let g = $('<div class="general-information hide"></div>');
                                        b(10).then(() => {
                                            g.css({
                                                "max-width": e.width() + 32,
                                                "min-height": e.height() + 32,
                                                "max-height": e.height() + 32,
                                                margin: 0
                                            });
                                            g.html(this.translation("manual.pages.robotRegulations"));
                                            let q = n.offset(),
                                                p = e.offset();
                                            p.top -= q.top;
                                            p.left -= q.left;
                                            g.css(p);
                                            g.removeClass("hide");
                                            setTimeout(() => {
                                                g.addClass("show")
                                            }, 10)
                                        }).catch(console.log);
                                        n.append(g);
                                        return n
                                    },
                                    Fa = v => {
                                        this.runEvent("liveStop",
                                            !0);
                                        let n = !1;
                                        this.on("liveStop", "liveFunction", () => {
                                            n = !0
                                        });
                                        let k = ca.clone();
                                        k.addClass("settings");
                                        let t = G.clone(),
                                            m = t.find(".wrap-regulations-list"),
                                            h = JSON.parse(JSON.stringify(this.configuration.availableRegulations));
                                        for (let q = 0; q < h.length; q++) {
                                            let p = h[q],
                                                l = $(`<div class="iteam-settings ${p.id}"></div>`);
                                            l.append(`<div class="title-settings">${this.translation(`regulations.settings.${p.id}`)}</div>`);
                                            l.append('<div class="stretch"></div>');
                                            l.append(`<div class="custom-input-select" type="${p.type}"> </div>`);
                                            l.on("click", '.custom-input-select[type="select"]', f => {
                                                let d = $(f.currentTarget);
                                                if (d.hasClass("showselect")) {
                                                    if (null != f.target.closest(".option")) {
                                                        var a = $(f.target).attr("value");
                                                        f = $(f.target).html();
                                                        d.find(".select-case .value").html(f);
                                                        p.value = a
                                                    }
                                                    return d.removeClass("showselect")
                                                }
                                                $('.custom-input-select[type="select"]').removeClass("showselect");
                                                d.addClass("showselect")
                                            });
                                            l.on("click", ".custom-input-select button", f => {
                                                f = $(f.currentTarget);
                                                let d = f.siblings("input"),
                                                    a = +d.val(),
                                                    c = JSON.parse(d.attr("parms"));
                                                switch (f.attr("action")) {
                                                    case "+":
                                                        a += c[3];
                                                        a > c[2] && (a = c[2]);
                                                        break;
                                                    case "-":
                                                        a -= c[3], a < c[1] && (a = c[1])
                                                }
                                                d.val(R(a, c[3]));
                                                p.value = R(a, c[3])
                                            });
                                            l.on("keyup", ".custom-input-select input", f => {
                                                let d = $(f.currentTarget),
                                                    a = ["", " ", "-", "."],
                                                    c = +d.val();
                                                if (isNaN(c) && !a.includes(f.key)) d.val(p.value);
                                                else {
                                                    let r = JSON.parse(d.attr("parms"));
                                                    c > r[2] && (c = r[2]);
                                                    a.includes(f.key) || (p.value = R(c, r[3]), d.val(R(c, r[3])))
                                                }
                                            });
                                            l.on("keydown", ".custom-input-select input", f => {
                                                let d = ["Backspace", "-", "."];
                                                (isNaN(+f.key) && !d.includes(f.key) ||
                                                    " " == f.key) && f.preventDefault()
                                            });
                                            l.on("change", ".custom-input-select input", f => {
                                                f = $(f.currentTarget);
                                                let d = +f.val();
                                                if (isNaN(d) || "" == f.val()) f.val(p.value);
                                                else {
                                                    let a = JSON.parse(f.attr("parms"));
                                                    d > a[2] && (d = a[2]);
                                                    d < a[1] && (d = a[1]);
                                                    p.value = R(d, a[3]);
                                                    f.val(R(d, a[3]))
                                                }
                                            });
                                            l.on("click", '.custom-input-select[type="time"]', f => {
                                                f = $(f.currentTarget);
                                                f.hasClass("showselect");
                                                $('.custom-input-select[type="select"]').removeClass("showselect");
                                                f.addClass("showselect")
                                            });
                                            "undefined" == typeof p.value && (p.value = p.values[0]);
                                            switch (p.type) {
                                                case "select":
                                                    l.find(".custom-input-select").append(`
                                            <div class="select-case">
                                                <div class="value">${this.translation(`regulations.settingsValues.${p.value}.short`)}</div> 
                                                <div class="icon selectwrap"></div>
                                            </div>
                                        `);
                                                    var e = $('<div class="option-case"></div>');
                                                    for (let d = 0; d < p.values.length; d++) {
                                                        let a = p.values[d];
                                                        e.append(`
                                                <div class="option" value="${a}" >${this.translation(`regulations.settingsValues.${a}.short`)}</div>
                                            `)
                                                    }
                                                    l.find(".custom-input-select").append(e);
                                                    break;
                                                case "time":
                                                    let f = $(`
                                            <div class="select-case">
                                                <div class="value">${p.value}</div>
                                                <div class="icon time"></div>
                                            </div>
                                        `);
                                                    e = p.value.replace("-", ":").split(":");
                                                    l.find(".custom-input-select").append(f);
                                                    l.find(".custom-input-select").append(`
                                            <div class="option-case time">     
                                                <div class="time-case">
                                                    <div class="time-select-case" parms="[0,23,1]" name="hFrom"> 
                                                        <div class="button up icon"></div> 
                                                        <div class="value center">${e[0]}</div> 
                                                        <div class="button down icon"></div>
                                                    </div>
                                                    <div class="separator">:</div>
                                                    <div class="time-select-case" parms="[0,59,1]" name="mFrom">
                                                        <div class="button up icon"></div> 
                                                        <div class="value center">${e[1]}</div> 
                                                        <div class="button down icon"></div>
                                                    </div>
                
                                                    <div class="separator">-</div>
                
                                                    <div class="time-select-case" parms="[0,23,1]" name="hTo">
                                                        <div class="button up icon"></div> 
                                                        <div class="value center">${e[2]}</div> 
                                                        <div class="button down icon"></div>
                                                    </div>
                                                    <div class="separator">:</div>
                                                    <div class="time-select-case" parms="[0,59,1]" name="mTo">
                                                        <div class="button up icon"></div> 
                                                        <div class="value center">${e[3]}</div> 
                                                        <div class="button down icon"></div>
                                                    </div>
                                                </div>
                                            </div>
                                        `);
                                                    l.on("click", ".time-select-case", d => {
                                                        let a = C => {
                                                                C = +C;
                                                                return 10 > C ? `0${C}` : `${C}`
                                                            },
                                                            c = {
                                                                hFrom: l.find('.time-select-case[name="hFrom"] .value.center').html(),
                                                                mFrom: l.find('.time-select-case[name="mFrom"] .value.center').html(),
                                                                hTo: l.find('.time-select-case[name="hTo"] .value.center').html(),
                                                                mTo: l.find('.time-select-case[name="mTo"] .value.center').html()
                                                            },
                                                            r = $(d.currentTarget);
                                                        var u;
                                                        let A, B = JSON.parse(r.attr("parms"));
                                                        null != d.target.closest(".up") && (u = "up");
                                                        null !=
                                                            d.target.closest(".down") && (u = "down");
                                                        d = +r.find(".value.center").html();
                                                        switch (u) {
                                                            case "up":
                                                                u = d + B[2];
                                                                u > B[1] && (u = B[0]);
                                                                c[r.attr("name")] = u;
                                                                r.find(".value.bottom,.value.top").remove();
                                                                A = $(`<div class="value bottom">${a(u)}</div>`);
                                                                r.append(A);
                                                                r.find(".value.center").removeClass("center").addClass("top");
                                                                setTimeout(() => {
                                                                    A.removeClass("bottom").addClass("center")
                                                                }, 100);
                                                                break;
                                                            case "down":
                                                                u = d - B[2], u < B[0] && (u = B[1]), c[r.attr("name")] = u, r.find(".value.bottom,.value.top").remove(), A = $(`<div class="value top">${a(u)}</div>`),
                                                                    r.append(A), r.find(".value.center").removeClass("center").addClass("bottom"), setTimeout(() => {
                                                                        A.removeClass("top").addClass("center")
                                                                    }, 100)
                                                        }
                                                        p.value = `${a(c.hFrom)}:${a(c.mFrom)}-${a(c.hTo)}:${a(c.mTo)}`;
                                                        f.find(".value").html(p.value)
                                                    });
                                                    break;
                                                case "number":
                                                    l.find(".custom-input-select").append('<button action="-"></button>'), l.find(".custom-input-select").append(`<input type="text" value="${p.value}" parms="${JSON.stringify(p.values)}" />`), l.find(".custom-input-select").append('<button action="+"></button>')
                                            }
                                            m.append(l)
                                        }
                                        k.append(t);
                                        let g = k.find(".cursor");
                                        (async () => {
                                            await b(300);
                                            if (605 > k.width()) return k.css({
                                                opacity: 1,
                                                width: k.width,
                                                height: k.height()
                                            }), k.trigger("stopped"), k.html(`
                                        <div class="not-screen-size-case">
                                            <div class="content-wrap">
                                                <div class="icon isError"></div>
                                                <div class="text"> ${this.translation("warnings.notEnoughScreenWidth")}</div>
                                            </div>
                                        </div> 
                                    `);
                                            for (;;) try {
                                                if (n) break;
                                                let p = t.find(`.iteam-settings.${v}`),
                                                    l = p.find(".custom-input-select"),
                                                    f = l.attr("type"),
                                                    d = p.find(".title-settings"),
                                                    a = d.offset(),
                                                    c = k.offset();
                                                a.top -= c.top - d.height();
                                                a.left -= c.left + 9;
                                                g.css(a);
                                                d.removeClass("highlight");
                                                await b(2300);
                                                a.left += d.width();
                                                g.css(a);
                                                await b(300);
                                                d.addClass("highlight");
                                                await b(1700);
                                                switch (f) {
                                                    case "select":
                                                        d = l.find(".icon.selectwrap");
                                                        a = d.offset();
                                                        c = k.offset();
                                                        a.top -= c.top - d.height() / 2;
                                                        a.left -= c.left + d.width() /
                                                            2;
                                                        g.css(a);
                                                        await b(2300);
                                                        g.attr("class", "cursor click-left");
                                                        await b(100);
                                                        g.attr("class", "cursor");
                                                        if (n) throw "break";
                                                        d.trigger("click");
                                                        await b(300);
                                                        d = l.find(".option-case .option:nth-child(2)");
                                                        a = d.offset();
                                                        c = k.offset();
                                                        a.top -= c.top - d.height() / 2;
                                                        a.left -= c.left - d.width() / 2;
                                                        g.css(a);
                                                        await b(1E3);
                                                        d.addClass("hover");
                                                        await b(1300);
                                                        g.attr("class", "cursor click-left");
                                                        await b(100);
                                                        g.attr("class", "cursor");
                                                        if (n) throw "break";
                                                        d.trigger("click");
                                                        d.removeClass("hover");
                                                        await b(2E3);
                                                        d = l.find(".icon.selectwrap");
                                                        a = d.offset();
                                                        c = k.offset();
                                                        a.top -= c.top - d.height() / 2;
                                                        a.left -= c.left + d.width() / 2;
                                                        g.css(a);
                                                        await b(2300);
                                                        g.attr("class", "cursor click-left");
                                                        await b(100);
                                                        g.attr("class", "cursor");
                                                        if (n) throw "break";
                                                        d.trigger("click");
                                                        await b(300);
                                                        d = l.find(".option-case .option:nth-child(1)");
                                                        a = d.offset();
                                                        c = k.offset();
                                                        a.top -= c.top - d.height() / 2;
                                                        a.left -= c.left - d.width() / 2;
                                                        g.css(a);
                                                        await b(1E3);
                                                        d.addClass("hover");
                                                        await b(1300);
                                                        g.attr("class", "cursor click-left");
                                                        await b(100);
                                                        g.attr("class", "cursor");
                                                        if (n) throw "break";
                                                        d.trigger("click");
                                                        d.removeClass("hover");
                                                        await b(2E3);
                                                        break;
                                                    case "time":
                                                        d = l;
                                                        a = d.offset();
                                                        c = k.offset();
                                                        a.top -= c.top - d.height() / 2;
                                                        a.left -= c.left - d.width() / 2;
                                                        g.css(a);
                                                        await b(2300);
                                                        g.attr("class", "cursor click-left");
                                                        await b(100);
                                                        g.attr("class", "cursor");
                                                        if (n) throw "break";
                                                        d.trigger("click");
                                                        await b(300);
                                                        let r = l.find(".option-case.time .time-case .time-select-case:nth-child(1) .button.up");
                                                        d = r;
                                                        a = d.offset();
                                                        c = k.offset();
                                                        a.top -= c.top - d.height() / 2;
                                                        a.left -= c.left - d.width() / 2 + 5;
                                                        g.css(a);
                                                        await b(2300);
                                                        for (var q = 0; 15 > q; q++) {
                                                            g.attr("class",
                                                                "cursor click-left");
                                                            await b(100);
                                                            g.attr("class", "cursor");
                                                            if (n) throw "break";
                                                            r.trigger("click");
                                                            await b(100)
                                                        }
                                                        d = r = l.find(".option-case.time .time-case .time-select-case:nth-child(5) .button.up");
                                                        a = d.offset();
                                                        c = k.offset();
                                                        a.top -= c.top - d.height() / 2;
                                                        a.left -= c.left - d.width() / 2 + 5;
                                                        g.css(a);
                                                        await b(2300);
                                                        for (q = 0; 17 > q; q++) {
                                                            g.attr("class", "cursor click-left");
                                                            await b(100);
                                                            g.attr("class", "cursor");
                                                            if (n) throw "break";
                                                            r.trigger("click");
                                                            await b(100)
                                                        }
                                                        d = p.find(".stretch");
                                                        a = d.offset();
                                                        c = k.offset();
                                                        a.top -= c.top - d.height() /
                                                            2;
                                                        a.left -= c.left - d.width() + 20;
                                                        g.css(a);
                                                        await b(2E3);
                                                        g.attr("class", "cursor click-left");
                                                        await b(100);
                                                        if (n) throw "break";
                                                        d.trigger("click");
                                                        g.attr("class", "cursor");
                                                        await b(1E3);
                                                        d = l;
                                                        a = d.offset();
                                                        c = k.offset();
                                                        a.top -= c.top - d.height() / 2;
                                                        a.left -= c.left - d.width() / 2;
                                                        g.css(a);
                                                        await b(2300);
                                                        g.attr("class", "cursor click-left");
                                                        await b(100);
                                                        g.attr("class", "cursor");
                                                        if (n) throw "break";
                                                        d.trigger("click");
                                                        await b(300);
                                                        d = r = l.find(".option-case.time .time-case .time-select-case:nth-child(1) .button.down");
                                                        a = d.offset();
                                                        c = k.offset();
                                                        a.top -= c.top - d.height() / 2;
                                                        a.left -= c.left - d.width() / 2 + 5;
                                                        g.css(a);
                                                        await b(2300);
                                                        for (q = 0; 15 > q; q++) {
                                                            g.attr("class", "cursor click-left");
                                                            await b(100);
                                                            g.attr("class", "cursor");
                                                            if (n) throw "break";
                                                            r.trigger("click");
                                                            await b(100)
                                                        }
                                                        d = r = l.find(".option-case.time .time-case .time-select-case:nth-child(5) .button.down");
                                                        a = d.offset();
                                                        c = k.offset();
                                                        a.top -= c.top - d.height() / 2;
                                                        a.left -= c.left - d.width() / 2 + 5;
                                                        g.css(a);
                                                        await b(2300);
                                                        for (q = 0; 17 > q; q++) {
                                                            g.attr("class", "cursor click-left");
                                                            await b(100);
                                                            g.attr("class",
                                                                "cursor");
                                                            if (n) throw "break";
                                                            r.trigger("click");
                                                            await b(100)
                                                        }
                                                        d = p.find(".stretch");
                                                        a = d.offset();
                                                        c = k.offset();
                                                        a.top -= c.top - d.height() / 2;
                                                        a.left -= c.left - d.width() + 20;
                                                        g.css(a);
                                                        await b(2E3);
                                                        g.attr("class", "cursor click-left");
                                                        await b(100);
                                                        if (n) throw "break";
                                                        d.trigger("click");
                                                        g.attr("class", "cursor");
                                                        await b(1E3);
                                                        break;
                                                    case "number":
                                                        let u = l.find('input[type="text"]'),
                                                            A = u.val(),
                                                            B;
                                                        switch (v) {
                                                            case "minProfit":
                                                                d = l.find('button[action="+"]');
                                                                a = d.offset();
                                                                c = k.offset();
                                                                a.top -= c.top - d.height() / 2;
                                                                a.left -= c.left - d.width() /
                                                                    2;
                                                                g.css(a);
                                                                await b(2300);
                                                                for (q = 0; 10 > q; q++) {
                                                                    g.attr("class", "cursor click-left");
                                                                    await b(100);
                                                                    g.attr("class", "cursor");
                                                                    if (n) throw "break";
                                                                    d.trigger("click");
                                                                    await b(100)
                                                                }
                                                                d = u;
                                                                a = d.offset();
                                                                c = k.offset();
                                                                a.top -= c.top - d.height() / 2;
                                                                a.left -= c.left - d.width() / 2;
                                                                g.css(a);
                                                                await b(2300);
                                                                d.focus();
                                                                for (B = d.val().split(""); 0 < B.length;) B.pop(), d.val(B.join("")), await b(200);
                                                                await b(500);
                                                                for (q = 0; q < A.length; q++) d.val(d.val() + A[q]), await b(200);
                                                                d = p.find(".stretch");
                                                                a = d.offset();
                                                                c = k.offset();
                                                                a.top -= c.top - d.height() / 2;
                                                                a.left -=
                                                                    c.left - d.width() + 20;
                                                                g.css(a);
                                                                await b(2E3);
                                                                g.attr("class", "cursor click-left");
                                                                await b(100);
                                                                u.blur();
                                                                g.attr("class", "cursor");
                                                                break;
                                                            case "expiration":
                                                                d = l.find('button[action="+"]');
                                                                a = d.offset();
                                                                c = k.offset();
                                                                a.top -= c.top - d.height() / 2;
                                                                a.left -= c.left - d.width() / 2;
                                                                g.css(a);
                                                                await b(2300);
                                                                for (q = 0; 10 > q; q++) {
                                                                    g.attr("class", "cursor click-left");
                                                                    await b(100);
                                                                    g.attr("class", "cursor");
                                                                    if (n) throw "break";
                                                                    d.trigger("click");
                                                                    await b(100)
                                                                }
                                                                d = u;
                                                                a = d.offset();
                                                                c = k.offset();
                                                                a.top -= c.top - d.height() / 2;
                                                                a.left -= c.left - d.width() /
                                                                    2;
                                                                g.css(a);
                                                                await b(2300);
                                                                d.focus();
                                                                for (B = d.val().split(""); 0 < B.length;) B.pop(), d.val(B.join("")), await b(200);
                                                                await b(500);
                                                                for (q = 0; q < A.length; q++) d.val(d.val() + A[q]), await b(200);
                                                                d = p.find(".stretch");
                                                                a = d.offset();
                                                                c = k.offset();
                                                                a.top -= c.top - d.height() / 2;
                                                                a.left -= c.left - d.width() + 20;
                                                                g.css(a);
                                                                await b(2E3);
                                                                g.attr("class", "cursor click-left");
                                                                await b(100);
                                                                u.blur();
                                                                g.attr("class", "cursor");
                                                                break;
                                                            case "bet":
                                                                d = l.find('button[action="+"]');
                                                                a = d.offset();
                                                                c = k.offset();
                                                                a.top -= c.top - d.height() / 2;
                                                                a.left -= c.left - d.width() /
                                                                    2;
                                                                g.css(a);
                                                                await b(2300);
                                                                for (q = 0; 8 > q; q++) {
                                                                    g.attr("class", "cursor click-left");
                                                                    await b(100);
                                                                    g.attr("class", "cursor");
                                                                    if (n) throw "break";
                                                                    d.trigger("click");
                                                                    await b(100)
                                                                }
                                                                await b(1E3);
                                                                d = l.find('button[action="-"]');
                                                                a = d.offset();
                                                                c = k.offset();
                                                                a.top -= c.top - d.height() / 2;
                                                                a.left -= c.left - d.width() / 2;
                                                                g.css(a);
                                                                await b(2300);
                                                                for (q = 0; 8 > q; q++) {
                                                                    g.attr("class", "cursor click-left");
                                                                    await b(100);
                                                                    g.attr("class", "cursor");
                                                                    if (n) throw "break";
                                                                    d.trigger("click");
                                                                    await b(100)
                                                                }
                                                                await b(1E3);
                                                                break;
                                                            case "maxBets":
                                                                d = l.find('button[action="+"]');
                                                                a = d.offset();
                                                                c = k.offset();
                                                                a.top -= c.top - d.height() / 2;
                                                                a.left -= c.left - d.width() / 2;
                                                                g.css(a);
                                                                await b(2300);
                                                                for (q = 0; 4 > q; q++) {
                                                                    g.attr("class", "cursor click-left");
                                                                    await b(100);
                                                                    g.attr("class", "cursor");
                                                                    if (n) throw "break";
                                                                    d.trigger("click");
                                                                    await b(100)
                                                                }
                                                                await b(1E3);
                                                                d = l.find('button[action="-"]');
                                                                a = d.offset();
                                                                c = k.offset();
                                                                a.top -= c.top - d.height() / 2;
                                                                a.left -= c.left - d.width() / 2;
                                                                g.css(a);
                                                                await b(2300);
                                                                for (q = 0; 4 > q; q++) {
                                                                    g.attr("class", "cursor click-left");
                                                                    await b(100);
                                                                    g.attr("class", "cursor");
                                                                    if (n) throw "break";
                                                                    d.trigger("click");
                                                                    await b(100)
                                                                }
                                                                await b(1E3);
                                                                break;
                                                            case "sl":
                                                                d = u;
                                                                a = d.offset();
                                                                c = k.offset();
                                                                a.top -= c.top - d.height() / 2;
                                                                a.left -= c.left - d.width() / 2;
                                                                g.css(a);
                                                                await b(2300);
                                                                d.focus();
                                                                for (B = d.val().split(""); 0 < B.length;) B.pop(), d.val(B.join("")), await b(200);
                                                                await b(500);
                                                                for (q = 0; 3 > q; q++) d.val(d.val() + "300" [q]), await b(200);
                                                                d = p.find(".stretch");
                                                                a = d.offset();
                                                                c = k.offset();
                                                                a.top -= c.top - d.height() / 2;
                                                                a.left -= c.left - d.width() + 20;
                                                                g.css(a);
                                                                await b(2E3);
                                                                g.attr("class", "cursor click-left");
                                                                await b(100);
                                                                u.blur();
                                                                g.attr("class", "cursor");
                                                                await b(1E3);
                                                                d = u;
                                                                a = d.offset();
                                                                c = k.offset();
                                                                a.top -= c.top - d.height() / 2;
                                                                a.left -= c.left - d.width() / 2;
                                                                g.css(a);
                                                                await b(2300);
                                                                d.focus();
                                                                for (B = d.val().split(""); 0 < B.length;) B.pop(), d.val(B.join("")), await b(200);
                                                                await b(500);
                                                                for (q = 0; q < A.length; q++) d.val(d.val() + A[q]), await b(200);
                                                                await b(1E3);
                                                                u.blur();
                                                                break;
                                                            case "tp":
                                                                d = u;
                                                                a = d.offset();
                                                                c = k.offset();
                                                                a.top -= c.top - d.height() / 2;
                                                                a.left -= c.left - d.width() / 2;
                                                                g.css(a);
                                                                await b(2300);
                                                                d.focus();
                                                                for (B = d.val().split(""); 0 < B.length;) B.pop(), d.val(B.join("")), await b(200);
                                                                await b(500);
                                                                for (q = 0; 4 > q; q++) d.val(d.val() + "1000" [q]), await b(200);
                                                                d = p.find(".stretch");
                                                                a = d.offset();
                                                                c = k.offset();
                                                                a.top -= c.top - d.height() / 2;
                                                                a.left -= c.left - d.width() + 20;
                                                                g.css(a);
                                                                await b(2E3);
                                                                g.attr("class", "cursor click-left");
                                                                await b(100);
                                                                u.blur();
                                                                g.attr("class", "cursor");
                                                                await b(1E3);
                                                                d = u;
                                                                a = d.offset();
                                                                c = k.offset();
                                                                a.top -= c.top - d.height() / 2;
                                                                a.left -= c.left - d.width() / 2;
                                                                g.css(a);
                                                                await b(2300);
                                                                d.focus();
                                                                for (B = d.val().split(""); 0 < B.length;) B.pop(), d.val(B.join("")), await b(200);
                                                                await b(500);
                                                                for (q = 0; q < A.length; q++) d.val(d.val() +
                                                                    A[q]), await b(200);
                                                                await b(1E3);
                                                                u.blur()
                                                        }
                                                }
                                            } catch {
                                                break
                                            }
                                        })();
                                        return k
                                    },
                                    cb = () => {
                                        this.runEvent("liveStop", !0);
                                        this.on("liveStop", "liveFunction", () => {});
                                        let v = ca.clone();
                                        v.addClass("settings");
                                        let n = Ha.clone(),
                                            k = [],
                                            t = () => {
                                                0 == g.children().length ? q.addClass("show") : q.removeClass("show")
                                            },
                                            m = {},
                                            h = this.configuration.availableMartingaleSettings,
                                            e = (l, f = !1) => {
                                                f && (0 == k.length ? l = JSON.parse(JSON.stringify(h)) : 0 < g.find(".iteam-martingale-case.unwrap").length ? (l = g.find(".iteam-martingale-case.unwrap").attr("sortid"),
                                                    l = JSON.parse(JSON.stringify(m[l]))) : l = JSON.parse(JSON.stringify(k[k.length - 1])));
                                                let d = {};
                                                var a = L();
                                                m[a] = l;
                                                let c = $(`<li class="iteam-martingale-case" sortId="${a}" ></li>`);
                                                f && (c.addClass("new"), setTimeout(() => {
                                                    c.removeClass("new")
                                                }, 300));
                                                c.append(`
                                    <div class="data-martingale-case">
                                        <div class="iteam-data martingale-name"> ${this.translation("martingale.step")} \u2116&ensp;</div>
                                        <div class="iteam-data stretch"></div>
                                        <div class="iteam-data action">
                                            <div class="icon unwrap"></div>
                                            <div class="icon delete"></div>
                                        </div>
                                    </div>
                                `);
                                                c.on("click", ".data-martingale-case", function(r) {
                                                    if (null != r.target.closest(".delete")) try {
                                                        k.splice(c.index(), 1), c.addClass("remove"), setTimeout(() => {
                                                            c.remove();
                                                            t()
                                                        }, 300)
                                                    } catch (u) {} else c.hasClass("unwrap") ? c.removeClass("unwrap") : $(".live-screenshot li.iteam-martingale-case").hasClass("unwrap") ? ($(".live-screenshot li.iteam-martingale-case").removeClass("unwrap"), setTimeout(() => {
                                                        c.addClass("unwrap")
                                                    }, 300)) : c.addClass("unwrap")
                                                });
                                                a = $('<div class="martingale-settings-case"></div>');
                                                for (let r = 0; r < l.length; r++) {
                                                    let u = l[r];
                                                    "undefined" == typeof u.value && (u.value = u.values[0]);
                                                    d[u.id] = $(`<div class="custom-input-select ${u.id}"  type="${u.type}" ${"minProfit"==u.id?`value="${u.value}"`:""}></div>`);
                                                    let A = $(`<div class="iteam-settings" value="${u.value}" name="${u.id}"> </div>`);
                                                    switch (u.type) {
                                                        case "verticalNumber":
                                                            d[u.id].append(`
                                                <div class="select-case">
                                                    <div class="value">${u.value}</div>
                                                    <div> % </div>
                                                </div>
                                                <div class="option-case time">     
                                                    <div class="time-case">
                                                        <div class="time-select-case" parms="${JSON.stringify(u.values)}" > 
                                                            <div class="button up icon"></div> 
                                                            <div class="value center">${u.value}</div> 
                                                            <div class="button down icon"></div>
                                                        </div> 
                                                    </div>
                                                </div>
                                            `);
                                                            d[u.id].on("click", C => {
                                                                C = $(C.currentTarget);
                                                                $('.live-screenshot .custom-input-select[type="select"]').removeClass("showselect");
                                                                C.addClass("showselect")
                                                            });
                                                            let B;
                                                            d[u.id].on("mouseup progCall mouseout", ".time-select-case", C => {
                                                                if ("mouseout" == C.type) return clearInterval(B);
                                                                if ("mouseup" == C.type && (clearInterval(B), d[u.id].hasClass("progCall"))) {
                                                                    d[u.id].removeClass("progCall");
                                                                    return
                                                                }
                                                                "progCall" == C.type && d[u.id].addClass("progCall");
                                                                var D = ka => {
                                                                    ka = +ka;
                                                                    return 10 >
                                                                        ka ? `0${ka}` : `${ka}`
                                                                };
                                                                let w = +d[u.id].attr("value"),
                                                                    y = $(C.currentTarget),
                                                                    M, X, da = JSON.parse(y.attr("parms"));
                                                                null != C.target.closest(".up") && (M = "up");
                                                                null != C.target.closest(".down") && (M = "down");
                                                                let ha = w;
                                                                switch (M) {
                                                                    case "up":
                                                                        C = ha + ("progCall" == C.type ? 10 : da[2]);
                                                                        C > da[1] && (C = da[0]);
                                                                        w = C;
                                                                        y.find(".value.bottom,.value.top").remove();
                                                                        X = $(`<div class="value bottom">${D(C)}</div>`);
                                                                        y.append(X);
                                                                        y.find(".value.center").removeClass("center").addClass("top");
                                                                        setTimeout(() => {
                                                                                X.removeClass("bottom").addClass("center")
                                                                            },
                                                                            100);
                                                                        break;
                                                                    case "down":
                                                                        C = ha - ("progCall" == C.type ? 10 : da[2]), C < da[0] && (C = da[1]), w = C, y.find(".value.bottom,.value.top").remove(), X = $(`<div class="value top">${D(C)}</div>`), y.append(X), y.find(".value.center").removeClass("center").addClass("bottom"), setTimeout(() => {
                                                                            X.removeClass("top").addClass("center")
                                                                        }, 100)
                                                                }
                                                                D = D(w);
                                                                if (isNaN(D)) return clearInterval(B);
                                                                u.value = D;
                                                                d[u.id].attr("value", u.value);
                                                                d[u.id].find(".select-case .value").html(u.value)
                                                            });
                                                            d[u.id].on("mousedown", ".time-select-case", C => {
                                                                $(C.currentTarget);
                                                                let D;
                                                                null != C.target.closest(".up") && (D = "up");
                                                                null != C.target.closest(".down") && (D = "down");
                                                                void 0 != D && (B = setInterval(function() {
                                                                    d[u.id].find(`.${D}`).trigger("progCall")
                                                                }, 300));
                                                                return !1
                                                            });
                                                            break;
                                                        case "select":
                                                            d[u.id].append(`
                                                <div class="select-case">
                                                    <div class="value">${this.translation(`martingale.settingsValues.${u.value}.short`)}</div>
                                                    <div class="icon selectwrap"></div>
                                                </div>
                                                <div class="option-case"></div> 
                                            `);
                                                            for (let C = 0; C < u.values.length; C++) d[u.id].find(".option-case").append(`
                                                    <div class="option" value="${u.values[C]}" >${this.translation(`martingale.settingsValues.${u.values[C]}.short`)}</div>`);
                                                            d[u.id].on("click", C => {
                                                                let D = $(C.currentTarget);
                                                                if (D.hasClass("showselect")) {
                                                                    if (null != C.target.closest(".option")) {
                                                                        var w = $(C.target).attr("value");
                                                                        C = $(C.target).html();
                                                                        D.find(".select-case .value").html(C);
                                                                        u.value = w;
                                                                        A.attr("value", u.value)
                                                                    }
                                                                    return D.removeClass("showselect")
                                                                }
                                                                $('.live-screenshot .custom-input-select[type="select"]').removeClass("showselect");
                                                                D.addClass("showselect")
                                                            });
                                                            break;
                                                        case "number":
                                                            d[u.id].append('<button action="-"></button>'), d[u.id].append(`<input type="text" value="${u.value}" parms="${JSON.stringify(u.values)}" />`), d[u.id].append('<button action="+"></button>'), d[u.id].on("click", "button", C => {
                                                                C = $(C.currentTarget);
                                                                let D = C.siblings("input"),
                                                                    w = +D.val(),
                                                                    y = JSON.parse(D.attr("parms"));
                                                                switch (C.attr("action")) {
                                                                    case "+":
                                                                        w += y[3];
                                                                        w > y[2] && (w = y[2]);
                                                                        break;
                                                                    case "-":
                                                                        w -= y[3], w < y[1] && (w = y[1])
                                                                }
                                                                D.val(R(w, y[3]));
                                                                u.value = R(w, y[3]);
                                                                A.attr("value",
                                                                    u.value)
                                                            }), d[u.id].on("keyup", "input", C => {
                                                                let D = $(C.currentTarget),
                                                                    w = ["", " ", "-", "."],
                                                                    y = +D.val();
                                                                if (isNaN(y) && !w.includes(C.key)) D.val(u.value);
                                                                else {
                                                                    let M = JSON.parse(D.attr("parms"));
                                                                    y > M[2] && (y = M[2]);
                                                                    w.includes(C.key) || (u.value = R(y, M[3]), A.attr("value", u.value), D.val(R(y, M[3])))
                                                                }
                                                            }), d[u.id].on("keydown", "input", C => {
                                                                let D = ["Backspace", "-", "."];
                                                                (isNaN(+C.key) && !D.includes(C.key) || " " == C.key) && C.preventDefault()
                                                            }), d[u.id].on("change", "input", C => {
                                                                C = $(C.currentTarget);
                                                                let D = +C.val();
                                                                if (isNaN(D) || "" == C.val()) C.val(u.value);
                                                                else {
                                                                    let w = JSON.parse(C.attr("parms"));
                                                                    D > w[2] && (D = w[2]);
                                                                    D < w[1] && (D = w[1]);
                                                                    u.value = R(D, w[3]);
                                                                    A.attr("value", u.value);
                                                                    C.val(R(D, w[3]))
                                                                }
                                                            })
                                                    }
                                                    0 < r && (1 == r ? (A.append(`<div class="title-settings">${this.translation("martingale.settings.minProfit")}</div>`), A.append(d.minProfit), A.append('<div class="stretch"></div>'), A.append(d.actionDecreaseProfit)) : (A.append(`<div class="title-settings">${this.translation(`martingale.settings.${u.id}`)}</div>`), A.append('<div class="stretch"></div>'), A.append(d[u.id])), a.append(A))
                                                }
                                                c.append(a);
                                                f && k.push(l);
                                                return c
                                            },
                                            g = n.find("ul.step-martingale-list");
                                        g.sortable({
                                            cancel: ".martingale-settings-case,.iteam-data.action",
                                            update: (l, f) => {
                                                let d = [];
                                                $("li.iteam-martingale-case").each(function(a, c) {
                                                    d.push(m[$(c).attr("sortid")])
                                                });
                                                k = d
                                            }
                                        });
                                        for (let l = 0; l < k.length; l++) g.append(e(k[l]));
                                        n.find(".add-iteam-martingale").on("click", ".button", l => {
                                            let f = e(null, !0);
                                            setTimeout(() => {
                                                f.find(".data-martingale-case").click()
                                            }, 300);
                                            g.append(f);
                                            t()
                                        });
                                        let q = n.find(".empty-martingale-list");
                                        t();
                                        v.append(n);
                                        v.find(".cursor");
                                        v.find(".curtain").addClass("shaded");
                                        let p = $('<div class="general-information hide"></div>');
                                        b(10).then(() => {
                                            p.html(this.translation("manual.pages.robotMartingale"));
                                            let l = v.offset(),
                                                f = q.offset();
                                            f.top -= l.top;
                                            f.left -= l.left;
                                            p.css(f);
                                            p.removeClass("hide");
                                            setTimeout(() => {
                                                p.addClass("show")
                                            }, 10)
                                        }).catch(console.log);
                                        v.append(p);
                                        return v
                                    },
                                    bb = () => {
                                        this.runEvent("liveStop", !0);
                                        let v = !1;
                                        this.on("liveStop", "liveFunction", () => {
                                            v = !0
                                        });
                                        let n = ca.clone();
                                        n.addClass("settings");
                                        let k = Ha.clone(),
                                            t = [],
                                            m = () => {
                                                0 ==
                                                    q.children().length ? p.addClass("show") : p.removeClass("show")
                                            },
                                            h = {},
                                            e = this.configuration.availableMartingaleSettings,
                                            g = (f, d = !1) => {
                                                d && (0 == t.length ? f = JSON.parse(JSON.stringify(e)) : 0 < q.find(".iteam-martingale-case.unwrap").length ? (f = q.find(".iteam-martingale-case.unwrap").attr("sortid"), f = JSON.parse(JSON.stringify(h[f]))) : f = JSON.parse(JSON.stringify(t[t.length - 1])));
                                                let a = {};
                                                var c = L();
                                                h[c] = f;
                                                let r = $(`<li class="iteam-martingale-case" sortId="${c}" ></li>`);
                                                d && (r.addClass("new"), setTimeout(() => {
                                                        r.removeClass("new")
                                                    },
                                                    300));
                                                r.append(`
                                    <div class="data-martingale-case">
                                        <div class="iteam-data martingale-name"> ${this.translation("martingale.step")} \u2116&ensp;</div>
                                        <div class="iteam-data stretch"></div>
                                        <div class="iteam-data action">
                                            <div class="icon unwrap"></div>
                                            <div class="icon delete"></div>
                                        </div>
                                    </div>
                                `);
                                                r.on("click", ".data-martingale-case", function(u) {
                                                    if (null != u.target.closest(".delete")) try {
                                                        t.splice(r.index(), 1), r.addClass("remove"), setTimeout(() => {
                                                            r.remove();
                                                            m()
                                                        }, 300)
                                                    } catch (A) {} else r.hasClass("unwrap") ? r.removeClass("unwrap") : $(".live-screenshot li.iteam-martingale-case").hasClass("unwrap") ? ($(".live-screenshot li.iteam-martingale-case").removeClass("unwrap"), setTimeout(() => {
                                                        r.addClass("unwrap")
                                                    }, 300)) : r.addClass("unwrap")
                                                });
                                                c = $('<div class="martingale-settings-case"></div>');
                                                for (let u = 0; u < f.length; u++) {
                                                    let A = f[u];
                                                    "undefined" == typeof A.value && (A.value = A.values[0]);
                                                    a[A.id] = $(`<div class="custom-input-select ${A.id}"  type="${A.type}" ${"minProfit"==A.id?`value="${A.value}"`:""}></div>`);
                                                    let B = $(`<div class="iteam-settings" value="${A.value}" name="${A.id}"> </div>`);
                                                    switch (A.type) {
                                                        case "verticalNumber":
                                                            a[A.id].append(`
                                                <div class="select-case">
                                                    <div class="value">${A.value}</div>
                                                    <div> % </div>
                                                </div>
                                                <div class="option-case time">     
                                                    <div class="time-case">
                                                        <div class="time-select-case" parms="${JSON.stringify(A.values)}" > 
                                                            <div class="button up icon"></div> 
                                                            <div class="value center">${A.value}</div> 
                                                            <div class="button down icon"></div>
                                                        </div> 
                                                    </div>
                                                </div>
                                            `);
                                                            a[A.id].on("click", D => {
                                                                D = $(D.currentTarget);
                                                                $('.live-screenshot .custom-input-select[type="select"]').removeClass("showselect");
                                                                D.addClass("showselect")
                                                            });
                                                            let C;
                                                            a[A.id].on("mouseup progCall mouseout", ".time-select-case", D => {
                                                                if ("mouseout" == D.type) return clearInterval(C);
                                                                if ("mouseup" == D.type && (clearInterval(C), a[A.id].hasClass("progCall"))) {
                                                                    a[A.id].removeClass("progCall");
                                                                    return
                                                                }
                                                                "progCall" == D.type && a[A.id].addClass("progCall");
                                                                var w = ia => {
                                                                    ia = +ia;
                                                                    return 10 >
                                                                        ia ? `0${ia}` : `${ia}`
                                                                };
                                                                let y = +a[A.id].attr("value"),
                                                                    M = $(D.currentTarget),
                                                                    X, da, ha = JSON.parse(M.attr("parms"));
                                                                null != D.target.closest(".up") && (X = "up");
                                                                null != D.target.closest(".down") && (X = "down");
                                                                let ka = y;
                                                                switch (X) {
                                                                    case "up":
                                                                        D = ka + ("progCall" == D.type ? 10 : ha[2]);
                                                                        D > ha[1] && (D = ha[0]);
                                                                        y = D;
                                                                        M.find(".value.bottom,.value.top").remove();
                                                                        da = $(`<div class="value bottom">${w(D)}</div>`);
                                                                        M.append(da);
                                                                        M.find(".value.center").removeClass("center").addClass("top");
                                                                        setTimeout(() => {
                                                                                da.removeClass("bottom").addClass("center")
                                                                            },
                                                                            100);
                                                                        break;
                                                                    case "down":
                                                                        D = ka - ("progCall" == D.type ? 10 : ha[2]), D < ha[0] && (D = ha[1]), y = D, M.find(".value.bottom,.value.top").remove(), da = $(`<div class="value top">${w(D)}</div>`), M.append(da), M.find(".value.center").removeClass("center").addClass("bottom"), setTimeout(() => {
                                                                            da.removeClass("top").addClass("center")
                                                                        }, 100)
                                                                }
                                                                w = w(y);
                                                                if (isNaN(w)) return clearInterval(C);
                                                                A.value = w;
                                                                a[A.id].attr("value", A.value);
                                                                a[A.id].find(".select-case .value").html(A.value)
                                                            });
                                                            a[A.id].on("mousedown", ".time-select-case", D => {
                                                                $(D.currentTarget);
                                                                let w;
                                                                null != D.target.closest(".up") && (w = "up");
                                                                null != D.target.closest(".down") && (w = "down");
                                                                void 0 != w && (C = setInterval(function() {
                                                                    a[A.id].find(`.${w}`).trigger("progCall")
                                                                }, 300));
                                                                return !1
                                                            });
                                                            break;
                                                        case "select":
                                                            a[A.id].append(`
                                                <div class="select-case">
                                                    <div class="value">${this.translation(`martingale.settingsValues.${A.value}.short`)}</div>
                                                    <div class="icon selectwrap"></div>
                                                </div>
                                                <div class="option-case"></div> 
                                            `);
                                                            for (let D = 0; D < A.values.length; D++) a[A.id].find(".option-case").append(`
                                                    <div class="option" value="${A.values[D]}" >${this.translation(`martingale.settingsValues.${A.values[D]}.short`)}</div>`);
                                                            a[A.id].on("click", D => {
                                                                let w = $(D.currentTarget);
                                                                if (w.hasClass("showselect")) {
                                                                    if (null != D.target.closest(".option")) {
                                                                        var y = $(D.target).attr("value");
                                                                        D = $(D.target).html();
                                                                        w.find(".select-case .value").html(D);
                                                                        A.value = y;
                                                                        B.attr("value", A.value)
                                                                    }
                                                                    return w.removeClass("showselect")
                                                                }
                                                                $('.live-screenshot .custom-input-select[type="select"]').removeClass("showselect");
                                                                w.addClass("showselect")
                                                            });
                                                            break;
                                                        case "number":
                                                            a[A.id].append('<button action="-"></button>'), a[A.id].append(`<input type="text" value="${A.value}" parms="${JSON.stringify(A.values)}" />`), a[A.id].append('<button action="+"></button>'), a[A.id].on("click", "button", D => {
                                                                D = $(D.currentTarget);
                                                                let w = D.siblings("input"),
                                                                    y = +w.val(),
                                                                    M = JSON.parse(w.attr("parms"));
                                                                switch (D.attr("action")) {
                                                                    case "+":
                                                                        y += M[3];
                                                                        y > M[2] && (y = M[2]);
                                                                        break;
                                                                    case "-":
                                                                        y -= M[3], y < M[1] && (y = M[1])
                                                                }
                                                                w.val(R(y, M[3]));
                                                                A.value = R(y, M[3]);
                                                                B.attr("value",
                                                                    A.value)
                                                            }), a[A.id].on("keyup", "input", D => {
                                                                let w = $(D.currentTarget),
                                                                    y = ["", " ", "-", "."],
                                                                    M = +w.val();
                                                                if (isNaN(M) && !y.includes(D.key)) w.val(A.value);
                                                                else {
                                                                    let X = JSON.parse(w.attr("parms"));
                                                                    M > X[2] && (M = X[2]);
                                                                    y.includes(D.key) || (A.value = R(M, X[3]), B.attr("value", A.value), w.val(R(M, X[3])))
                                                                }
                                                            }), a[A.id].on("keydown", "input", D => {
                                                                let w = ["Backspace", "-", "."];
                                                                (isNaN(+D.key) && !w.includes(D.key) || " " == D.key) && D.preventDefault()
                                                            }), a[A.id].on("change", "input", D => {
                                                                D = $(D.currentTarget);
                                                                let w = +D.val();
                                                                if (isNaN(w) || "" == D.val()) D.val(A.value);
                                                                else {
                                                                    let y = JSON.parse(D.attr("parms"));
                                                                    w > y[2] && (w = y[2]);
                                                                    w < y[1] && (w = y[1]);
                                                                    A.value = R(w, y[3]);
                                                                    B.attr("value", A.value);
                                                                    D.val(R(w, y[3]))
                                                                }
                                                            })
                                                    }
                                                    0 < u && (1 == u ? (B.append(`<div class="title-settings">${this.translation("martingale.settings.minProfit")}</div>`), B.append(a.minProfit), B.append('<div class="stretch"></div>'), B.append(a.actionDecreaseProfit)) : (B.append(`<div class="title-settings">${this.translation(`martingale.settings.${A.id}`)}</div>`), B.append('<div class="stretch"></div>'), B.append(a[A.id])), c.append(B))
                                                }
                                                r.append(c);
                                                d && t.push(f);
                                                return r
                                            },
                                            q = k.find("ul.step-martingale-list");
                                        q.sortable({
                                            cancel: ".martingale-settings-case,.iteam-data.action",
                                            update: (f, d) => {
                                                let a = [];
                                                $(".live-screenshot li.iteam-martingale-case").each(function(c, r) {
                                                    a.push(h[$(r).attr("sortid")])
                                                });
                                                t = a
                                            }
                                        });
                                        for (let f = 0; f < t.length; f++) q.append(g(t[f]));
                                        k.find(".add-iteam-martingale").on("click", ".button", f => {
                                            let d = g(null, !0);
                                            setTimeout(() => {
                                                d.find(".data-martingale-case").click()
                                            }, 300);
                                            q.append(d);
                                            m()
                                        });
                                        let p = k.find(".empty-martingale-list");
                                        m();
                                        n.append(k);
                                        let l = n.find(".cursor");
                                        (async () => {
                                            try {
                                                await b(100);
                                                if (605 > n.width()) return n.css({
                                                    opacity: 1,
                                                    width: n.width,
                                                    height: n.height()
                                                }), n.trigger("stopped"), n.html(`
                                            <div class="not-screen-size-case">
                                                <div class="content-wrap">
                                                    <div class="icon isError"></div>
                                                    <div class="text"> ${this.translation("warnings.notEnoughScreenWidth")}</div>
                                                </div>
                                            </div> 
                                        `);
                                                for (;;) try {
                                                    if (v) break;
                                                    let f = k.find(".add-iteam-martingale .button"),
                                                        d = f.offset(),
                                                        a = n.offset();
                                                    d.top -= a.top - f.height() / 2;
                                                    d.left -= a.left - f.width() / 2;
                                                    l.css(d);
                                                    await b(2300);
                                                    l.attr("class", "cursor click-left");
                                                    await b(100);
                                                    l.attr("class", "cursor");
                                                    if (v) throw "break";
                                                    f.trigger("click");
                                                    await b(1E3);
                                                    f = q.find("li:nth-child(1) .custom-input-select.minProfit");
                                                    d = f.offset();
                                                    a = n.offset();
                                                    d.top -= a.top - f.height() / 2;
                                                    d.left -= a.left - f.width() / 2 + 5;
                                                    l.css(d);
                                                    await b(2300);
                                                    l.attr("class",
                                                        "cursor click-left");
                                                    await b(100);
                                                    l.attr("class", "cursor");
                                                    if (v) throw "break";
                                                    f.trigger("click");
                                                    await b(300);
                                                    f = f.find(".button.up");
                                                    d = f.offset();
                                                    a = n.offset();
                                                    d.top -= a.top - f.height() / 2;
                                                    d.left -= a.left - f.width() / 2 + 5;
                                                    l.css(d);
                                                    await b(2300);
                                                    l.attr("class", "cursor click-left");
                                                    if (v) throw "break";
                                                    f.trigger("mousedown");
                                                    await b(2E3);
                                                    l.attr("class", "cursor");
                                                    if (v) throw "break";
                                                    f.trigger("mouseup");
                                                    d.left -= 30;
                                                    l.css(d);
                                                    await b(2E3);
                                                    l.attr("class", "cursor click-left");
                                                    await b(150);
                                                    if (v) throw "break";
                                                    k.find(".setting-group-head-case").trigger("click");
                                                    l.attr("class", "cursor");
                                                    f = k.find(".add-iteam-martingale .button");
                                                    d = f.offset();
                                                    a = n.offset();
                                                    d.top -= a.top - f.height() / 2;
                                                    d.left -= a.left - f.width() / 2;
                                                    l.css(d);
                                                    await b(2300);
                                                    l.attr("class", "cursor click-left");
                                                    await b(100);
                                                    l.attr("class", "cursor");
                                                    if (v) throw "break";
                                                    f.trigger("click");
                                                    await b(1E3);
                                                    f = q.find("li:nth-child(2) .custom-input-select.minProfit");
                                                    d = f.offset();
                                                    a = n.offset();
                                                    d.top -= a.top - f.height() / 2 - 7;
                                                    d.left -= a.left - f.width() / 2 + 5;
                                                    l.css(d);
                                                    await b(2E3);
                                                    f.addClass("highlight");
                                                    await b(3E3);
                                                    f = q.find("li:nth-child(2) .icon.delete");
                                                    d = f.offset();
                                                    a = n.offset();
                                                    d.top -= a.top - f.height() / 2;
                                                    d.left -= a.left - f.width() / 2;
                                                    l.css(d);
                                                    await b(2300);
                                                    l.attr("class", "cursor click-left");
                                                    if (v) throw "break";
                                                    f.trigger("click");
                                                    await b(100);
                                                    l.attr("class", "cursor");
                                                    await b(500);
                                                    f = q.find("li:nth-child(1) .icon.delete");
                                                    d = f.offset();
                                                    a = n.offset();
                                                    d.top -= a.top - f.height() / 2;
                                                    d.left -= a.left - f.width() / 2;
                                                    l.css(d);
                                                    await b(500);
                                                    q.find("li:nth-child(1)").addClass("hover");
                                                    await b(1800);
                                                    l.attr("class", "cursor click-left");
                                                    if (v) throw "break";
                                                    f.trigger("click");
                                                    await b(100);
                                                    l.attr("class", "cursor");
                                                    await b(500)
                                                } catch {
                                                    break
                                                }
                                            } catch {}
                                        })();
                                        return n
                                    },
                                    Va = v => {
                                        this.runEvent("liveStop", !0);
                                        let n = !1;
                                        this.on("liveStop", "liveFunction", () => {
                                            n = !0
                                        });
                                        let k = ca.clone();
                                        k.addClass("settings");
                                        let t = Ha.clone(),
                                            m = [],
                                            h = () => {
                                                0 == p.children().length ? l.addClass("show") : l.removeClass("show")
                                            },
                                            e = {},
                                            g = this.configuration.availableMartingaleSettings,
                                            q = (d, a = !1) => {
                                                a && (0 == m.length ? d = JSON.parse(JSON.stringify(g)) : 0 < p.find(".iteam-martingale-case.unwrap").length ? (d = p.find(".iteam-martingale-case.unwrap").attr("sortid"),
                                                    d = JSON.parse(JSON.stringify(e[d]))) : d = JSON.parse(JSON.stringify(m[m.length - 1])));
                                                let c = {};
                                                var r = L();
                                                e[r] = d;
                                                let u = $(`<li class="iteam-martingale-case" sortId="${r}" ></li>`);
                                                a && (u.addClass("new"), setTimeout(() => {
                                                    u.removeClass("new")
                                                }, 300));
                                                u.append(`
                                    <div class="data-martingale-case">
                                        <div class="iteam-data martingale-name"> ${this.translation("martingale.step")} \u2116&ensp;</div>
                                        <div class="iteam-data stretch"></div>
                                        <div class="iteam-data action">
                                            <div class="icon unwrap"></div>
                                            <div class="icon delete"></div>
                                        </div>
                                    </div>
                                `);
                                                u.on("click", ".data-martingale-case", function(A) {
                                                    if (null != A.target.closest(".delete")) try {
                                                        m.splice(u.index(), 1), u.addClass("remove"), setTimeout(() => {
                                                            u.remove();
                                                            h()
                                                        }, 300)
                                                    } catch (B) {} else u.hasClass("unwrap") ? u.removeClass("unwrap") : $(".live-screenshot li.iteam-martingale-case").hasClass("unwrap") ? ($(".live-screenshot li.iteam-martingale-case").removeClass("unwrap"), setTimeout(() => {
                                                        u.addClass("unwrap")
                                                    }, 300)) : u.addClass("unwrap")
                                                });
                                                r = $('<div class="martingale-settings-case"></div>');
                                                for (let A = 0; A < d.length; A++) {
                                                    let B = d[A];
                                                    "undefined" == typeof B.value && (B.value = B.values[0]);
                                                    c[B.id] = $(`<div class="custom-input-select ${B.id}"  type="${B.type}" ${"minProfit"==B.id?`value="${B.value}"`:""}></div>`);
                                                    let C = $(`<div class="iteam-settings" value="${B.value}" name="${B.id}"> </div>`);
                                                    switch (B.type) {
                                                        case "verticalNumber":
                                                            c[B.id].append(`
                                                <div class="select-case">
                                                    <div class="value">${B.value}</div>
                                                    <div> % </div>
                                                </div>
                                                <div class="option-case time">     
                                                    <div class="time-case">
                                                        <div class="time-select-case" parms="${JSON.stringify(B.values)}" > 
                                                            <div class="button up icon"></div> 
                                                            <div class="value center">${B.value}</div> 
                                                            <div class="button down icon"></div>
                                                        </div> 
                                                    </div>
                                                </div>
                                            `);
                                                            c[B.id].on("click", w => {
                                                                w = $(w.currentTarget);
                                                                $('.live-screenshot .custom-input-select[type="select"]').removeClass("showselect");
                                                                w.addClass("showselect")
                                                            });
                                                            let D;
                                                            c[B.id].on("mouseup progCall mouseout", ".time-select-case", w => {
                                                                if ("mouseout" == w.type) return clearInterval(D);
                                                                if ("mouseup" == w.type && (clearInterval(D), c[B.id].hasClass("progCall"))) {
                                                                    c[B.id].removeClass("progCall");
                                                                    return
                                                                }
                                                                "progCall" == w.type && c[B.id].addClass("progCall");
                                                                var y = T => {
                                                                    T = +T;
                                                                    return 10 >
                                                                        T ? `0${T}` : `${T}`
                                                                };
                                                                let M = +c[B.id].attr("value"),
                                                                    X = $(w.currentTarget),
                                                                    da, ha, ka = JSON.parse(X.attr("parms"));
                                                                null != w.target.closest(".up") && (da = "up");
                                                                null != w.target.closest(".down") && (da = "down");
                                                                let ia = M;
                                                                switch (da) {
                                                                    case "up":
                                                                        w = ia + ("progCall" == w.type ? 10 : ka[2]);
                                                                        w > ka[1] && (w = ka[0]);
                                                                        M = w;
                                                                        X.find(".value.bottom,.value.top").remove();
                                                                        ha = $(`<div class="value bottom">${y(w)}</div>`);
                                                                        X.append(ha);
                                                                        X.find(".value.center").removeClass("center").addClass("top");
                                                                        setTimeout(() => {
                                                                                ha.removeClass("bottom").addClass("center")
                                                                            },
                                                                            100);
                                                                        break;
                                                                    case "down":
                                                                        w = ia - ("progCall" == w.type ? 10 : ka[2]), w < ka[0] && (w = ka[1]), M = w, X.find(".value.bottom,.value.top").remove(), ha = $(`<div class="value top">${y(w)}</div>`), X.append(ha), X.find(".value.center").removeClass("center").addClass("bottom"), setTimeout(() => {
                                                                            ha.removeClass("top").addClass("center")
                                                                        }, 100)
                                                                }
                                                                y = y(M);
                                                                if (isNaN(y)) return clearInterval(D);
                                                                B.value = y;
                                                                c[B.id].attr("value", B.value);
                                                                c[B.id].find(".select-case .value").html(B.value)
                                                            });
                                                            c[B.id].on("mousedown", ".time-select-case", w => {
                                                                $(w.currentTarget);
                                                                let y;
                                                                null != w.target.closest(".up") && (y = "up");
                                                                null != w.target.closest(".down") && (y = "down");
                                                                void 0 != y && (D = setInterval(function() {
                                                                    c[B.id].find(`.${y}`).trigger("progCall")
                                                                }, 300));
                                                                return !1
                                                            });
                                                            break;
                                                        case "select":
                                                            c[B.id].append(`
                                                <div class="select-case">
                                                    <div class="value">${this.translation(`martingale.settingsValues.${B.value}.short`)}</div>
                                                    <div class="icon selectwrap"></div>
                                                </div>
                                                <div class="option-case"></div> 
                                            `);
                                                            for (let w = 0; w < B.values.length; w++) c[B.id].find(".option-case").append(`
                                                    <div class="option" value="${B.values[w]}" >${this.translation(`martingale.settingsValues.${B.values[w]}.short`)}</div>`);
                                                            c[B.id].on("click", w => {
                                                                let y = $(w.currentTarget);
                                                                if (y.hasClass("showselect")) {
                                                                    if (null != w.target.closest(".option")) {
                                                                        var M = $(w.target).attr("value");
                                                                        w = $(w.target).html();
                                                                        y.find(".select-case .value").html(w);
                                                                        B.value = M;
                                                                        C.attr("value", B.value)
                                                                    }
                                                                    return y.removeClass("showselect")
                                                                }
                                                                $('.live-screenshot .custom-input-select[type="select"]').removeClass("showselect");
                                                                y.addClass("showselect")
                                                            });
                                                            break;
                                                        case "number":
                                                            c[B.id].append('<button action="-"></button>'), c[B.id].append(`<input type="text" value="${B.value}" parms="${JSON.stringify(B.values)}" />`), c[B.id].append('<button action="+"></button>'), c[B.id].on("click", "button", w => {
                                                                w = $(w.currentTarget);
                                                                let y = w.siblings("input"),
                                                                    M = +y.val(),
                                                                    X = JSON.parse(y.attr("parms"));
                                                                switch (w.attr("action")) {
                                                                    case "+":
                                                                        M += X[3];
                                                                        M > X[2] && (M = X[2]);
                                                                        break;
                                                                    case "-":
                                                                        M -= X[3], M < X[1] && (M = X[1])
                                                                }
                                                                y.val(R(M, X[3]));
                                                                B.value = R(M, X[3]);
                                                                C.attr("value",
                                                                    B.value)
                                                            }), c[B.id].on("keyup", "input", w => {
                                                                let y = $(w.currentTarget),
                                                                    M = ["", " ", "-", "."],
                                                                    X = +y.val();
                                                                if (isNaN(X) && !M.includes(w.key)) y.val(B.value);
                                                                else {
                                                                    let da = JSON.parse(y.attr("parms"));
                                                                    X > da[2] && (X = da[2]);
                                                                    M.includes(w.key) || (B.value = R(X, da[3]), C.attr("value", B.value), y.val(R(X, da[3])))
                                                                }
                                                            }), c[B.id].on("keydown", "input", w => {
                                                                let y = ["Backspace", "-", "."];
                                                                (isNaN(+w.key) && !y.includes(w.key) || " " == w.key) && w.preventDefault()
                                                            }), c[B.id].on("change", "input", w => {
                                                                w = $(w.currentTarget);
                                                                let y = +w.val();
                                                                if (isNaN(y) || "" ==
                                                                    w.val()) w.val(B.value);
                                                                else {
                                                                    let M = JSON.parse(w.attr("parms"));
                                                                    y > M[2] && (y = M[2]);
                                                                    y < M[1] && (y = M[1]);
                                                                    B.value = R(y, M[3]);
                                                                    C.attr("value", B.value);
                                                                    w.val(R(y, M[3]))
                                                                }
                                                            })
                                                    }
                                                    0 < A && (1 == A ? (C.append(`<div class="title-settings">${this.translation("martingale.settings.minProfit")}</div>`), C.append(c.minProfit), C.append('<div class="stretch"></div>'), C.append(c.actionDecreaseProfit)) : (C.append(`<div class="title-settings">${this.translation(`martingale.settings.${B.id}`)}</div>`), C.append('<div class="stretch"></div>'),
                                                        C.append(c[B.id])), r.append(C))
                                                }
                                                u.append(r);
                                                a && m.push(d);
                                                return u
                                            },
                                            p = t.find("ul.step-martingale-list");
                                        p.sortable({
                                            cancel: ".martingale-settings-case,.iteam-data.action",
                                            update: (d, a) => {
                                                let c = [];
                                                $("li.iteam-martingale-case").each(function(r, u) {
                                                    c.push(e[$(u).attr("sortid")])
                                                });
                                                m = c
                                            }
                                        });
                                        for (let d = 0; d < m.length; d++) p.append(q(m[d]));
                                        t.find(".add-iteam-martingale").on("click", ".button", d => {
                                            let a = q(null, !0);
                                            setTimeout(() => {
                                                a.find(".data-martingale-case").click()
                                            }, 300);
                                            p.append(a);
                                            h()
                                        });
                                        let l = t.find(".empty-martingale-list");
                                        h();
                                        k.append(t);
                                        let f = k.find(".cursor");
                                        (async () => {
                                            await b(100);
                                            if (605 > k.width()) return k.css({
                                                opacity: 1,
                                                width: k.width,
                                                height: k.height()
                                            }), k.trigger("stopped"), k.html(`
                                        <div class="not-screen-size-case">
                                            <div class="content-wrap">
                                                <div class="icon isError"></div>
                                                <div class="text"> ${this.translation("warnings.notEnoughScreenWidth")}</div>
                                            </div>
                                        </div> 
                                    `);
                                            try {
                                                let a = t.find(".add-iteam-martingale .button"),
                                                    c = a.offset(),
                                                    r = k.offset();
                                                c.top -= r.top - a.height() / 2;
                                                c.left -= r.left - a.width() / 2;
                                                f.css(c);
                                                await b(2300);
                                                f.attr("class", "cursor click-left");
                                                await b(100);
                                                f.attr("class", "cursor");
                                                if (n) throw "break";
                                                a.trigger("click");
                                                await b(1E3);
                                                let u = p.find("li:nth-child(1)"),
                                                    A = u.find(`.iteam-settings[name="${v}"]`),
                                                    B = A.find(`.custom-input-select.${v}`).attr("type");
                                                for (;;) try {
                                                    if (n) break;
                                                    a = A.find(".title-settings");
                                                    c = a.offset();
                                                    r = k.offset();
                                                    c.top -= r.top - a.height();
                                                    c.left -= r.left + 10;
                                                    f.css(c);
                                                    a.removeClass("highlight");
                                                    await b(2300);
                                                    c.left += a.width();
                                                    f.css(c);
                                                    await b(300);
                                                    a.addClass("highlight");
                                                    await b(1700);
                                                    switch (B) {
                                                        case "select":
                                                            if ("actionDecreaseProfit" == v) {
                                                                a = A.find(".custom-input-select.minProfit");
                                                                c = a.offset();
                                                                r = k.offset();
                                                                c.top -= r.top - a.height() / 2;
                                                                c.left -= r.left - a.width() / 2;
                                                                f.css(c);
                                                                await b(2E3);
                                                                f.attr("class", "cursor click-left");
                                                                await b(100);
                                                                if (n) throw "break";
                                                                a.trigger("click");
                                                                f.attr("class", "cursor");
                                                                await b(300);
                                                                a = a.find(".button.up.icon");
                                                                c = a.offset();
                                                                r = k.offset();
                                                                c.top -= r.top - a.height() / 2 + 3;
                                                                c.left -= r.left - a.width() / 2 + 5;
                                                                f.css(c);
                                                                await b(2100);
                                                                f.attr("class", "cursor click-left");
                                                                if (n) throw "break";
                                                                a.trigger("mousedown");
                                                                await b(2E3);
                                                                f.attr("class", "cursor");
                                                                if (n) throw "break";
                                                                a.trigger("mouseup");
                                                                await b(500);
                                                                setTimeout(async () => {
                                                                    f.attr("class", "cursor click-left");
                                                                    n || A.find(".stretch").trigger("click");
                                                                    await b(150);
                                                                    f.attr("class", "cursor")
                                                                }, 150)
                                                            }
                                                            a = A.find(".custom-input-select:not(.minProfit)");
                                                            c = a.offset();
                                                            r = k.offset();
                                                            c.top -= r.top - a.height() / 2;
                                                            c.left -= r.left - a.width() / 2;
                                                            f.css(c);
                                                            await b(2E3);
                                                            f.attr("class", "cursor click-left");
                                                            await b(100);
                                                            if (n) throw "break";
                                                            a.trigger("click");
                                                            f.attr("class", "cursor");
                                                            await b(500);
                                                            a = a.find(".option-case .option:nth-child(2)");
                                                            c = a.offset();
                                                            r = k.offset();
                                                            c.top -= r.top - a.height() / 2;
                                                            c.left -= r.left - a.width() / 2;
                                                            f.css(c);
                                                            await b(1E3);
                                                            a.addClass("hover");
                                                            await b(1500);
                                                            f.attr("class", "cursor click-left");
                                                            await b(100);
                                                            if (n) throw "break";
                                                            a.trigger("click");
                                                            f.attr("class", "cursor");
                                                            a.removeClass("hover");
                                                            await b(1500);
                                                            if ("autoRatio" == v) {
                                                                let y = u.find('.iteam-settings[name="ratio"]');
                                                                a = y.find('.custom-input-select:not(.minProfit) button[action="+"]');
                                                                c = a.offset();
                                                                r = k.offset();
                                                                c.top -= r.top - a.height() / 2;
                                                                c.left -= r.left - a.width() / 2 + 5;
                                                                f.css(c);
                                                                await b(2E3);
                                                                for (var d = 0; 15 > d; d++) {
                                                                    f.attr("class", "cursor click-left");
                                                                    await b(100);
                                                                    if (n) throw "break";
                                                                    a.trigger("click");
                                                                    f.attr("class", "cursor");
                                                                    await b(100)
                                                                }
                                                                await b(1E3);
                                                                a = y.find('.custom-input-select:not(.minProfit) button[action="-"]');
                                                                c =
                                                                    a.offset();
                                                                r = k.offset();
                                                                c.top -= r.top - a.height() / 2;
                                                                c.left -= r.left - a.width() / 2 + 5;
                                                                f.css(c);
                                                                await b(2E3);
                                                                for (d = 0; 15 > d; d++) {
                                                                    f.attr("class", "cursor click-left");
                                                                    await b(100);
                                                                    if (n) throw "break";
                                                                    a.trigger("click");
                                                                    f.attr("class", "cursor");
                                                                    await b(100)
                                                                }
                                                                await b(1E3)
                                                            }
                                                            a = A.find(".custom-input-select:not(.minProfit)");
                                                            c = a.offset();
                                                            r = k.offset();
                                                            c.top -= r.top - a.height() / 2;
                                                            c.left -= r.left - a.width() / 2;
                                                            f.css(c);
                                                            await b(2E3);
                                                            f.attr("class", "cursor click-left");
                                                            await b(100);
                                                            if (n) throw "break";
                                                            a.trigger("click");
                                                            f.attr("class",
                                                                "cursor");
                                                            await b(500);
                                                            a = a.find(".option-case .option:nth-child(1)");
                                                            c = a.offset();
                                                            r = k.offset();
                                                            c.top -= r.top - a.height() / 2;
                                                            c.left -= r.left - a.width() / 2;
                                                            f.css(c);
                                                            await b(1E3);
                                                            a.addClass("hover");
                                                            await b(1500);
                                                            f.attr("class", "cursor click-left");
                                                            await b(100);
                                                            if (n) throw "break";
                                                            a.trigger("click");
                                                            f.attr("class", "cursor");
                                                            a.removeClass("hover");
                                                            await b(1E3);
                                                            if ("actionDecreaseProfit" == v) {
                                                                a = A.find(".custom-input-select.minProfit");
                                                                c = a.offset();
                                                                r = k.offset();
                                                                c.top -= r.top - a.height() / 2 + 3;
                                                                c.left -= r.left - a.width() /
                                                                    2 + 10;
                                                                f.css(c);
                                                                await b(2E3);
                                                                f.attr("class", "cursor click-left");
                                                                await b(100);
                                                                if (n) throw "break";
                                                                a.trigger("click");
                                                                f.attr("class", "cursor");
                                                                await b(300);
                                                                a = a.find(".button.down");
                                                                c = a.offset();
                                                                r = k.offset();
                                                                c.top -= r.top - a.height() / 2 + 3;
                                                                c.left -= r.left - a.width() / 2 + 5;
                                                                f.css(c);
                                                                await b(2100);
                                                                f.attr("class", "cursor click-left");
                                                                if (n) throw "break";
                                                                a.trigger("mousedown");
                                                                await b(2E3);
                                                                f.attr("class", "cursor");
                                                                if (n) throw "break";
                                                                a.trigger("mouseup");
                                                                await b(500);
                                                                setTimeout(async () => {
                                                                    f.attr("class", "cursor click-left");
                                                                    n || A.find(".stretch").trigger("click");
                                                                    await b(150);
                                                                    f.attr("class", "cursor")
                                                                }, 150)
                                                            }
                                                            await b(1E3);
                                                            break;
                                                        case "number":
                                                            let C = A.find('.custom-input-select:not(.minProfit) input[type="text"]'),
                                                                D = C.val();
                                                            a = A.find('.custom-input-select:not(.minProfit) button[action="-"]');
                                                            c = a.offset();
                                                            r = k.offset();
                                                            c.top -= r.top - a.height() / 2;
                                                            c.left -= r.left - a.width() / 2 + 5;
                                                            f.css(c);
                                                            await b(2E3);
                                                            for (d = 0; 30 > d; d++) {
                                                                f.attr("class", "cursor click-left");
                                                                await b(100);
                                                                if (n) throw "break";
                                                                a.trigger("click");
                                                                f.attr("class", "cursor");
                                                                await b(100)
                                                            }
                                                            await b(500);
                                                            a = C;
                                                            c = a.offset();
                                                            r = k.offset();
                                                            c.top -= r.top - a.height() / 2;
                                                            c.left -= r.left - a.width() / 2 - 5;
                                                            f.css(c);
                                                            await b(2E3);
                                                            f.attr("class", "cursor click-left");
                                                            await b(100);
                                                            f.attr("class", "cursor");
                                                            a.focus();
                                                            await b(500);
                                                            let w = a.val().split("");
                                                            for (; 0 < w.length;) w.pop(), a.val(w.join("")), await b(200);
                                                            await b(500);
                                                            d = D;
                                                            for (let y = 0; y < d.length; y++) a.val(a.val() + d[y]), await b(200);
                                                            a = A.find(".stretch");
                                                            c = a.offset();
                                                            r = k.offset();
                                                            c.top -= r.top - a.height() / 2;
                                                            c.left -= r.left - a.width() + 10;
                                                            f.css(c);
                                                            await b(2E3);
                                                            f.attr("class", "cursor click-left");
                                                            C.blur();
                                                            await b(100);
                                                            f.attr("class", "cursor");
                                                            await b(1E3)
                                                    }
                                                } catch {
                                                    break
                                                }
                                            } catch {}
                                        })();
                                        return k
                                    },
                                    gb = v => {
                                        this.runEvent("liveStop", !0);
                                        let n = !1;
                                        this.on("liveStop", "liveFunction", () => {
                                            n = !0
                                        });
                                        let k = ca.clone();
                                        k.addClass("settings");
                                        let t = N();
                                        k.append(t);
                                        let m = k.find(".cursor");
                                        k.css({
                                            opacity: 0
                                        });
                                        (async () => {
                                            await b(300);
                                            k.css({
                                                opacity: 1,
                                                width: k.width,
                                                height: k.height()
                                            });
                                            if (605 > k.width()) return k.trigger("stopped"), k.html(`
                                        <div class="not-screen-size-case">
                                            <div class="content-wrap">
                                                <div class="icon isError"></div>
                                                <div class="text"> ${this.translation("warnings.notEnoughScreenWidth")}</div>
                                            </div>
                                        </div> 
                                    `);
                                            try {
                                                if (!v) throw !0;
                                                for (;;) {
                                                    let h, e, g;
                                                    try {
                                                        switch (v) {
                                                            case "viewDealDetails":
                                                                await b(1E3);
                                                                h = t.find(".table-view-history-case tbody tr:nth-child(2)");
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -= g.left - h.width() / 2;
                                                                m.css(e);
                                                                await b(2500);
                                                                m.attr("class", "cursor click-left");
                                                                await b(100);
                                                                m.attr("class", "cursor");
                                                                if (n) throw "break";
                                                                h.trigger("click");
                                                                await b(3E3);
                                                                h = k.find(".wrap-min-popup-live-case .tab-case .iteam-tab-case:nth-child(2)");
                                                                e = h.offset();
                                                                g =
                                                                    k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -= g.left - h.width() / 2;
                                                                e.left -= 20;
                                                                m.css(e);
                                                                await b(2500);
                                                                m.attr("class", "cursor click-left");
                                                                await b(100);
                                                                m.attr("class", "cursor");
                                                                if (n) throw "break";
                                                                h.trigger("click");
                                                                await b(3E3);
                                                                h = k.find(".wrap-min-popup-live-case .tab-case .iteam-tab-case:nth-child(1)");
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -= g.left - h.width() / 2;
                                                                e.left -= 20;
                                                                m.css(e);
                                                                await b(2500);
                                                                m.attr("class", "cursor click-left");
                                                                await b(100);
                                                                m.attr("class", "cursor");
                                                                if (n) throw "break";
                                                                h.trigger("click");
                                                                await b(500);
                                                                h = k.find(".wrap-min-popup-live-case .button-open-logs-book");
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -= g.left - h.width() / 2;
                                                                m.css(e);
                                                                await b(2500);
                                                                m.attr("class", "cursor click-left");
                                                                await b(100);
                                                                m.attr("class", "cursor");
                                                                if (n) throw "break";
                                                                h.trigger("click");
                                                                await b(1E3);
                                                                h = k.find(".wrap-min-popup-live-case #lb .highlighted");
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -= g.left - h.width() / 2;
                                                                e.left -= 150;
                                                                m.css(e);
                                                                await b(5E3);
                                                                h = k.find(".wrap-min-popup-live-case #lb .nav-button-case.next");
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -= g.left - h.width() / 2;
                                                                m.css(e);
                                                                await b(2500);
                                                                m.attr("class", "cursor click-left");
                                                                await b(100);
                                                                m.attr("class", "cursor");
                                                                if (n) throw "break";
                                                                h.trigger("click");
                                                                h = k.find(".wrap-min-popup-live-case #lb .highlighted");
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -= g.left - h.width() / 2;
                                                                e.left -= 150;
                                                                m.css(e);
                                                                await b(5E3);
                                                                h = k.find('.wrap-min-popup-live-case #lb button[class="ok"]');
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -=
                                                                    g.left - h.width() / 2;
                                                                m.css(e);
                                                                await b(2500);
                                                                m.attr("class", "cursor click-left");
                                                                await b(100);
                                                                m.attr("class", "cursor");
                                                                if (n) throw "break";
                                                                h.trigger("click");
                                                                await b(500);
                                                                h = k.find(".wrap-min-popup-live-case .button-open-martin-series");
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -= g.left - h.width() / 2;
                                                                m.css(e);
                                                                await b(2500);
                                                                m.attr("class", "cursor click-left");
                                                                await b(100);
                                                                m.attr("class", "cursor");
                                                                if (n) throw "break";
                                                                h.trigger("click");
                                                                await b(3E3);
                                                                h = k.find(".wrap-min-popup-live-case #mg .button-open-logs-book");
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -= g.left - h.width() / 2;
                                                                m.css(e);
                                                                await b(2500);
                                                                m.attr("class", "cursor click-left");
                                                                await b(100);
                                                                m.attr("class", "cursor");
                                                                if (n) throw "break";
                                                                h.trigger("click");
                                                                await b(1E3);
                                                                h = k.find(".wrap-min-popup-live-case #lb .highlighted");
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -= g.left - h.width() / 2;
                                                                e.left -= 150;
                                                                m.css(e);
                                                                await b(5E3);
                                                                h = k.find(".wrap-min-popup-live-case #lb .nav-button-case.next");
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() /
                                                                    2;
                                                                e.left -= g.left - h.width() / 2;
                                                                m.css(e);
                                                                await b(2500);
                                                                for (let q = 0; 3 > q; q++) {
                                                                    h = k.find(".wrap-min-popup-live-case #lb .nav-button-case.next");
                                                                    m.attr("class", "cursor click-left");
                                                                    await b(100);
                                                                    m.attr("class", "cursor");
                                                                    if (n) throw "break";
                                                                    h.trigger("click");
                                                                    await b(1E3)
                                                                }
                                                                await b(1E3);
                                                                h = k.find(".wrap-min-popup-live-case #lb .highlighted");
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -= g.left - h.width() / 2;
                                                                e.left -= 150;
                                                                m.css(e);
                                                                await b(5E3);
                                                                h = k.find('.wrap-min-popup-live-case #lb button[class="ok"]');
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -= g.left - h.width() / 2;
                                                                m.css(e);
                                                                await b(2500);
                                                                m.attr("class", "cursor click-left");
                                                                await b(100);
                                                                m.attr("class", "cursor");
                                                                if (n) throw "break";
                                                                h.trigger("click");
                                                                await b(500);
                                                                h = k.find('.wrap-min-popup-live-case #mg button[class="ok"]');
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -= g.left - h.width() / 2;
                                                                m.css(e);
                                                                await b(2500);
                                                                m.attr("class", "cursor click-left");
                                                                await b(100);
                                                                m.attr("class", "cursor");
                                                                if (n) throw "break";
                                                                h.trigger("click");
                                                                await b(500);
                                                                h = k.find('.wrap-min-popup-live-case #deal button[class="ok"]');
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -= g.left - h.width() / 2;
                                                                m.css(e);
                                                                await b(2500);
                                                                m.attr("class", "cursor click-left");
                                                                await b(100);
                                                                m.attr("class", "cursor");
                                                                if (n) throw "break";
                                                                h.trigger("click");
                                                                await b(1E3);
                                                                break;
                                                            case "detailedMartinSeries":
                                                                await b(1E3);
                                                                h = t.find(".iteam-filter-case.group .filter-case .custom-input-select");
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -= g.left - h.width() / 2;
                                                                m.css(e);
                                                                await b(2500);
                                                                m.attr("class", "cursor click-left");
                                                                await b(100);
                                                                m.attr("class", "cursor");
                                                                if (n) throw "break";
                                                                h.trigger("click");
                                                                await b(300);
                                                                h = h.find(".option-case .option:nth-child(2)");
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -= g.left - h.width() / 2;
                                                                m.css(e);
                                                                await b(1E3);
                                                                h.addClass("hover");
                                                                await b(1500);
                                                                m.attr("class", "cursor click-left");
                                                                await b(100);
                                                                m.attr("class", "cursor");
                                                                if (n) throw "break";
                                                                h.trigger("click");
                                                                h.removeClass("hover");
                                                                await b(300);
                                                                h = t.find(".iteam-filter-case.apply .filter-case");
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -= g.left - h.width() / 2;
                                                                m.css(e);
                                                                await b(2500);
                                                                m.attr("class", "cursor click-left");
                                                                await b(100);
                                                                m.attr("class", "cursor");
                                                                if (n) throw "break";
                                                                h.trigger("click");
                                                                await b(500);
                                                                h = t.find(".table-view-history-case tbody tr:nth-child(1)");
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -= g.left - h.width() / 2;
                                                                m.css(e);
                                                                await b(2500);
                                                                m.attr("class", "cursor click-left");
                                                                await b(100);
                                                                m.attr("class", "cursor");
                                                                if (n) throw "break";
                                                                h.trigger("click");
                                                                await b(3E3);
                                                                h = k.find(".wrap-min-popup-live-case #mg .wrap-deal-list table tbody tr:nth-child(2)");
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -= g.left - h.width() / 2;
                                                                m.css(e);
                                                                await b(1E3);
                                                                k.find(".wrap-min-popup-live-case #mg .wrap-deal-list table tbody tr:nth-child(1)").addClass("hover");
                                                                await b(300);
                                                                k.find(".wrap-min-popup-live-case #mg .wrap-deal-list table tbody tr:nth-child(1)").removeClass("hover");
                                                                await b(300);
                                                                h.addClass("hover");
                                                                await b(1E3);
                                                                m.attr("class", "cursor click-left");
                                                                await b(100);
                                                                m.attr("class", "cursor");
                                                                if (n) throw "break";
                                                                h.trigger("click");
                                                                h.removeClass("hover");
                                                                await b(3E3);
                                                                h = k.find('.wrap-min-popup-live-case #deal button[class="ok"]');
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -= g.left - h.width() / 2;
                                                                m.css(e);
                                                                await b(2500);
                                                                m.attr("class", "cursor click-left");
                                                                await b(100);
                                                                m.attr("class", "cursor");
                                                                if (n) throw "break";
                                                                h.trigger("click");
                                                                await b(500);
                                                                h = k.find('.wrap-min-popup-live-case #mg button[class="ok"]');
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -=
                                                                    g.left - h.width() / 2;
                                                                m.css(e);
                                                                await b(2500);
                                                                m.attr("class", "cursor click-left");
                                                                await b(100);
                                                                m.attr("class", "cursor");
                                                                if (n) throw "break";
                                                                h.trigger("click");
                                                                await b(500);
                                                                h = t.find(".iteam-filter-case.group .filter-case .custom-input-select");
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -= g.left - h.width() / 2;
                                                                m.css(e);
                                                                await b(2500);
                                                                m.attr("class", "cursor click-left");
                                                                await b(100);
                                                                m.attr("class", "cursor");
                                                                if (n) throw "break";
                                                                h.trigger("click");
                                                                await b(300);
                                                                h = h.find(".option-case .option:nth-child(1)");
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -= g.left - h.width() / 2;
                                                                m.css(e);
                                                                await b(1E3);
                                                                h.addClass("hover");
                                                                await b(1500);
                                                                m.attr("class", "cursor click-left");
                                                                await b(100);
                                                                m.attr("class", "cursor");
                                                                if (n) throw "break";
                                                                h.trigger("click");
                                                                h.removeClass("hover");
                                                                await b(300);
                                                                h = t.find(".iteam-filter-case.apply .filter-case");
                                                                e = h.offset();
                                                                g = k.offset();
                                                                e.top -= g.top - h.height() / 2;
                                                                e.left -= g.left - h.width() / 2;
                                                                m.css(e);
                                                                await b(2500);
                                                                m.attr("class", "cursor click-left");
                                                                await b(100);
                                                                m.attr("class", "cursor");
                                                                if (n) throw "break";
                                                                h.trigger("click");
                                                                await b(1E3)
                                                        }
                                                    } catch (q) {
                                                        break
                                                    }
                                                }
                                                throw !0;
                                            } catch {}
                                        })();
                                        return k
                                    },
                                    kb = () => {
                                        this.runEvent("liveStop", !0);
                                        this.on("liveStop", "liveFunction", () => {});
                                        let v = ca.clone();
                                        v.addClass("settings");
                                        let n = E();
                                        v.append(n);
                                        v.css({
                                            height: "400px"
                                        });
                                        n.css({
                                            height: "100%",
                                            transform: "scale(0.9)"
                                        });
                                        v.find(".cursor").css({
                                            opacity: 0
                                        });
                                        return v
                                    },
                                    mb = () => {
                                        this.runEvent("liveStop", !0);
                                        this.on("liveStop", "liveFunction", () => {});
                                        let v = ca.clone();
                                        v.addClass("settings");
                                        v.css({
                                            height: "330px",
                                            display: "flex",
                                            "align-items": "end"
                                        });
                                        setTimeout(() => {
                                            H("indicatorRsi", this.storage.strategies)
                                        }, 10);
                                        v.find(".cursor").css({
                                            opacity: 0
                                        });
                                        return v
                                    },
                                    pb = () => {
                                        this.runEvent("liveStop", !0);
                                        this.on("liveStop", "liveFunction", () => {});
                                        let v = ca.clone();
                                        v.addClass("settings");
                                        v.find(".cursor").css({
                                            opacity: 0
                                        });
                                        let n = ta.clone();
                                        n.find("table.coin-list-table tbody tr:nth-child(2)").addClass("hover");
                                        v.append(n);
                                        return v
                                    },
                                    K = Ba.clone();
                                K.addClass(F);
                                let O;
                                switch (F) {
                                    case "mainProvisions":
                                        let v = $(`
                                    <div class="">
                                        ${this.translation("manual.pages.whatIsPocketOptionRobot")} 
                                    </div>
                                    <ul>
                                        <li class="manual">${this.translation("manual.pages.openAutomaticTransactions")}</li>
                                        <li class="manual">${this.translation("manual.pages.createYourStrategies")}</li> 
                                    </ul>
                                    <div>
                                        ${this.translation("manual.pages.useRobotFreeRegisterAccount")}
                                    </div>
                                    <div class="registration-form">
                                        <div class="page-register parent  dark-form" style="">
                                            <div class="login-content block">
                                                <div class="t-a-center form-logo-wrap">
                                                    <img class="" src="../img/svg/pocketOption.svg">
                                                </div>
                                                <div id="client-reg-form" class="m-10">
                                                    <div class="form-group">
                                                        <input class="client-reg-form" name="email" autocomplete="off" id="client-email" value="" placeholder="${this.translation("manual.pages.registrationForm.email")}" class="form-control h-30">
                                                        <label id="client-email-error" class="c-red display-none f-s-9"></label>
                                                    </div>
                                                    <div class="form-group password-container">
                                                        <input class="client-reg-form" type="password" autocomplete="off" name="password" value="" id="client-password" placeholder="${this.translation("manual.pages.registrationForm.password")}" class="form-control h-30">
                                                        <label id="client-password-error" class="c-red display-none f-s-9 "></label>
                                                    </div>
                                                    <div class="form-group rules">
                                                        <label id="client-agreement-error" class="c-red m-t-n10 display-none f-s-9 "></label>
                                                        <div class="checkbox">
                                                            <label class="checkbox-wrap">
                                                                <input class="client-reg-form-checkbox" type="checkbox" name="rules" id="client-agreement" value="1">
                                                                <p class="ruls f-s-9" style="color: white">
                                                                   ${this.translation("manual.pages.registrationForm.approval",{urlOffer:`${this.storage.configuration.affiliateData.regDomains}/pdf/offer_en.pdf`})}
                                                                </p>
                                                            </label>
                                                        </div>
                                                    </div>
                                                    <div class="form-group">
                                                        <button id="client-submit" class="waves btn btn-green-light btn-block p-5 f-s-13 ">
                                                            ${this.translation("manual.pages.registrationForm.registration")}
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div>
                                        ${this.translation("manual.pages.whatAlreadyRegisteredPocketOption")} 
                                        <ul>
                                            <li class="manual"> 
                                                <div>
                                                    ${this.translation("manual.pages.contactSupportRequestId",{affcode:this.affiliate.code})} 
                                                <div>
                                            </li>
                                            <li class="manual"> 
                                                <div class="wrap">
                                                    ${this.translation("manual.pages.deleteOldAccount")}
                                                </div> 
                                            </li> 
                                        </ul>  
                                    <div>
                                `),
                                            n = v.find("button#client-submit");
                                        n.on("click", () => {
                                            let w = () => {
                                                    n.attr("disabled", !1).html(this.translation("manual.pages.registrationForm.registration"))
                                                },
                                                y = {
                                                    mail: {
                                                        input: v.find("#client-email"),
                                                        label: v.find("#client-email-error")
                                                    },
                                                    password: {
                                                        input: v.find("#client-password"),
                                                        label: v.find("#client-password-error")
                                                    },
                                                    agreement: {
                                                        input: v.find("#client-agreement"),
                                                        label: v.find("#client-agreement-error")
                                                    }
                                                },
                                                M = v.find('input[name="email"]').val(),
                                                X = v.find('input[name="password"]').val(),
                                                da = v.find('input[name="rules"]').is(":checked");
                                            (() => {
                                                n.attr("disabled", !0).html(this.translation("manual.pages.registrationForm.waiting"))
                                            })();
                                            for (let ha in y) y[ha].input.removeClass("border-c-red"), y[ha].label.addClass("display-none"), y[ha].label.text("");
                                            $.post(this.configuration.appData.formRegUrl, {
                                                data: JSON.stringify({
                                                    email: M,
                                                    password: X,
                                                    agreement: da,
                                                    lang: this.storage.app.language || "ru",
                                                    campaignId: this.affiliate.campaignId || "843573",
                                                    domain: "pocketoption.com"
                                                })
                                            }, ha => {
                                                ha = JSON.parse(ha);
                                                if (null !=
                                                    ha.error.code) {
                                                    let ka = ha.error.field;
                                                    y[ka].input.addClass("border-c-red");
                                                    y[ka].label.removeClass("display-none");
                                                    y[ka].label.text(ha.error.message)
                                                } else ha = new URL(ha.redirectLink), ha.host = this.configuration.appData.platformHost, chrome.runtime.sendMessage({
                                                    sender: "panell",
                                                    event: "openTab",
                                                    isReglink: !0,
                                                    url: ha.toString()
                                                }), v.find('input[name="email"]').val(""), v.find('input[name="password"]').val(""), v.find('input[name="rules"]').removeAttr("checked")
                                            }).fail(function() {
                                                alert(this.transaction("errors.somethingWrong"))
                                            }).always(function() {
                                                w()
                                            })
                                        });
                                        K.html(v);
                                        break;
                                    case "strategies":
                                        F = [{
                                            id: "open-settings",
                                            function: ra,
                                            data: {
                                                marks: ["manual.pages.toSwitchStrategySettingMode"],
                                                parms: {}
                                            }
                                        }, {
                                            id: "start-strategies",
                                            function: oa,
                                            data: {
                                                marks: ["manual.pages.toLaunchStrategySliderOnPosition"],
                                                parms: {}
                                            }
                                        }, {
                                            id: "stop-strategies",
                                            function: Aa,
                                            data: {
                                                marks: ["manual.pages.toStopStrategySliderOffPosition"],
                                                parms: {}
                                            }
                                        }, {
                                            id: "create-strategies",
                                            function: V,
                                            data: {
                                                marks: ["manual.pages.youCreateStrategyBasedSettings"],
                                                parms: {}
                                            }
                                        }, {
                                            id: "delete-strategies",
                                            function: va,
                                            data: {
                                                marks: ["manual.pages.youDeleteStrategy"],
                                                parms: {}
                                            }
                                        }, {
                                            id: "create\u0441opy-strategies",
                                            function: Wa,
                                            data: {
                                                marks: ["manual.pages.youCreateCopyStrategy"],
                                                parms: {}
                                            }
                                        }];
                                        V = $(`
                                    <div>
                                        <div class="functional-main-screen">
                                            <p>
                                                <span class="icon trade"> <b>${this.translation("manual.categories.autoTrade")}</b> </span><br>${this.translation("manual.pages.thisTheMainMenuBlock")}
                                            </p>
                                            <div class="open-settings-case">
                                                <div class="live-screenshot-case"></div>
                                                <div class="content"> </div>
                                            </div>
                                        </div>
                                        <div class="info-state-robot">
                                            <div class="content">
                                                ${this.translation("manual.pages.loggingPlatformAccountLicenseUnlimited")}
                                            </div>
                                            <div class="live-screenshot robot-condition">
                                                <div class="robot-condition-case">
                                                    <div class="case-title">${this.translation("platform.stateRobot")}</div>
                                                    <div class="iteam-condition-case status">
                                                        <div class="title">${this.translation("platform.status")}</div> 
                                                        <div class="value">${this.translation("platform.textStatus.connectDemo")}</div>
                                                    </div>
                                                    <div class="iteam-condition-case chartWork">
                                                        <div class="title">${this.translation("platform.chartWork")}</div>
                                                        <div class="value">0/0</div>
                                                    </div>
                                                    <div class="iteam-condition-case license">
                                                        <div class="title">${this.translation("platform.license")}</div>
                                                        <div class="value">${this.translation("platform.licenseStatus.unlimited")}</div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                `);
                                        let k = V.find(".open-settings-case .live-screenshot-case"),
                                            t = V.find(".open-settings-case .content");
                                        F.forEach(w => {
                                            let y = $(`
                                        <div class="iteam-open-settings ${w.id}">
                                            ${w.data.marks.map(M=>this.translation(M,w.data.parms))}
                                        </div> 
                                    `);
                                            y.on("click", () => {
                                                let M = y.hasClass("select");
                                                t.find(".iteam-open-settings").removeClass("select");
                                                M ? k.html(Q()) : (y.addClass("select"), k.html(w.function()))
                                            });
                                            t.append(y)
                                        });
                                        this.on("windowResize", "manual", () => {
                                            t.find(".iteam-open-settings").removeClass("select");
                                            k.html(Q())
                                        });
                                        this.on("allliveStop", "manual", () => {
                                            t.find(".iteam-open-settings").removeClass("select");
                                            k.html(Q())
                                        });
                                        k.html(Q());
                                        K.html(V);
                                        break;
                                    case "assets":
                                        F = [{
                                            id: "assets-groups",
                                            function: ab,
                                            data: {
                                                marks: ["manual.pages.allAssetsPlatformAvailable"],
                                                parms: {}
                                            }
                                        }, {
                                            id: "asset-selection",
                                            function: U,
                                            data: {
                                                marks: ["manual.pages.selectDesiredAssetSimplyClick"],
                                                parms: {}
                                            }
                                        }, {
                                            id: "asset-find",
                                            function: Da,
                                            data: {
                                                marks: ["manual.pages.convenienceSearchOption"],
                                                parms: {}
                                            }
                                        }];
                                        V = $(`
                                    <div class="functional-edit-strategy">
                                        <p>${this.translation("manual.categories.assetSelection")}</p>
                                        <div class="live-screenshot-case"></div>
                                        <div class="content"> </div>
                                    </div> 
                                `);
                                        let m = V.find(".live-screenshot-case"),
                                            h = V.find(".content");
                                        F.forEach(w => {
                                            let y = $(`
                                        <div class="iteam-edit-strategy ${w.id}">
                                            ${w.data.marks.map(M=>this.translation(M,w.data.parms)).join()}
                                        </div>
                                    `);
                                            y.on("click", () => {
                                                let M = y.hasClass("select");
                                                h.find(".iteam-edit-strategy").removeClass("select");
                                                M ? m.html(Ka()) : (y.addClass("select"), m.html(w.function()))
                                            });
                                            h.append(y)
                                        });
                                        this.on("windowResize", "manual", () => {
                                            clearTimeout(O);
                                            O = setTimeout(() => {
                                                h.find(".iteam-edit-strategy").removeClass("select");
                                                m.html(Ka())
                                            }, 700)
                                        });
                                        this.on("allliveStop", "manual", () => {
                                            h.find(".iteam-edit-strategy").removeClass("select");
                                            m.html(Ka())
                                        });
                                        m.html(Ka());
                                        K.html(V);
                                        break;
                                    case "indicators":
                                        F = [{
                                            id: "add-indicator",
                                            function: Pa,
                                            data: {
                                                marks: ["manual.pages.addNewIndicatorStrategy"],
                                                parms: {}
                                            }
                                        }, {
                                            id: "checking-condition",
                                            function: () => wa("timeInspection"),
                                            data: {
                                                marks: ["manual.pages.checkingCondition"],
                                                parms: {}
                                            }
                                        }, {
                                            id: "type-price-indicator",
                                            function: () => wa("priceType"),
                                            data: {
                                                marks: ["manual.pages.typePriceIndicatorCalculation"],
                                                parms: {}
                                            }
                                        }, {
                                            id: "timeframe-indicator-calculation",
                                            function: () => wa("tf"),
                                            data: {
                                                marks: ["manual.pages.timeframeIndicatorCalculation"],
                                                parms: {}
                                            }
                                        }, {
                                            id: "bar-indicator-calculation",
                                            function: () => wa("checkBar"),
                                            data: {
                                                marks: ["manual.pages.barIndicatorCalculation"],
                                                parms: {}
                                            }
                                        }, {
                                            id: "period-indicator-calculation",
                                            function: () => wa("bbPeriod"),
                                            data: {
                                                marks: ["manual.pages.periodIndicatorCalculation"],
                                                parms: {}
                                            }
                                        }];
                                        V = $(`
                                    <div class="functional-edit-strategy indicators">
                                        <p>${this.translation("manual.categories.aindicatorsSelection")}</p>
                                        <div class="live-screenshot-case"></div>
                                        <div class="content"> </div>
                                    </div>
                                `);
                                        let e = V.find(".live-screenshot-case"),
                                            g = V.find(".content");
                                        F.forEach(w => {
                                            let y = $(`
                                        <div class="iteam-edit-strategy ${w.id}"> 
                                            ${w.data.marks.map(M=>this.translation(M,w.data.parms)).join()}         
                                        </div>
                                    `);
                                            y.on("click", () => {
                                                var M = y.hasClass("select");
                                                g.find(".iteam-edit-strategy").removeClass("select");
                                                M ? e.html(ua()) : (y.addClass("select"), M = w.function(), e.html(M), M.on("stopped", () => {
                                                    y.removeClass("select")
                                                }))
                                            });
                                            g.append(y)
                                        });
                                        e.html(ua());
                                        this.on("windowResize", "manual", () => {
                                            clearTimeout(O);
                                            O = setTimeout(() => {
                                                g.find(".iteam-edit-strategy").removeClass("select");
                                                e.html(ua())
                                            }, 700)
                                        });
                                        this.on("allliveStop", "manual", () => {
                                            g.find(".iteam-edit-strategy").removeClass("select");
                                            e.html(ua())
                                        });
                                        K.html(V);
                                        break;
                                    case "regulations":
                                        F = $(`
                                    <div class="functional-edit-strategy indicators">
                                        <p>${this.translation("manual.categories.regulationsSelection")}</p> 
                                        <div class="live-screenshot-case">
                                        </div>
                                        <div class="content">
                                            
                                        </div>
                                    </div>
                                `);
                                        let q = F.find(".live-screenshot-case"),
                                            p = F.find(".content");
                                        [{
                                            id: "mode",
                                            function: () => Fa("mode"),
                                            data: {
                                                marks: ["manual.pages.modeRobotOperating"],
                                                parms: {}
                                            }
                                        }, {
                                            id: "timeFrom",
                                            function: () => Fa("timeFrom"),
                                            data: {
                                                marks: ["manual.pages.timeFromRobotOperating"],
                                                parms: {}
                                            }
                                        }, {
                                            id: "minProfit",
                                            function: () => Fa("minProfit"),
                                            data: {
                                                marks: ["manual.pages.minProfitRobotOperating"],
                                                parms: {}
                                            }
                                        }, {
                                            id: "expiration",
                                            function: () => Fa("expiration"),
                                            data: {
                                                marks: ["manual.pages.expirationRobotOperating"],
                                                parms: {}
                                            }
                                        }, {
                                            id: "bet",
                                            function: () => Fa("bet"),
                                            data: {
                                                marks: ["manual.pages.betRobotOperating"],
                                                parms: {}
                                            }
                                        }, {
                                            id: "maxBets",
                                            function: () => Fa("maxBets"),
                                            data: {
                                                marks: ["manual.pages.maxBetsRobotOperating"],
                                                parms: {}
                                            }
                                        }, {
                                            id: "sl",
                                            function: () => Fa("sl"),
                                            data: {
                                                marks: ["manual.pages.slRobotOperating"],
                                                parms: {}
                                            }
                                        }, {
                                            id: "tp",
                                            function: () => Fa("tp"),
                                            data: {
                                                marks: ["manual.pages.tpRobotOperating"],
                                                parms: {}
                                            }
                                        }].forEach(w => {
                                            let y = $(`
                                        <div class="iteam-edit-strategy ${w.id}"> 
                                            ${w.data.marks.map(M=>this.translation(M,w.data.parms)).join()}         
                                        </div>
                                    `);
                                            y.on("click", () => {
                                                var M = y.hasClass("select");
                                                p.find(".iteam-edit-strategy").removeClass("select");
                                                M ? q.html(Za()) : (M = w.function(), y.addClass("select"), q.html(M), M.on("stopped", () => {
                                                    y.removeClass("select")
                                                }))
                                            });
                                            p.append(y)
                                        });
                                        this.on("windowResize", "manual", () => {
                                            clearTimeout(O);
                                            O = setTimeout(() => {
                                                p.find(".iteam-edit-strategy").removeClass("select");
                                                q.html(Za())
                                            }, 700)
                                        });
                                        this.on("allliveStop", "manual", () => {
                                            p.find(".iteam-edit-strategy").removeClass("select");
                                            q.html(Za())
                                        });
                                        q.html(Za());
                                        K.html(F);
                                        break;
                                    case "martingale":
                                        F = [{
                                                id: "addStep",
                                                function: bb,
                                                data: {
                                                    marks: ["manual.pages.addStepMartingale"],
                                                    parms: {}
                                                }
                                            }, {
                                                id: "action-decreaseProfit",
                                                function: () => Va("actionDecreaseProfit"),
                                                data: {
                                                    marks: ["manual.pages.robotActionDecreaseProfit"],
                                                    parms: {}
                                                }
                                            }, {
                                                id: "action-disabledAsset",
                                                function: () => Va("disabledAsset"),
                                                data: {
                                                    marks: ["manual.pages.robotActionDisabledAsset"],
                                                    parms: {}
                                                }
                                            }, {
                                                id: "action-expiration",
                                                function: () => Va("expiration"),
                                                data: {
                                                    marks: ["manual.pages.robotMartinExpiration"],
                                                    parms: {}
                                                }
                                            },
                                            {
                                                id: "action-disabled-expiration",
                                                function: () => Va("disabledExpiration"),
                                                data: {
                                                    marks: ["manual.pages.robotActionDisabledExpiration"],
                                                    parms: {}
                                                }
                                            }, {
                                                id: "action-direction",
                                                function: () => Va("direction"),
                                                data: {
                                                    marks: ["manual.pages.robotMartinDirection"],
                                                    parms: {}
                                                }
                                            }, {
                                                id: "action-auto-ratio",
                                                function: () => Va("autoRatio"),
                                                data: {
                                                    marks: ["manual.pages.robotMartinAutoRatio"],
                                                    parms: {}
                                                }
                                            }
                                        ];
                                        V = $(`
                                    <div class="functional-edit-strategy indicators">
                                        <p>${this.translation("manual.categories.regulationsMartingale")}</p> 
                                        <div class="live-screenshot-case">
                                        </div>
                                        <div class="content">
                                            
                                        </div>
                                    </div>
                                `);
                                        let l = V.find(".live-screenshot-case"),
                                            f = V.find(".content");
                                        F.forEach(w => {
                                            let y = $(`
                                        <div class="iteam-edit-strategy ${w.id}"> 
                                            ${w.data.marks.map(M=>this.translation(M,w.data.parms)).join()}         
                                        </div>
                                    `);
                                            y.on("click", () => {
                                                var M = y.hasClass("select");
                                                f.find(".iteam-edit-strategy").removeClass("select");
                                                M ? l.html(cb()) : (M = w.function(), y.addClass("select"), l.html(M), M.on("stopped", () => {
                                                    y.removeClass("select")
                                                }))
                                            });
                                            f.append(y)
                                        });
                                        this.on("windowResize", "manual", () => {
                                            clearTimeout(O);
                                            O = setTimeout(() => {
                                                f.find(".iteam-edit-strategy").removeClass("select");
                                                l.html(cb())
                                            }, 700)
                                        });
                                        this.on("allliveStop", "manual", () => {
                                            f.find(".iteam-edit-strategy").removeClass("select");
                                            l.html(cb())
                                        });
                                        l.html(cb());
                                        K.html(V);
                                        break;
                                    case "history":
                                        F = $(`
                                    <div class="functional-edit-strategy indicators">
                                        <p>${this.translation("manual.categories.historyLong")}</p> 
                                        <div class="live-screenshot-case">
                                        </div>
                                        <div class="content">
                                            
                                        </div>
                                    </div>
                                `);
                                        let d = F.find(".live-screenshot-case"),
                                            a = F.find(".content");
                                        [{
                                            id: "main-history",
                                            function: () => gb("viewDealDetails"),
                                            data: {
                                                marks: ["manual.pages.detailedViewTransactionInformation"],
                                                parms: {}
                                            }
                                        }, {
                                            id: "main-detailed-martinSeries",
                                            function: () => gb("detailedMartinSeries"),
                                            data: {
                                                marks: ["manual.pages.detailedMartinSeries"],
                                                parms: {}
                                            }
                                        }].forEach(w => {
                                            let y = $(`
                                        <div class="iteam-edit-strategy ${w.id}"> 
                                            ${w.data.marks.map(M=>this.translation(M,w.data.parms)).join()}         
                                        </div>
                                    `);
                                            y.on("click", () => {
                                                var M = y.hasClass("select");
                                                a.find(".iteam-edit-strategy").removeClass("select");
                                                M ? d.html(gb()) : (y.addClass("select"), M = w.function(), d.html(M), M.on("stopped", () => {
                                                    y.removeClass("select")
                                                }))
                                            });
                                            a.append(y)
                                        });
                                        this.on("windowResize", "manual", () => {
                                            clearTimeout(O);
                                            O = setTimeout(() => {
                                                a.find(".iteam-edit-strategy").removeClass("select");
                                                d.html(gb())
                                            }, 700)
                                        });
                                        this.on("allliveStop", "manual", () => {
                                            a.find(".iteam-edit-strategy").removeClass("select");
                                            d.html(gb())
                                        });
                                        d.html(gb());
                                        K.html(F);
                                        break;
                                    case "shop":
                                        F = $(`
                                    <div class="functional-edit-strategy indicators">
                                        <p>${this.translation("manual.categories.shop")}</p> 
                                        <div class="live-screenshot-case">
                                        </div>
                                        <div class="content">
                                            ${this.translation("manual.pages.detailedShop")}    
                                        </div>
                                    </div>
                                `);
                                        let c = F.find(".live-screenshot-case");
                                        c.html(kb());
                                        K.html(F);
                                        this.on("windowResize", "manual", () => {
                                            clearTimeout(O);
                                            O = setTimeout(() => {
                                                c.html(kb())
                                            }, 700)
                                        });
                                        break;
                                    case "logbook":
                                        F = $(`
                                    <div class="functional-edit-strategy indicators">
                                        <p>${this.translation("manual.categories.logbook")}</p> 
                                        <div class="live-screenshot-case">
                                        </div>
                                        <div class="content">
                                            ${this.translation("manual.pages.detailLogbook")}    
                                        </div>
                                    </div>
                                `);
                                        let r = F.find(".live-screenshot-case");
                                        r.html(mb());
                                        K.html(F);
                                        this.on("windowResize", "manual", () => {
                                            clearTimeout(O);
                                            O = setTimeout(() => {
                                                r.html(mb())
                                            }, 700)
                                        });
                                        break;
                                    case "walletDesc":
                                        F = $(`
                                    <div class="functional-edit-strategy walletDesc">
                                        <p>${this.translation("manual.categories.myTether")}</p> 
                                        <div class="live-screenshot-case">
                                        </div>
                                        <div class="content">
                                            ${this.translation("manual.pages.detailWalletDesc")}  
                                            <p class="to-start">${this.translation("manual.pages.toStartWallet")}</p>
                                            <ul class="add-accaunt">
                                                <li> 
                                                    <div class="wrap">
                                                        ${this.translation("manual.pages.generateAccount")}
                                                        <div class="attention-generate"> 
                                                            ${this.translation("manual.pages.attentionGenerateAccount")}
                                                        </div>
                                                    </div>
                                                </li>
                                                <li>
                                                    ${this.translation("manual.pages.importAccount")}
                                                </li>
                                                <li>
                                                    ${this.translation("manual.pages.createPair")}
                                                </li>
                                            </ul>
                                            ${this.translation("manual.pages.createSendTx")}
                                        </div>
                                    </div>
                                `);
                                        let u = F.find(".live-screenshot-case");
                                        u.html(pb());
                                        K.html(F);
                                        this.on("windowResize", "manual", () => {
                                            clearTimeout(O);
                                            O = setTimeout(() => {
                                                u.html(pb())
                                            }, 700)
                                        });
                                        break;
                                    case "tradingview":
                                        F = [{
                                            id: "add-indicator",
                                            function: Ma,
                                            data: {
                                                marks: ["manual.pages.addIndicatorApi"],
                                                parms: {}
                                            }
                                        }];
                                        V = $(`
                                    <div class="functional-edit-strategy indicators">
                                        <p>${this.translation("manual.pages.howBroadcastTradingView")}</p>
                                        <div class="live-screenshot-case"></div>
                                        <div class="content"> </div>
                                        <div class="content-additional">${this.translation("manual.pages.attentionTradingView")}</div>
                                    </div>
                                `);
                                        let A = V.find(".live-screenshot-case"),
                                            B = V.find(".content");
                                        F.forEach(w => {
                                            let y = $(`
                                        <div class="iteam-edit-strategy ${w.id}"> 
                                            ${w.data.marks.map(M=>this.translation(M,w.data.parms)).join()}         
                                        </div>
                                    `);
                                            y.on("click", () => {
                                                var M = y.hasClass("select");
                                                B.find(".iteam-edit-strategy").removeClass("select");
                                                M ? A.html(Ua()) : (y.addClass("select"), M = w.function(), A.html(M), M.on("stopped", () => {
                                                    y.removeClass("select")
                                                }))
                                            });
                                            B.append(y)
                                        });
                                        A.html(Ua());
                                        this.on("windowResize", "manual", () => {
                                            clearTimeout(O);
                                            O = setTimeout(() => {
                                                B.find(".iteam-edit-strategy").removeClass("select");
                                                A.html(Ua())
                                            }, 700)
                                        });
                                        this.on("allliveStop", "manual", () => {
                                            B.find(".iteam-edit-strategy").removeClass("select");
                                            A.html(Ua())
                                        });
                                        K.html(V);
                                        break;
                                    case "assetIdInfo":
                                        F = $(`
                                    <div class="functional-edit-strategy assetIdInfo">
                                        <p>${this.translation("manual.pages.assetIdInfo")}</p>
                                        <div class="asset-info-case">
                                            <div class="find-asset-case">
                                                <div class="find-asset-wrap">
                                                    <input type="text" name="findAsset" placeholder="${this.translation("action.find")}"/>
                                                    <div class="icon input-reset"></div>
                                                </div>
                                            </div>
                                            <div class="view-asset-case">
                                                <div class="view-asset-wrap">
                                                </div>
                                            </div>
                                        </div> 
                                    </div>
                                `);
                                        let C = F.find(".view-asset-case .view-asset-wrap");
                                        for (V = 0; V < this.storage.availableAssets.length; V++) {
                                            let w = this.storage.availableAssets[V];
                                            ra = $(`
                                        <div class="asset-data-case show">
                                            <div class="td img-bg-asset"> </div>
                                            <div class="td title" title="${this.translation("assetInfo.title")}">${w.title}</div>
                                            <div class="td id-case" title="${this.translation("assetInfo.id")}">
                                                <div class="value">${w.id.replaceAll("#","$")}</div>
                                                <div class="icon copy">
                                                    <div class="isCopied icon caret_left hide">${this.translation("action.isCopiedLow")}</div>
                                                </div>
                                            </div>
                                            <div class="td group" title="${this.translation("assetInfo.group")}">${this.translation(`assetGroups.${w.group}`)}</div>
                                            <div class="td minExp" title="${this.translation("assetInfo.minExp")}">S${w.minExp}</div>
                                            <div class="td profit" title="${this.translation("assetInfo.profit")}">${w.profit}%</div>
                                            <div class="td timeUpdate">${this.translation("assetInfo.timeUpdate")} ${moment(1E3*w.timeUpdate).format("DD.MM.YY HH:mm:ss")}</div>
                                            </div>
                                        </div>
                                    `);
                                            ra.attr("key", ra.text().replaceAll(/ +(?= )/g, " ").replaceAll("\n", "").toLowerCase());
                                            oa = ra.find(".td.img-bg-asset");
                                            Aa = Y(w).filter(M => void 0 != M);
                                            va = ra.find(".td.id-case .icon.copy");
                                            let y = va.find(".isCopied");
                                            va.on("click", async () => {
                                                await navigator.clipboard.writeText(w.id.replaceAll("#", "$"));
                                                y.removeClass("hide");
                                                setTimeout(() => {
                                                    y.addClass("hide")
                                                }, 1E3)
                                            });
                                            1 == Aa.length && oa.addClass("flag-one");
                                            for (va = 0; va < Aa.length; va++) oa.append(`<span class="flag-icon flag-icon--${Aa[va]}"></span>`);
                                            C.append(ra)
                                        }
                                        let D = F.find('input[name="findAsset"]');
                                        F.find(".find-asset-wrap .input-reset").on("click", () => {
                                            D.val("");
                                            D.trigger("input")
                                        });
                                        D.on("input", () => {
                                            let w = D.val();
                                            if (" " == w) return D.val(""), D.trigger("input");
                                            "" == w ? C.find(".asset-data-case").addClass("show") : (C.find(".asset-data-case").removeClass("show"), C.find(".asset-data-case").filter(function() {
                                                try {
                                                    return $(this).attr("key").indexOf(w.toLowerCase()) + 1
                                                } catch {
                                                    return !1
                                                }
                                            }).addClass("show"))
                                        });
                                        K.html(F);
                                        break;
                                    default:
                                        K.html(`\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 "${F}" \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435`)
                                }
                                K.find(".aff-linc").on("click",
                                    async () => {
                                        await chrome.runtime.sendMessage({
                                            sender: "panell",
                                            event: "openTab",
                                            isReglink: !0,
                                            url: `${this.storage.configuration.affiliateData.regDomains}${this.affiliate.linkPath}`
                                        })
                                    });
                                J.html(K)
                            },
                            z = $('\n                        <div class="manual-case">\n                            <div class="manual-categories-case">\n                                <ul class="categories-wrap"></ul>\n                            </div>\n                            <div class="manual-view-case"></div>\n                        </div>\n                    '),
                            I = z.find("ul.categories-wrap"),
                            J = z.find(".manual-view-case");
                        [{
                            id: "mainProvisions"
                        }, {
                            id: "trade",
                            subCategories: [{
                                id: "strategies"
                            }, {
                                id: "assets"
                            }, {
                                id: "indicators"
                            }, {
                                id: "regulations"
                            }, {
                                id: "martingale"
                            }, {
                                id: "history"
                            }, {
                                id: "logbook"
                            }, {
                                id: "shop"
                            }]
                        }, {
                            id: "externalSignal",
                            subCategories: [{
                                id: "assetIdInfo"
                            }, {
                                id: "tradingview"
                            }]
                        }, {
                            id: "trc20",
                            subCategories: [{
                                id: "walletDesc"
                            }]
                        }].forEach((F, R) => {
                            let W = $(`
                            <li class="iteam-categories ${F.subCategories?"is-sub":""}">
                                <div class="title-case">
                                    <div class="value">${this.translation(`manual.categories.${F.id}`)}</div>
                                    <div class="icon angle_right ${F.subCategories?"is-sub":""}"></div> 
                                </div> 
                            </li>
                        `),
                                x = W.find(".title-case");
                            if (F.subCategories) {
                                let S = $('\n                                <div class="sub-categories-case">\n                                    <ul class="sub-categories-wrap"></ul>\n                                </div>\n                            '),
                                    aa = S.find("ul.sub-categories-wrap");
                                F.subCategories.forEach(N => {
                                    let E = $(`
                                    <li class="iteam-sub-categories">
                                        <div class="sub-title-case">
                                            <div class="value">${this.translation(`manual.categories.${N.id}`)}</div>
                                            <!---<div class="icon share_sign"></div>-->
                                        </div>
                                    </li>
                                `);
                                    E.on("click", () => {
                                        W.find("ul.sub-categories-wrap li").removeClass("select");
                                        E.addClass("select");
                                        ba(N.id)
                                    });
                                    aa.append(E)
                                });
                                W.append(S)
                            }
                            x.on("click", () => {
                                if (!W.hasClass("select")) {
                                    var S = I.find("li.select.is-sub").length;
                                    I.find("li").removeClass("select");
                                    S && W.hasClass("is-sub") ? setTimeout(() => {
                                        W.addClass("select")
                                    }, 400) : W.addClass("select");
                                    F.subCategories ? W.find("li.iteam-sub-categories:first-child").trigger("click") : ba(F.id)
                                }
                            });
                            I.append(W);
                            0 == R && x.trigger("click")
                        });
                        return z
                    }, eb = async () => {
                        let Ba = $('\n                        <div class="contacts-case">\n                            <div class="loading">\n                                <img src="../img/svg/loading_2.svg" />\n                            </div>\n                        </div>\n                    ');
                        this.robotServerPing().then(ca => {
                            if (ca) Ba.html(`
                                <iframe id="jivo_container" src="${this.configuration.appData.contactsIframe}?partnersID=${this.storage.app.affiliate}&extensionID=${this.storage.app.id}&t=${Date.now()}" > \u0412\u0430\u0448 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0438\u0435 \u0444\u0440\u0435\u0439\u043c\u044b!</iframe>
                            `);
                            else {
                                Ba.addClass("no-ping");
                                let sa;
                                try {
                                    sa = this.affiliate.contacts.map(Ea => ({
                                        icon: Ea.icon,
                                        url: Ea.url,
                                        title: Ea.title.marks.map(za => this.translation(za, Ea.title.parms)).join()
                                    }))
                                } catch {
                                    sa = []
                                }
                                ca = $('<ul class="list-link"></ul>');
                                for (let Ea = 0; Ea < sa.length; Ea++) {
                                    let za = sa[Ea],
                                        xa = $(`<li class="${za.icon}">${za.title}</li>`);
                                    xa.on("click", async () => {
                                        await chrome.runtime.sendMessage({
                                            sender: "panell",
                                            event: "openTab",
                                            url: za.url
                                        })
                                    });
                                    ca.append(xa)
                                }
                                Ba.html(ca)
                            }
                        });
                        nb.on("contacts", async () => {
                            await chrome.runtime.sendMessage({
                                event: "addEvents",
                                data: {
                                    id: "contacts",
                                    delete: !0
                                }
                            })
                        });
                        this.on("newnotification", "contactsPage", async () => {
                            nb.find(".wrapper-view-case .wrapper-pages-case.contacts").hasClass("show") && await chrome.runtime.sendMessage({
                                event: "addEvents",
                                data: {
                                    id: "contacts",
                                    delete: !0
                                }
                            })
                        });
                        return Ba
                    }, jb = async () => {
                        let Ba = [],
                            ca = [],
                            sa = async (z = 0, I = !0) => {
                                Ba = await new Promise((x, S) => {
                                    let aa = indexedDB.open("pocketOptionRobot", 1);
                                    aa.onsuccess = async () => {
                                        let N = aa.result.transaction("notifications",
                                            "readonly").objectStore("notifications").getAll();
                                        N.onsuccess = function() {
                                            void 0 != N.result ? x(N.result) : x([])
                                        };
                                        N.onerror = () => {
                                            x([])
                                        }
                                    }
                                });
                                Ba.reverse();
                                I ? (xa.html(""), await b(300)) : (xa.addClass("hide"), await b(300), xa.html(""));
                                var J = xa.height();
                                if (50 > J) return !1;
                                I = Ba.length;
                                var F = Math.floor(J / 50);
                                for (J = 0; J < F; J++, z++) {
                                    if (!Ba[z]) continue;
                                    let x = Ba[z];
                                    switch (x.code) {
                                        case "002":
                                            x.parms = Object.assign(x.parms || {}, {
                                                redirectionPlatformDomain: this.configuration.appData.redirectionPlatformDomain,
                                                pocketOptionLogo: "../img/svg/pocketOptionLight.svg"
                                            })
                                    }
                                    let S =
                                        x.code ? this.translation(`notification.list.${x.code}.title`, x.parms) : x.title;
                                    var R = x.code ? this.translation(`notification.list.${x.code}.description`, x.parms) : x.description;
                                    let aa = x.code ? this.translation(`notification.list.${x.code}.text`, x.parms) : x.text,
                                        N = $(`
                                <div  class="${x.id} tr ${x.isRead?"read":""}">
                                    <div class="td checkbox"> <input id="${x.id}" type="checkbox"/><label class="checkbox" for="${x.id}"></label></div>
                                    <div class="td title action-open">
                                        <div class="title-case">
                                            <div class="icon-wrap">
                                                <div class="icon icon-notification"></div>
                                            </div>
                                            <div class="content-wrap">
                                                <div class="title-notification">${S}</div>
                                                <div class="short-text-notification">${R}</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="td date action-open">${moment(x.timestamp).format("DD.MM.YY HH:mm:ss")}</div>
                                    <div class="td action"> <div class="icon trash"></div> </div>
                                </div> 
                            `),
                                        E = N.find('input[type="checkbox"]');
                                    ca.includes(x.id) && E.attr("checked", "checked");
                                    E.on("change", () => {
                                        E.is(":checked") && !ca.includes(x.id) ? ca.push(x.id) : ca = ca.filter(H => H != x.id);
                                        0 < ca.length ? G.addClass("isChecked") : G.removeClass("isChecked")
                                    });
                                    N.on("mousedown", async H => {
                                        if (null == H.target.closest("label")) {
                                            if (null != H.target.closest(".action")) return null != H.target.closest(".icon.trash") ? (H = await la(this.translation("notification.title.deleteNotification"), this.translation("notification.topic.deleteNotification", {
                                                title: S
                                            }), L()), H ? H = await new Promise(async (Q, V) => {
                                                try {
                                                    let ra = indexedDB.open("pocketOptionRobot", 1);
                                                    ra.onsuccess = async () => {
                                                        ra.result.transaction("notifications", "readwrite").objectStore("notifications").delete(x.id).onsuccess = () => {
                                                            N.addClass("hide");
                                                            setTimeout(() => {
                                                                N.remove()
                                                            }, 300);
                                                            Q(!0)
                                                        }
                                                    }
                                                } catch (ra) {
                                                    Q(!1)
                                                }
                                            }) : !1) : !1;
                                            (H = N.hasClass("read")) || (H = await new Promise(async (Q, V) => {
                                                try {
                                                    x.isRead = !0;
                                                    let ra = indexedDB.open("pocketOptionRobot", 1);
                                                    ra.onsuccess = async () => {
                                                        ra.result.transaction("notifications", "readwrite").objectStore("notifications").put(x).onsuccess =
                                                            async () => {
                                                                await chrome.runtime.sendMessage({
                                                                    event: "addEvents",
                                                                    data: {
                                                                        id: "notification",
                                                                        delete: x.id
                                                                    }
                                                                });
                                                                this.post(this.configuration.appData.robotApiServer, {
                                                                    type: "readNotification",
                                                                    id: x.id
                                                                }).then().catch(() => {});
                                                                Q(!0)
                                                            }
                                                    }
                                                } catch (ra) {
                                                    Q(!1)
                                                }
                                            }));
                                            if (H) {
                                                N.addClass("read");
                                                let Q = $(`
                                        <div class="notification-wrap">
                                            <div class="icon envelope"></div>
                                            <div class="text">${aa}</div>
                                        </div>
                                    `);
                                                (await Ra(S, Q, L())).find(".min-popup-case").addClass("notifications");
                                                Q.find(".aff-linc").on("click", async () => {
                                                    await chrome.runtime.sendMessage({
                                                        sender: "panell",
                                                        event: "openTab",
                                                        isReglink: !0,
                                                        url: `${this.storage.configuration.affiliateData.regDomains}${this.affiliate.linkPath}`
                                                    })
                                                });
                                                Q.find("a.openTab").on("click", async ra => {
                                                    ra.preventDefault();
                                                    ra = $(ra.currentTarget);
                                                    await chrome.runtime.sendMessage({
                                                        sender: "panell",
                                                        event: "openTab",
                                                        url: ra.attr("data")
                                                    })
                                                });
                                                let V =
                                                    Q.find("button#client-submit");
                                                if (0 < V.length) V.on("click", () => {
                                                    let ra = () => {
                                                            V.attr("disabled", !1).html(this.translation("manual.pages.registrationForm.registration"))
                                                        },
                                                        oa = {
                                                            mail: {
                                                                input: Q.find("#client-email"),
                                                                label: Q.find("#client-email-error")
                                                            },
                                                            password: {
                                                                input: Q.find("#client-password"),
                                                                label: Q.find("#client-password-error")
                                                            },
                                                            agreement: {
                                                                input: Q.find("#client-agreement"),
                                                                label: Q.find("#client-agreement-error")
                                                            }
                                                        },
                                                        Aa = Q.find('input[name="email"]').val(),
                                                        va = Q.find('input[name="password"]').val(),
                                                        Wa = Q.find('input[name="rules"]').is(":checked");
                                                    (() => {
                                                        V.attr("disabled", !0).html(this.translation("manual.pages.registrationForm.waiting"))
                                                    })();
                                                    for (let Ka in oa) oa[Ka].input.removeClass("border-c-red"), oa[Ka].label.addClass("display-none"), oa[Ka].label.text("");
                                                    $.post(this.configuration.appData.formRegUrl, {
                                                        data: JSON.stringify({
                                                            email: Aa,
                                                            password: va,
                                                            agreement: Wa,
                                                            lang: this.storage.app.language || "ru",
                                                            campaignId: this.affiliate.campaignId || "843573",
                                                            domain: "pocketoption.com"
                                                        })
                                                    }, Ka => {
                                                        Ka = JSON.parse(Ka);
                                                        if (null != Ka.error.code) {
                                                            let ab = Ka.error.field;
                                                            oa[ab].input.addClass("border-c-red");
                                                            oa[ab].label.removeClass("display-none");
                                                            oa[ab].label.text(Ka.error.message)
                                                        } else Ka = new URL(Ka.redirectLink), Ka.host = this.configuration.appData.platformHost, chrome.runtime.sendMessage({
                                                            sender: "panell",
                                                            event: "openTab",
                                                            isReglink: !0,
                                                            url: Ka.toString()
                                                        }), Q.find('input[name="email"]').val(""), Q.find('input[name="password"]').val(""), Q.find('input[name="rules"]').removeAttr("checked")
                                                    }).fail(function() {
                                                        alert(this.transaction("errors.somethingWrong"))
                                                    }).always(function() {
                                                        ra()
                                                    })
                                                })
                                            }
                                        }
                                    });
                                    xa.append(N)
                                }
                                J = $(`
                            <div class="empty-list">
                                <div class="icon folderOpen"></div>
                                <div class="text">${this.translation("notification.noNotifications")}</div>
                            </div>
                        `);
                                xa.append(J);
                                xa.removeClass("hide");
                                Ha.html("");
                                J = $('<div class="nav-button-case prev"> <div class="icon prev-icon"> </div>');
                                R = $('<div class="nav-button-case next"> <div class="icon next-icon"> </div>');
                                let W = Math.ceil(I / F);
                                for (let x = 0; x < W && !(0 == x && x + 1 >= W); x++) {
                                    let S = $(`<div class="nav-button-case">${x+1}</div>`);
                                    0 == x && Ha.append(J);
                                    S.on("click", async () => {
                                        if (S.hasClass("select")) return !1;
                                        $("body").addClass("wait");
                                        await sa(0 == x ? 0 : x * F, !1);
                                        $("body").removeClass("wait")
                                    });
                                    let aa = z / F - 1;
                                    aa == x ? (S.addClass("select"), x + 1 == Math.ceil(I / F) ? R.addClass("hide-no-click") : (R.removeClass("hide-no-click"), R.on("click", async () => {
                                        $("body").addClass("wait");
                                        await sa((x + 1) * F, !1);
                                        $("body").removeClass("wait")
                                    })), 0 == x ? J.addClass("hide-no-click") : (J.removeClass("hide-no-click"), J.on("click", async () => {
                                        $("body").addClass("wait");
                                        await sa((x - 1) * F, !1);
                                        $("body").removeClass("wait")
                                    }))) : S.removeClass("select");
                                    x <= aa ? 2 < aa - x ? S.addClass(`hide hide${aa-x}`) : S.removeClass("hide") : 2 < x - aa ? S.addClass(`hide hide${x-
aa}`) : S.removeClass("hide");
                                    x + 1 != Math.ceil(I / F) && 0 != x || S.removeClass("hide");
                                    (7 > x - aa && -7 < x - aa || 0 == x || x + 1 == Math.ceil(I / F)) && Ha.append(S);
                                    x + 1 == Math.ceil(I / F) && Ha.append(R)
                                }
                                return !0
                            }, Ea = $(`
                        <div class="notification-page">
                            <div class="main-notification-case">
                                <div class="body-case">
                                    <div class="block-table">
                                        <div class="block-table-thead">
                                            <div class="button-thead deleteIt">${this.translation("action.delete")}</div> 
                                            <div class="button-thead readIt">${this.translation("action.readIt")}</div>    
                                        </div>
                                        <div class="block-table-tbody notification-list">
                                                
                                        </div>      
                                    </div>
                                </div>   
                                <div class="footer-case">
                                    <div class="page-nav-case"> </div>
                                </div> 
                            </div>
                        </div>
                    `);
                        var za = Ea.find(".body-case");
                        let xa = za.find(".notification-list"),
                            G = za.find(".block-table"),
                            Ha = Ea.find(".footer-case").find(".page-nav-case"),
                            ta = za.find(".block-table-thead .button-thead.readIt");
                        za = za.find(".block-table-thead .button-thead.deleteIt");
                        ta.on("click", async () => await new Promise(async (z, I) => {
                            try {
                                let J = indexedDB.open("pocketOptionRobot", 1);
                                J.onsuccess = async () => {
                                    let F = J.result.transaction("notifications", "readwrite").objectStore("notifications");
                                    for (let R = 0; R < ca.length; R++) await new Promise((W,
                                        x) => {
                                        let S = Ba.find(aa => aa.id == ca[R]);
                                        S ? (S.isRead = !0, F.put(S).onsuccess = () => {
                                            xa.find(`.tr.${S.id}`).addClass("read");
                                            W(!0)
                                        }) : W(!0)
                                    });
                                    await chrome.runtime.sendMessage({
                                        event: "addEvents",
                                        data: {
                                            id: "notification",
                                            delete: ca
                                        }
                                    });
                                    this.post(this.configuration.appData.robotApiServer, {
                                        type: "readNotification",
                                        id: ca
                                    }).then().catch(() => {});
                                    z(!0)
                                }
                            } catch (J) {
                                z(!1)
                            }
                        }));
                        za.on("click", async () => {
                            let z = await la(this.translation("notification.title.deleteNotifications"), this.translation("notification.topic.deleteNotifications"),
                                L());
                            if (!z) return !1;
                            z = await new Promise(async (I, J) => {
                                try {
                                    let F = indexedDB.open("pocketOptionRobot", 1);
                                    F.onsuccess = async () => {
                                        let R = F.result.transaction("notifications", "readwrite").objectStore("notifications");
                                        for (let W = 0; W < ca.length; W++) await new Promise((x, S) => {
                                            R.delete(ca[W]).onsuccess = () => {
                                                xa.find(`.tr.${ca[W]}`).addClass("hide");
                                                setTimeout(() => {
                                                    xa.find(`.tr.${ca[W]}`).remove();
                                                    sa(0, !1)
                                                }, 300);
                                                x(!0)
                                            }
                                        });
                                        await chrome.runtime.sendMessage({
                                            event: "addEvents",
                                            data: {
                                                id: "notification",
                                                delete: ca
                                            }
                                        });
                                        I(!0)
                                    }
                                } catch (F) {
                                    I(!1)
                                }
                            });
                            ca = [];
                            G.removeClass("isChecked");
                            return z
                        });
                        this.on("addedNotification", "notificationPage", () => {
                            sa(0, !1)
                        });
                        nb.on("notification", async () => {
                            ca = [];
                            G.removeClass("isChecked");
                            sa()
                        });
                        let ba;
                        this.on("windowResize", "notification", async () => {
                            clearTimeout(ba);
                            Ea.addClass("hide");
                            ba = setTimeout(() => {
                                Ea.removeClass("hide");
                                sa()
                            }, 700)
                        });
                        return Ea
                    }, $a = $(`<div class="pages-case ${fa.appearance\u0421ontent}"></div>`);
                switch (P) {
                    case "experts":
                        $a.html(await La());
                        break;
                    case "history":
                        $a.html(await ib());
                        break;
                    case "shop":
                        $a.html(await db());
                        break;
                    case "trc20":
                        $a.html(await Sa());
                        break;
                    case "manual":
                        $a.html(await Ya());
                        break;
                    case "contacts":
                        $a.html(await eb());
                        break;
                    case "notification":
                        $a.html(await jb());
                        break;
                    default:
                        $a.html(`pages '${P}' 404  no found`)
                }
                setTimeout(() => {
                    $a.addClass("show")
                }, 100);
                return $a
            }, Xa = $(`<div class="wrapper-pages-case ${Ia.id}"></div>`), na = $('<div class="view-case"></div>');
            if ("undefined" != typeof Ia.child) {
                let fa = $(`<div class="submenu-case ${Ia.id}"></div>`);
                for (let P = 0; P < Ia.child.length; P++) {
                    let qa = Ia.child[P],
                        ma = $(`
                        <div class="iteam-submenu-case hoverUnderline" title="${null!=qa.description?this.translation(qa.description):""}">
                            <div class="icon ${qa.id}"></div> 
                            <div class="title">${this.translation(qa.title)}</div>
                        </div>
                    `);
                    fa.append(ma);
                    ma.on("click", async La => {
                        La = $(La.currentTarget);
                        La.hasClass("activ") || (fa.find(".iteam-submenu-case").removeClass("activ"), La.addClass("activ"), na.html(await fb(qa)))
                    });
                    0 == P && ma.click()
                }
                Xa.append(fa)
            } else na.html(await fb(Ia));
            Xa.append(na);
            return Xa
        };
        let nb = $('\n            <div class="main-case"> \n                <div class="left-menu-case">\n                    <div class="wrapper-menu-case"> \n                    </div>\n                </div>\n                <div class="wrapper-view-case"> </div>\n            </div>\n        ');
        for (sb = 0; sb < this.configuration.mainMenu.length; sb++) {
            let Ia = this.configuration.mainMenu[sb];
            ob = (ob = this.storage.events.find(na => na.id == Ia.id)) ? ob.data.length : 0;
            ob = $(`
                <div class="iteam-menu-case">
                    <div class="icon ${Ia.id}"></div>
                    <div class="title">${this.translation(Ia.title)}</div>
                    <div class="new-events" count="${ob}"><count>${ob}</coint></div>
                </div>
            `);
            let fb = ob.find(".new-events"),
                Xa = fb.find("count");
            this.on(`new${Ia.id}`, "iteamMainMenu", na => {
                fb.attr("count", na);
                Xa.html(na)
            });
            nb.find(".wrapper-menu-case").append(ob);
            if (sb + 1 == this.configuration.mainMenu.length) {
                nb.find(".wrapper-menu-case").append('<div class="stretch"></div>');
                let na = $('\n                    <div class="iteam-menu-case">\n                        <div class="icon exit"></div> \n                    </div>\n                ');
                nb.find(".wrapper-menu-case").append(na);
                na.on("click", () => {
                    window.close()
                })
            }
            nb.find(".wrapper-view-case").append(await rb(Ia));
            ob.on("click", na => {
                this.runEvent("allliveStop", !0);
                $("main").attr("page", Ia.id);
                na = $(na.currentTarget);
                if (!na.hasClass("activ")) {
                    nb.find(".left-menu-case .wrapper-menu-case .iteam-menu-case").removeClass("activ");
                    na.addClass("activ");
                    nb.find(".wrapper-view-case .wrapper-pages-case").removeClass("show");
                    nb.find(`.wrapper-view-case .wrapper-pages-case.${Ia.id}`).addClass("show");
                    nb.find(".wrapper-view-case .wrapper-pages-case .view-case .pages-case").removeClass("show");
                    setTimeout(() => {
                        nb.find(`.wrapper-view-case .wrapper-pages-case.${Ia.id} .view-case .pages-case`).addClass("show")
                    }, 100);
                    switch (Ia.id) {
                        case "trc20":
                            let fa = $(".wrapper-view-case .wrapper-pages-case.trc20 .coin-history-wrap .history-view-case");
                            if (!fa.length) return;
                            setTimeout(() => {
                                let P = $(".wrapper-pages-case.show .view-case");
                                fa.css({
                                    "max-height": `${P.height()+P.offset().top-fa.offset().top-10}px`
                                })
                            }, 300);
                            this.on("windowResize", "elIteamMainMenu", () => {
                                let P = $(".wrapper-view-case .wrapper-pages-case.trc20 .coin-history-wrap .history-view-case"),
                                    qa = $(".wrapper-pages-case.show .view-case");
                                P.css({
                                    "max-height": `${qa.height()+qa.offset().top-P.offset().top-10}px`
                                })
                            });
                            this.serverPing().then(P => {
                                P ? this.runEvent("connectMyTetherServer", P) : this.runEvent("errorConnectMyTetherServer")
                            }).catch(() => {
                                this.runEvent("errorConnectMyTetherServer")
                            })
                    }
                    nb.trigger(Ia.id)
                }
            });
            0 == sb && ob.click()
        }
        $("main").html(nb)
    }
    translation(L, Y = {}) {
        let ja = L.split("."),
            Z = 0,
            la = this.textTranslation;
        for (; Z < ja.length && (la = la[ja[Z]], "object" == typeof la); Z++);
        if (void 0 == la) return L;
        void 0 == Y && (Y = {});
        for (let Ca in Y) la = la.replace("${" + Ca + "}", Y[Ca]);
        return la
    }
}(() => {
    let L = new Panel;
    $(document).ready(() => {
        document.oncontextmenu = function(Y) {
            if (!["INPUT", "TEXTAREA"].includes($(Y.srcElement).prop("tagName"))) return !1
        };
        $(document).click(Y => {
            L.runEvent("documentClick", Y);
            null === Y.target.closest(".showselect") && $("*").removeClass("showselect")
        })
    })
})();
$(document).click(L => {
    L.target.closest("input") || (null === L.target.closest(".popup-case") && $("*").removeClass("popup-show"), $("ul.wrap-strategy-case li.iteam-strategy-case").removeClass("context-menu-show edit"), $("ul.wrap-strategy-case li.iteam-strategy-case .context-menu-case").css({
        top: -1E3,
        left: 0,
        opacity: 0
    }))
});
$(function() {
    $("#sortable").sortable({
        cancel: ".indicator-settings-case"
    })
});